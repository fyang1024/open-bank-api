//
// AccountsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AccountsAPI {     /**
     Get Account Detail
     - parameter accountId: (path) A tokenised identifier for the account which is unique but not shareable 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccountDetail(accountId: String, completion: @escaping ((_ data: ResponseBankingAccount?,_ error: Error?) -> Void)) {
        getAccountDetailWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Account Detail
     - GET /banking/accounts/{accountId}
     - Obtain detailed information on a single account
     - parameter accountId: (path) A tokenised identifier for the account which is unique but not shareable 

     - returns: RequestBuilder<ResponseBankingAccount> 
     */
    open class func getAccountDetailWithRequestBuilder(accountId: String) -> RequestBuilder<ResponseBankingAccount> {
        var path = "/banking/accounts/{accountId}"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResponseBankingAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }

    /**
     Get Transaction Detail
     - parameter accountId: (path) The account id token that is used to uniquely represent the account      - parameter transactionId: (path) The unique identifier for the specific transaction for which details are being requested 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTransactionDetail(accountId: String, transactionId: String, completion: @escaping ((_ data: ResponseBankingTransactionDetail?,_ error: Error?) -> Void)) {
        getTransactionDetailWithRequestBuilder(accountId: accountId, transactionId: transactionId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Transaction Detail
     - GET /banking/accounts/{accountId}/transactions/{transactionId}
     - Obtain detailed information on a transaction for a specific account
     - parameter accountId: (path) The account id token that is used to uniquely represent the account      - parameter transactionId: (path) The unique identifier for the specific transaction for which details are being requested 

     - returns: RequestBuilder<ResponseBankingTransactionDetail> 
     */
    open class func getTransactionDetailWithRequestBuilder(accountId: String, transactionId: String) -> RequestBuilder<ResponseBankingTransactionDetail> {
        var path = "/banking/accounts/{accountId}/transactions/{transactionId}"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let transactionIdPreEscape = "\(transactionId)"
        let transactionIdPostEscape = transactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transactionId}", with: transactionIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResponseBankingTransactionDetail>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }

    /**
     Get Transactions For Account
     - parameter accountId: (path) ID of the account to get transactions for.  Must have previously been returned by one of the account list end points.      - parameter startTime: (query) Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)     - parameter endTime: (query) Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)     - parameter minAmount: (query) Filter transactions to only transactions with amounts higher or equal to than this amount (optional)     - parameter maxAmount: (query) Filter transactions to only transactions with amounts less than or equal to than this amount (optional)     - parameter text: (query) Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)     - parameter page: (query) Page of results to request (standard pagination) (optional)     - parameter pageSize: (query) Page size to request. Default is 25 (standard pagination) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTransactions(accountId: String, startTime: String? = nil, endTime: String? = nil, minAmount: String? = nil, maxAmount: String? = nil, text: String? = nil, page: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ResponseBankingTransactions?,_ error: Error?) -> Void)) {
        getTransactionsWithRequestBuilder(accountId: accountId, startTime: startTime, endTime: endTime, minAmount: minAmount, maxAmount: maxAmount, text: text, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Transactions For Account
     - GET /banking/accounts/{accountId}/transactions
     - Obtain transactions for a specific account
     - parameter accountId: (path) ID of the account to get transactions for.  Must have previously been returned by one of the account list end points.      - parameter startTime: () Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)     - parameter endTime: () Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)     - parameter minAmount: () Filter transactions to only transactions with amounts higher or equal to than this amount (optional)     - parameter maxAmount: () Filter transactions to only transactions with amounts less than or equal to than this amount (optional)     - parameter text: () Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)     - parameter page: () Page of results to request (standard pagination) (optional)     - parameter pageSize: () Page size to request. Default is 25 (standard pagination) (optional)

     - returns: RequestBuilder<ResponseBankingTransactions> 
     */
    open class func getTransactionsWithRequestBuilder(accountId: String, startTime: String? = nil, endTime: String? = nil, minAmount: String? = nil, maxAmount: String? = nil, text: String? = nil, page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ResponseBankingTransactions> {
        var path = "/banking/accounts/{accountId}/transactions"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "start-time": startTime, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "end-time": endTime, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "min-amount": minAmount, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "max-amount": maxAmount, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "text": text, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page-size": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ResponseBankingTransactions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     * enum for parameter openStatus
     */
    public enum OpenStatus_listAccounts: String { 
        case _open = "OPEN"
        case closed = "CLOSED"
        case all = "ALL"
    }

    /**
     * enum for parameter isOwned
     */
    public enum IsOwned_listAccounts: String { 
        case owned = "OWNED"
        case notOwned = "NOT_OWNED"
        case all = "ALL"
    }

    /**
     * enum for parameter productCategory
     */
    public enum ProductCategory_listAccounts: String { 
        case persAtCallDeposits = "PERS_AT_CALL_DEPOSITS"
        case busAtCallDeposits = "BUS_AT_CALL_DEPOSITS"
        case termDeposits = "TERM_DEPOSITS"
        case residentialMortgages = "RESIDENTIAL_MORTGAGES"
        case persCredAndChrgCards = "PERS_CRED_AND_CHRG_CARDS"
        case busCredAndChrgCards = "BUS_CRED_AND_CHRG_CARDS"
        case persLoans = "PERS_LOANS"
        case persLeasing = "PERS_LEASING"
        case busLeasing = "BUS_LEASING"
        case tradeFinance = "TRADE_FINANCE"
        case persOverdraft = "PERS_OVERDRAFT"
        case busOverdraft = "BUS_OVERDRAFT"
        case busLoans = "BUS_LOANS"
        case foreignCurrAtCallDeposits = "FOREIGN_CURR_AT_CALL_DEPOSITS"
        case foreignCurrTermDeposits = "FOREIGN_CURR_TERM_DEPOSITS"
        case foreignCurrLoan = "FOREIGN_CURR_LOAN"
        case foreignCurrrenctOverdraft = "FOREIGN_CURRRENCT_OVERDRAFT"
        case travelCard = "TRAVEL_CARD"
    }
    /**
     Get Accounts
     - parameter openStatus: (query) Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)     - parameter isOwned: (query) Filters accounts based on whether they are owned by the authorised customer (optional)     - parameter productCategory: (query) Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)     - parameter page: (query) Page of results to request (standard pagination) (optional)     - parameter pageSize: (query) Page size to request. Default is 25 (standard pagination) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAccounts(openStatus: OpenStatus_listAccounts? = nil, isOwned: IsOwned_listAccounts? = nil, productCategory: ProductCategory_listAccounts? = nil, page: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ResponseBankingAccounts?,_ error: Error?) -> Void)) {
        listAccountsWithRequestBuilder(openStatus: openStatus, isOwned: isOwned, productCategory: productCategory, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Accounts
     - GET /banking/accounts
     - Obtain a list of accounts
     - parameter openStatus: () Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)     - parameter isOwned: () Filters accounts based on whether they are owned by the authorised customer (optional)     - parameter productCategory: () Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)     - parameter page: () Page of results to request (standard pagination) (optional)     - parameter pageSize: () Page size to request. Default is 25 (standard pagination) (optional)

     - returns: RequestBuilder<ResponseBankingAccounts> 
     */
    open class func listAccountsWithRequestBuilder(openStatus: OpenStatus_listAccounts? = nil, isOwned: IsOwned_listAccounts? = nil, productCategory: ProductCategory_listAccounts? = nil, page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ResponseBankingAccounts> {
        let path = "/banking/accounts"
        let URLString = SwaggerClientAPI.basePath + path        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "open-status": openStatus?.rawValue, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "is-owned": isOwned?.rawValue, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "product-category": productCategory?.rawValue, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page-size": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ResponseBankingAccounts>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     * enum for parameter openStatus
     */
    public enum OpenStatus_listBalancesBulk: String { 
        case _open = "OPEN"
        case closed = "CLOSED"
        case all = "ALL"
    }

    /**
     * enum for parameter isOwned
     */
    public enum IsOwned_listBalancesBulk: String { 
        case owned = "OWNED"
        case notOwned = "NOT_OWNED"
        case all = "ALL"
    }

    /**
     * enum for parameter productCategory
     */
    public enum ProductCategory_listBalancesBulk: String { 
        case persAtCallDeposits = "PERS_AT_CALL_DEPOSITS"
        case busAtCallDeposits = "BUS_AT_CALL_DEPOSITS"
        case termDeposits = "TERM_DEPOSITS"
        case residentialMortgages = "RESIDENTIAL_MORTGAGES"
        case persCredAndChrgCards = "PERS_CRED_AND_CHRG_CARDS"
        case busCredAndChrgCards = "BUS_CRED_AND_CHRG_CARDS"
        case persLoans = "PERS_LOANS"
        case persLeasing = "PERS_LEASING"
        case busLeasing = "BUS_LEASING"
        case tradeFinance = "TRADE_FINANCE"
        case persOverdraft = "PERS_OVERDRAFT"
        case busOverdraft = "BUS_OVERDRAFT"
        case busLoans = "BUS_LOANS"
        case foreignCurrAtCallDeposits = "FOREIGN_CURR_AT_CALL_DEPOSITS"
        case foreignCurrTermDeposits = "FOREIGN_CURR_TERM_DEPOSITS"
        case foreignCurrLoan = "FOREIGN_CURR_LOAN"
        case foreignCurrrenctOverdraft = "FOREIGN_CURRRENCT_OVERDRAFT"
        case travelCard = "TRAVEL_CARD"
    }
    /**
     Get Bulk Balances
     - parameter openStatus: (query) Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)     - parameter isOwned: (query) Filters accounts based on whether they are owned by the authorised customer (optional)     - parameter productCategory: (query) Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)     - parameter page: (query) Page of results to request (standard pagination) (optional)     - parameter pageSize: (query) Page size to request. Default is 25 (standard pagination) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listBalancesBulk(openStatus: OpenStatus_listBalancesBulk? = nil, isOwned: IsOwned_listBalancesBulk? = nil, productCategory: ProductCategory_listBalancesBulk? = nil, page: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ResponseBankingAccountsBalances?,_ error: Error?) -> Void)) {
        listBalancesBulkWithRequestBuilder(openStatus: openStatus, isOwned: isOwned, productCategory: productCategory, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Bulk Balances
     - GET /banking/accounts/balances
     - Obtain balances for multiple, filtered accounts
     - parameter openStatus: () Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)     - parameter isOwned: () Filters accounts based on whether they are owned by the authorised customer (optional)     - parameter productCategory: () Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)     - parameter page: () Page of results to request (standard pagination) (optional)     - parameter pageSize: () Page size to request. Default is 25 (standard pagination) (optional)

     - returns: RequestBuilder<ResponseBankingAccountsBalances> 
     */
    open class func listBalancesBulkWithRequestBuilder(openStatus: OpenStatus_listBalancesBulk? = nil, isOwned: IsOwned_listBalancesBulk? = nil, productCategory: ProductCategory_listBalancesBulk? = nil, page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ResponseBankingAccountsBalances> {
        let path = "/banking/accounts/balances"
        let URLString = SwaggerClientAPI.basePath + path        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "open-status": openStatus?.rawValue, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "is-owned": isOwned?.rawValue, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "product-category": productCategory?.rawValue, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page-size": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ResponseBankingAccountsBalances>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }

    /**
     Get Balances For Specific Accounts
     - parameter body: (body) The list of account IDs to obtain information for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listBalancesSpecificAccounts(body: RequestAccountIds, completion: @escaping ((_ data: ResponseBankingAccountsBalances?,_ error: Error?) -> Void)) {
        listBalancesSpecificAccountsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Balances For Specific Accounts
     - POST /banking/accounts/balances
     - Obtain balances for a specified list of accounts
     - parameter body: (body) The list of account IDs to obtain information for 

     - returns: RequestBuilder<ResponseBankingAccountsBalances> 
     */
    open class func listBalancesSpecificAccountsWithRequestBuilder(body: RequestAccountIds) -> RequestBuilder<ResponseBankingAccountsBalances> {
        let path = "/banking/accounts/balances"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResponseBankingAccountsBalances>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     * enum for parameter openStatus
     */
    public enum OpenStatus_listTransactionsBulk: String { 
        case _open = "OPEN"
        case closed = "CLOSED"
        case all = "ALL"
    }

    /**
     * enum for parameter isOwned
     */
    public enum IsOwned_listTransactionsBulk: String { 
        case owned = "OWNED"
        case notOwned = "NOT_OWNED"
        case all = "ALL"
    }

    /**
     * enum for parameter productCategory
     */
    public enum ProductCategory_listTransactionsBulk: String { 
        case persAtCallDeposits = "PERS_AT_CALL_DEPOSITS"
        case busAtCallDeposits = "BUS_AT_CALL_DEPOSITS"
        case termDeposits = "TERM_DEPOSITS"
        case residentialMortgages = "RESIDENTIAL_MORTGAGES"
        case persCredAndChrgCards = "PERS_CRED_AND_CHRG_CARDS"
        case busCredAndChrgCards = "BUS_CRED_AND_CHRG_CARDS"
        case persLoans = "PERS_LOANS"
        case persLeasing = "PERS_LEASING"
        case busLeasing = "BUS_LEASING"
        case tradeFinance = "TRADE_FINANCE"
        case persOverdraft = "PERS_OVERDRAFT"
        case busOverdraft = "BUS_OVERDRAFT"
        case busLoans = "BUS_LOANS"
        case foreignCurrAtCallDeposits = "FOREIGN_CURR_AT_CALL_DEPOSITS"
        case foreignCurrTermDeposits = "FOREIGN_CURR_TERM_DEPOSITS"
        case foreignCurrLoan = "FOREIGN_CURR_LOAN"
        case foreignCurrrenctOverdraft = "FOREIGN_CURRRENCT_OVERDRAFT"
        case travelCard = "TRAVEL_CARD"
    }
    /**
     Get Transactions For Multiple Accounts
     - parameter openStatus: (query) Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)     - parameter isOwned: (query) Filters accounts based on whether they are owned by the authorised customer (optional)     - parameter productCategory: (query) Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)     - parameter startTime: (query) Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)     - parameter endTime: (query) Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)     - parameter minAmount: (query) Filter transactions to only transactions with amounts higher or equal to than this amount (optional)     - parameter maxAmount: (query) Filter transactions to only transactions with amounts less than or equal to than this amount (optional)     - parameter text: (query) Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)     - parameter page: (query) Page of results to request (standard pagination) (optional)     - parameter pageSize: (query) Page size to request. Default is 25 (standard pagination) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listTransactionsBulk(openStatus: OpenStatus_listTransactionsBulk? = nil, isOwned: IsOwned_listTransactionsBulk? = nil, productCategory: ProductCategory_listTransactionsBulk? = nil, startTime: String? = nil, endTime: String? = nil, minAmount: String? = nil, maxAmount: String? = nil, text: String? = nil, page: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ResponseBankingTransactions?,_ error: Error?) -> Void)) {
        listTransactionsBulkWithRequestBuilder(openStatus: openStatus, isOwned: isOwned, productCategory: productCategory, startTime: startTime, endTime: endTime, minAmount: minAmount, maxAmount: maxAmount, text: text, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Transactions For Multiple Accounts
     - GET /banking/accounts/transactions
     - Obtain transactions for multiple, filtered accounts
     - parameter openStatus: () Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)     - parameter isOwned: () Filters accounts based on whether they are owned by the authorised customer (optional)     - parameter productCategory: () Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)     - parameter startTime: () Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)     - parameter endTime: () Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)     - parameter minAmount: () Filter transactions to only transactions with amounts higher or equal to than this amount (optional)     - parameter maxAmount: () Filter transactions to only transactions with amounts less than or equal to than this amount (optional)     - parameter text: () Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)     - parameter page: () Page of results to request (standard pagination) (optional)     - parameter pageSize: () Page size to request. Default is 25 (standard pagination) (optional)

     - returns: RequestBuilder<ResponseBankingTransactions> 
     */
    open class func listTransactionsBulkWithRequestBuilder(openStatus: OpenStatus_listTransactionsBulk? = nil, isOwned: IsOwned_listTransactionsBulk? = nil, productCategory: ProductCategory_listTransactionsBulk? = nil, startTime: String? = nil, endTime: String? = nil, minAmount: String? = nil, maxAmount: String? = nil, text: String? = nil, page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ResponseBankingTransactions> {
        let path = "/banking/accounts/transactions"
        let URLString = SwaggerClientAPI.basePath + path        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "open-status": openStatus?.rawValue, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "is-owned": isOwned?.rawValue, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "product-category": productCategory?.rawValue, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "start-time": startTime, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "end-time": endTime, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "min-amount": minAmount, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "max-amount": maxAmount, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "text": text, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page-size": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ResponseBankingTransactions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }

    /**
     Get Transactions For Specific Accounts
     - parameter body: (body) The list of account IDs to obtain information for      - parameter startTime: (query) Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)     - parameter endTime: (query) Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)     - parameter minAmount: (query) Filter transactions to only transactions with amounts higher or equal to than this amount (optional)     - parameter maxAmount: (query) Filter transactions to only transactions with amounts less than or equal to than this amount (optional)     - parameter text: (query) Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)     - parameter page: (query) Page of results to request (standard pagination) (optional)     - parameter pageSize: (query) Page size to request. Default is 25 (standard pagination) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listTransactionsSpecificAccounts(body: RequestAccountIdsstartTime: String? = nil, endTime: String? = nil, minAmount: String? = nil, maxAmount: String? = nil, text: String? = nil, page: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ResponseBankingTransactions?,_ error: Error?) -> Void)) {
        listTransactionsSpecificAccountsWithRequestBuilder(body: bodystartTime: startTime, endTime: endTime, minAmount: minAmount, maxAmount: maxAmount, text: text, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Transactions For Specific Accounts
     - POST /banking/accounts/transactions
     - Obtain transactions for a specified list of transactions.
     - parameter body: (body) The list of account IDs to obtain information for      - parameter startTime: () Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)     - parameter endTime: () Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)     - parameter minAmount: () Filter transactions to only transactions with amounts higher or equal to than this amount (optional)     - parameter maxAmount: () Filter transactions to only transactions with amounts less than or equal to than this amount (optional)     - parameter text: () Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)     - parameter page: () Page of results to request (standard pagination) (optional)     - parameter pageSize: () Page size to request. Default is 25 (standard pagination) (optional)

     - returns: RequestBuilder<ResponseBankingTransactions> 
     */
    open class func listTransactionsSpecificAccountsWithRequestBuilder(body: RequestAccountIdsstartTime: String? = nil, endTime: String? = nil, minAmount: String? = nil, maxAmount: String? = nil, text: String? = nil, page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ResponseBankingTransactions> {
        let path = "/banking/accounts/transactions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "start-time": startTime, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "end-time": endTime, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "min-amount": minAmount, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "max-amount": maxAmount, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "text": text, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page-size": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ResponseBankingTransactions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }

}
