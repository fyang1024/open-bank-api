//
// DirectDebitsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DirectDebitsAPI {     /**
     Get Direct Debits For Account
     - parameter accountId: (path) ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points.      - parameter page: (query) Page of results to request (standard pagination) (optional)     - parameter pageSize: (query) Page size to request. Default is 25 (standard pagination) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDirectDebits(accountId: String, page: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ResponseBankingDirectDebits?,_ error: Error?) -> Void)) {
        listDirectDebitsWithRequestBuilder(accountId: accountId, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Direct Debits For Account
     - GET /banking/accounts/{accountId}/direct-debits
     - Obtain direct debit authorisations for a specific account
     - parameter accountId: (path) ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points.      - parameter page: () Page of results to request (standard pagination) (optional)     - parameter pageSize: () Page size to request. Default is 25 (standard pagination) (optional)

     - returns: RequestBuilder<ResponseBankingDirectDebits> 
     */
    open class func listDirectDebitsWithRequestBuilder(accountId: String, page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ResponseBankingDirectDebits> {
        var path = "/banking/accounts/{accountId}/direct-debits"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page-size": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ResponseBankingDirectDebits>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     * enum for parameter isOwned
     */
    public enum IsOwned_listDirectDebitsBulk: String { 
        case owned = "OWNED"
        case notOwned = "NOT_OWNED"
        case all = "ALL"
    }

    /**
     * enum for parameter productCategory
     */
    public enum ProductCategory_listDirectDebitsBulk: String { 
        case persAtCallDeposits = "PERS_AT_CALL_DEPOSITS"
        case busAtCallDeposits = "BUS_AT_CALL_DEPOSITS"
        case termDeposits = "TERM_DEPOSITS"
        case residentialMortgages = "RESIDENTIAL_MORTGAGES"
        case persCredAndChrgCards = "PERS_CRED_AND_CHRG_CARDS"
        case busCredAndChrgCards = "BUS_CRED_AND_CHRG_CARDS"
        case persLoans = "PERS_LOANS"
        case persLeasing = "PERS_LEASING"
        case busLeasing = "BUS_LEASING"
        case tradeFinance = "TRADE_FINANCE"
        case persOverdraft = "PERS_OVERDRAFT"
        case busOverdraft = "BUS_OVERDRAFT"
        case busLoans = "BUS_LOANS"
        case foreignCurrAtCallDeposits = "FOREIGN_CURR_AT_CALL_DEPOSITS"
        case foreignCurrTermDeposits = "FOREIGN_CURR_TERM_DEPOSITS"
        case foreignCurrLoan = "FOREIGN_CURR_LOAN"
        case foreignCurrrenctOverdraft = "FOREIGN_CURRRENCT_OVERDRAFT"
        case travelCard = "TRAVEL_CARD"
    }
    /**
     Get Bulk Direct Debits
     - parameter isOwned: (query) Filters accounts based on whether they are owned by the authorised customer (optional)     - parameter productCategory: (query) Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)     - parameter page: (query) Page of results to request (standard pagination) (optional)     - parameter pageSize: (query) Page size to request. Default is 25 (standard pagination) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDirectDebitsBulk(isOwned: IsOwned_listDirectDebitsBulk? = nil, productCategory: ProductCategory_listDirectDebitsBulk? = nil, page: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ResponseBankingDirectDebits?,_ error: Error?) -> Void)) {
        listDirectDebitsBulkWithRequestBuilder(isOwned: isOwned, productCategory: productCategory, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Bulk Direct Debits
     - GET /banking/accounts/direct-debits
     - Obtain direct debit authorisations for multiple, filtered accounts
     - parameter isOwned: () Filters accounts based on whether they are owned by the authorised customer (optional)     - parameter productCategory: () Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)     - parameter page: () Page of results to request (standard pagination) (optional)     - parameter pageSize: () Page size to request. Default is 25 (standard pagination) (optional)

     - returns: RequestBuilder<ResponseBankingDirectDebits> 
     */
    open class func listDirectDebitsBulkWithRequestBuilder(isOwned: IsOwned_listDirectDebitsBulk? = nil, productCategory: ProductCategory_listDirectDebitsBulk? = nil, page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ResponseBankingDirectDebits> {
        let path = "/banking/accounts/direct-debits"
        let URLString = SwaggerClientAPI.basePath + path        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "is-owned": isOwned?.rawValue, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "product-category": productCategory?.rawValue, 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
        ])        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page-size": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ResponseBankingDirectDebits>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }

    /**
     Get Direct Debits For Specific Accounts
     - parameter body: (body) The list of account IDs to obtain information for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDirectDebitsSpecificAccounts(body: RequestAccountIds, completion: @escaping ((_ data: ResponseBankingDirectDebits?,_ error: Error?) -> Void)) {
        listDirectDebitsSpecificAccountsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Direct Debits For Specific Accounts
     - POST /banking/accounts/direct-debits
     - Obtain direct debit authorisations for a specified list of accounts
     - parameter body: (body) The list of account IDs to obtain information for 

     - returns: RequestBuilder<ResponseBankingDirectDebits> 
     */
    open class func listDirectDebitsSpecificAccountsWithRequestBuilder(body: RequestAccountIds) -> RequestBuilder<ResponseBankingDirectDebits> {
        let path = "/banking/accounts/direct-debits"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResponseBankingDirectDebits>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }

}
