/*
 * Consumer Data Standards
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.PAFAddress;
import io.swagger.client.model.PhysicalAddress;
import io.swagger.client.model.SimpleAddress;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * PhysicalAddressWithPurpose
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-14T03:38:22.905Z[GMT]")public class PhysicalAddressWithPurpose {
  /**
   * The type of address object present
   */
  @JsonAdapter(AddressUTypeEnum.Adapter.class)
  public enum AddressUTypeEnum {
    SIMPLE("simple"),
    PAF("paf");

    private String value;

    AddressUTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AddressUTypeEnum fromValue(String text) {
      for (AddressUTypeEnum b : AddressUTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AddressUTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AddressUTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AddressUTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AddressUTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("addressUType")
  private AddressUTypeEnum addressUType = null;

  @SerializedName("simple")
  private SimpleAddress simple = null;

  @SerializedName("paf")
  private PAFAddress paf = null;
  public PhysicalAddressWithPurpose addressUType(AddressUTypeEnum addressUType) {
    this.addressUType = addressUType;
    return this;
  }

  

  /**
  * The type of address object present
  * @return addressUType
  **/
  @Schema(required = true, description = "The type of address object present")
  public AddressUTypeEnum getAddressUType() {
    return addressUType;
  }
  public void setAddressUType(AddressUTypeEnum addressUType) {
    this.addressUType = addressUType;
  }
  public PhysicalAddressWithPurpose simple(SimpleAddress simple) {
    this.simple = simple;
    return this;
  }

  

  /**
  * Get simple
  * @return simple
  **/
  @Schema(description = "")
  public SimpleAddress getSimple() {
    return simple;
  }
  public void setSimple(SimpleAddress simple) {
    this.simple = simple;
  }
  public PhysicalAddressWithPurpose paf(PAFAddress paf) {
    this.paf = paf;
    return this;
  }

  

  /**
  * Get paf
  * @return paf
  **/
  @Schema(description = "")
  public PAFAddress getPaf() {
    return paf;
  }
  public void setPaf(PAFAddress paf) {
    this.paf = paf;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhysicalAddressWithPurpose physicalAddressWithPurpose = (PhysicalAddressWithPurpose) o;
    return Objects.equals(this.addressUType, physicalAddressWithPurpose.addressUType) &&
        Objects.equals(this.simple, physicalAddressWithPurpose.simple) &&
        Objects.equals(this.paf, physicalAddressWithPurpose.paf);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(addressUType, simple, paf);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhysicalAddressWithPurpose {\n");
    
    sb.append("    addressUType: ").append(toIndentedString(addressUType)).append("\n");
    sb.append("    simple: ").append(toIndentedString(simple)).append("\n");
    sb.append("    paf: ").append(toIndentedString(paf)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
