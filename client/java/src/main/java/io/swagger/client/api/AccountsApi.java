/*
 * Consumer Data Standards
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorList;
import io.swagger.client.model.RequestAccountIds;
import io.swagger.client.model.ResponseBankingAccount;
import io.swagger.client.model.ResponseBankingAccounts;
import io.swagger.client.model.ResponseBankingAccountsBalances;
import io.swagger.client.model.ResponseBankingTransactionDetail;
import io.swagger.client.model.ResponseBankingTransactions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient apiClient;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAccountDetail
     * @param accountId A tokenised identifier for the account which is unique but not shareable (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountDetailCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/banking/accounts/{accountId}"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountDetailValidateBeforeCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountDetail(Async)");
        }
        
        com.squareup.okhttp.Call call = getAccountDetailCall(accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Account Detail
     * Obtain detailed information on a single account
     * @param accountId A tokenised identifier for the account which is unique but not shareable (required)
     * @return ResponseBankingAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseBankingAccount getAccountDetail(String accountId) throws ApiException {
        ApiResponse<ResponseBankingAccount> resp = getAccountDetailWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Get Account Detail
     * Obtain detailed information on a single account
     * @param accountId A tokenised identifier for the account which is unique but not shareable (required)
     * @return ApiResponse&lt;ResponseBankingAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseBankingAccount> getAccountDetailWithHttpInfo(String accountId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountDetailValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<ResponseBankingAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Account Detail (asynchronously)
     * Obtain detailed information on a single account
     * @param accountId A tokenised identifier for the account which is unique but not shareable (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountDetailAsync(String accountId, final ApiCallback<ResponseBankingAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountDetailValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseBankingAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionDetail
     * @param accountId The account id token that is used to uniquely represent the account (required)
     * @param transactionId The unique identifier for the specific transaction for which details are being requested (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionDetailCall(String accountId, String transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/banking/accounts/{accountId}/transactions/{transactionId}"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "transactionId" + "\\}", apiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionDetailValidateBeforeCall(String accountId, String transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getTransactionDetail(Async)");
        }
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getTransactionDetail(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransactionDetailCall(accountId, transactionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Transaction Detail
     * Obtain detailed information on a transaction for a specific account
     * @param accountId The account id token that is used to uniquely represent the account (required)
     * @param transactionId The unique identifier for the specific transaction for which details are being requested (required)
     * @return ResponseBankingTransactionDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseBankingTransactionDetail getTransactionDetail(String accountId, String transactionId) throws ApiException {
        ApiResponse<ResponseBankingTransactionDetail> resp = getTransactionDetailWithHttpInfo(accountId, transactionId);
        return resp.getData();
    }

    /**
     * Get Transaction Detail
     * Obtain detailed information on a transaction for a specific account
     * @param accountId The account id token that is used to uniquely represent the account (required)
     * @param transactionId The unique identifier for the specific transaction for which details are being requested (required)
     * @return ApiResponse&lt;ResponseBankingTransactionDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseBankingTransactionDetail> getTransactionDetailWithHttpInfo(String accountId, String transactionId) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionDetailValidateBeforeCall(accountId, transactionId, null, null);
        Type localVarReturnType = new TypeToken<ResponseBankingTransactionDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Transaction Detail (asynchronously)
     * Obtain detailed information on a transaction for a specific account
     * @param accountId The account id token that is used to uniquely represent the account (required)
     * @param transactionId The unique identifier for the specific transaction for which details are being requested (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionDetailAsync(String accountId, String transactionId, final ApiCallback<ResponseBankingTransactionDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionDetailValidateBeforeCall(accountId, transactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseBankingTransactionDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactions
     * @param accountId ID of the account to get transactions for.  Must have previously been returned by one of the account list end points. (required)
     * @param startTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)
     * @param endTime Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)
     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsCall(String accountId, String startTime, String endTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/banking/accounts/{accountId}/transactions"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start-time", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end-time", endTime));
        if (minAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min-amount", minAmount));
        if (maxAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max-amount", maxAmount));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page-size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsValidateBeforeCall(String accountId, String startTime, String endTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getTransactions(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransactionsCall(accountId, startTime, endTime, minAmount, maxAmount, text, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Transactions For Account
     * Obtain transactions for a specific account
     * @param accountId ID of the account to get transactions for.  Must have previously been returned by one of the account list end points. (required)
     * @param startTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)
     * @param endTime Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)
     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @return ResponseBankingTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseBankingTransactions getTransactions(String accountId, String startTime, String endTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<ResponseBankingTransactions> resp = getTransactionsWithHttpInfo(accountId, startTime, endTime, minAmount, maxAmount, text, page, pageSize);
        return resp.getData();
    }

    /**
     * Get Transactions For Account
     * Obtain transactions for a specific account
     * @param accountId ID of the account to get transactions for.  Must have previously been returned by one of the account list end points. (required)
     * @param startTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)
     * @param endTime Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)
     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @return ApiResponse&lt;ResponseBankingTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseBankingTransactions> getTransactionsWithHttpInfo(String accountId, String startTime, String endTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsValidateBeforeCall(accountId, startTime, endTime, minAmount, maxAmount, text, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<ResponseBankingTransactions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Transactions For Account (asynchronously)
     * Obtain transactions for a specific account
     * @param accountId ID of the account to get transactions for.  Must have previously been returned by one of the account list end points. (required)
     * @param startTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)
     * @param endTime Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)
     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsAsync(String accountId, String startTime, String endTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize, final ApiCallback<ResponseBankingTransactions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsValidateBeforeCall(accountId, startTime, endTime, minAmount, maxAmount, text, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseBankingTransactions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAccounts
     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAccountsCall(String openStatus, String isOwned, String productCategory, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/banking/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (openStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("open-status", openStatus));
        if (isOwned != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is-owned", isOwned));
        if (productCategory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("product-category", productCategory));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page-size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAccountsValidateBeforeCall(String openStatus, String isOwned, String productCategory, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listAccountsCall(openStatus, isOwned, productCategory, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Accounts
     * Obtain a list of accounts
     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @return ResponseBankingAccounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseBankingAccounts listAccounts(String openStatus, String isOwned, String productCategory, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<ResponseBankingAccounts> resp = listAccountsWithHttpInfo(openStatus, isOwned, productCategory, page, pageSize);
        return resp.getData();
    }

    /**
     * Get Accounts
     * Obtain a list of accounts
     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @return ApiResponse&lt;ResponseBankingAccounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseBankingAccounts> listAccountsWithHttpInfo(String openStatus, String isOwned, String productCategory, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = listAccountsValidateBeforeCall(openStatus, isOwned, productCategory, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<ResponseBankingAccounts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Accounts (asynchronously)
     * Obtain a list of accounts
     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAccountsAsync(String openStatus, String isOwned, String productCategory, Integer page, Integer pageSize, final ApiCallback<ResponseBankingAccounts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAccountsValidateBeforeCall(openStatus, isOwned, productCategory, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseBankingAccounts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listBalancesBulk
     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBalancesBulkCall(String openStatus, String isOwned, String productCategory, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/banking/accounts/balances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (openStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("open-status", openStatus));
        if (isOwned != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is-owned", isOwned));
        if (productCategory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("product-category", productCategory));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page-size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBalancesBulkValidateBeforeCall(String openStatus, String isOwned, String productCategory, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listBalancesBulkCall(openStatus, isOwned, productCategory, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Bulk Balances
     * Obtain balances for multiple, filtered accounts
     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @return ResponseBankingAccountsBalances
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseBankingAccountsBalances listBalancesBulk(String openStatus, String isOwned, String productCategory, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<ResponseBankingAccountsBalances> resp = listBalancesBulkWithHttpInfo(openStatus, isOwned, productCategory, page, pageSize);
        return resp.getData();
    }

    /**
     * Get Bulk Balances
     * Obtain balances for multiple, filtered accounts
     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @return ApiResponse&lt;ResponseBankingAccountsBalances&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseBankingAccountsBalances> listBalancesBulkWithHttpInfo(String openStatus, String isOwned, String productCategory, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = listBalancesBulkValidateBeforeCall(openStatus, isOwned, productCategory, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<ResponseBankingAccountsBalances>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Bulk Balances (asynchronously)
     * Obtain balances for multiple, filtered accounts
     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBalancesBulkAsync(String openStatus, String isOwned, String productCategory, Integer page, Integer pageSize, final ApiCallback<ResponseBankingAccountsBalances> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBalancesBulkValidateBeforeCall(openStatus, isOwned, productCategory, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseBankingAccountsBalances>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listBalancesSpecificAccounts
     * @param body The list of account IDs to obtain information for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBalancesSpecificAccountsCall(RequestAccountIds body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/banking/accounts/balances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBalancesSpecificAccountsValidateBeforeCall(RequestAccountIds body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listBalancesSpecificAccounts(Async)");
        }
        
        com.squareup.okhttp.Call call = listBalancesSpecificAccountsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Balances For Specific Accounts
     * Obtain balances for a specified list of accounts
     * @param body The list of account IDs to obtain information for (required)
     * @return ResponseBankingAccountsBalances
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseBankingAccountsBalances listBalancesSpecificAccounts(RequestAccountIds body) throws ApiException {
        ApiResponse<ResponseBankingAccountsBalances> resp = listBalancesSpecificAccountsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Get Balances For Specific Accounts
     * Obtain balances for a specified list of accounts
     * @param body The list of account IDs to obtain information for (required)
     * @return ApiResponse&lt;ResponseBankingAccountsBalances&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseBankingAccountsBalances> listBalancesSpecificAccountsWithHttpInfo(RequestAccountIds body) throws ApiException {
        com.squareup.okhttp.Call call = listBalancesSpecificAccountsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ResponseBankingAccountsBalances>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Balances For Specific Accounts (asynchronously)
     * Obtain balances for a specified list of accounts
     * @param body The list of account IDs to obtain information for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBalancesSpecificAccountsAsync(RequestAccountIds body, final ApiCallback<ResponseBankingAccountsBalances> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBalancesSpecificAccountsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseBankingAccountsBalances>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTransactionsBulk
     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param startTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)
     * @param endTime Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)
     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTransactionsBulkCall(String openStatus, String isOwned, String productCategory, String startTime, String endTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/banking/accounts/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (openStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("open-status", openStatus));
        if (isOwned != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is-owned", isOwned));
        if (productCategory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("product-category", productCategory));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start-time", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end-time", endTime));
        if (minAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min-amount", minAmount));
        if (maxAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max-amount", maxAmount));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page-size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTransactionsBulkValidateBeforeCall(String openStatus, String isOwned, String productCategory, String startTime, String endTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listTransactionsBulkCall(openStatus, isOwned, productCategory, startTime, endTime, minAmount, maxAmount, text, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Transactions For Multiple Accounts
     * Obtain transactions for multiple, filtered accounts
     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param startTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)
     * @param endTime Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)
     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @return ResponseBankingTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseBankingTransactions listTransactionsBulk(String openStatus, String isOwned, String productCategory, String startTime, String endTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<ResponseBankingTransactions> resp = listTransactionsBulkWithHttpInfo(openStatus, isOwned, productCategory, startTime, endTime, minAmount, maxAmount, text, page, pageSize);
        return resp.getData();
    }

    /**
     * Get Transactions For Multiple Accounts
     * Obtain transactions for multiple, filtered accounts
     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param startTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)
     * @param endTime Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)
     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @return ApiResponse&lt;ResponseBankingTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseBankingTransactions> listTransactionsBulkWithHttpInfo(String openStatus, String isOwned, String productCategory, String startTime, String endTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = listTransactionsBulkValidateBeforeCall(openStatus, isOwned, productCategory, startTime, endTime, minAmount, maxAmount, text, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<ResponseBankingTransactions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Transactions For Multiple Accounts (asynchronously)
     * Obtain transactions for multiple, filtered accounts
     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional)
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param startTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)
     * @param endTime Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)
     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransactionsBulkAsync(String openStatus, String isOwned, String productCategory, String startTime, String endTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize, final ApiCallback<ResponseBankingTransactions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransactionsBulkValidateBeforeCall(openStatus, isOwned, productCategory, startTime, endTime, minAmount, maxAmount, text, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseBankingTransactions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTransactionsSpecificAccounts
     * @param body The list of account IDs to obtain information for (required)
     * @param startTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)
     * @param endTime Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)
     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTransactionsSpecificAccountsCall(RequestAccountIds body, String startTime, String endTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/banking/accounts/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start-time", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end-time", endTime));
        if (minAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min-amount", minAmount));
        if (maxAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max-amount", maxAmount));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page-size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTransactionsSpecificAccountsValidateBeforeCall(RequestAccountIds body, String startTime, String endTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listTransactionsSpecificAccounts(Async)");
        }
        
        com.squareup.okhttp.Call call = listTransactionsSpecificAccountsCall(body, startTime, endTime, minAmount, maxAmount, text, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Transactions For Specific Accounts
     * Obtain transactions for a specified list of transactions.
     * @param body The list of account IDs to obtain information for (required)
     * @param startTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)
     * @param endTime Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)
     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @return ResponseBankingTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseBankingTransactions listTransactionsSpecificAccounts(RequestAccountIds body, String startTime, String endTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<ResponseBankingTransactions> resp = listTransactionsSpecificAccountsWithHttpInfo(body, startTime, endTime, minAmount, maxAmount, text, page, pageSize);
        return resp.getData();
    }

    /**
     * Get Transactions For Specific Accounts
     * Obtain transactions for a specified list of transactions.
     * @param body The list of account IDs to obtain information for (required)
     * @param startTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)
     * @param endTime Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)
     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @return ApiResponse&lt;ResponseBankingTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseBankingTransactions> listTransactionsSpecificAccountsWithHttpInfo(RequestAccountIds body, String startTime, String endTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = listTransactionsSpecificAccountsValidateBeforeCall(body, startTime, endTime, minAmount, maxAmount, text, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<ResponseBankingTransactions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Transactions For Specific Accounts (asynchronously)
     * Obtain transactions for a specified list of transactions.
     * @param body The list of account IDs to obtain information for (required)
     * @param startTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type (optional)
     * @param endTime Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type (optional)
     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransactionsSpecificAccountsAsync(RequestAccountIds body, String startTime, String endTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize, final ApiCallback<ResponseBankingTransactions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransactionsSpecificAccountsValidateBeforeCall(body, startTime, endTime, minAmount, maxAmount, text, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseBankingTransactions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
