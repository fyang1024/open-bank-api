/*
 * Consumer Data Standards
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorList;
import io.swagger.client.model.RequestAccountIds;
import io.swagger.client.model.ResponseBankingDirectDebits;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DirectDebitsApi {
    private ApiClient apiClient;

    public DirectDebitsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DirectDebitsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for listDirectDebits
     * @param accountId ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points. (required)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDirectDebitsCall(String accountId, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/banking/accounts/{accountId}/direct-debits"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page-size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDirectDebitsValidateBeforeCall(String accountId, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listDirectDebits(Async)");
        }
        
        com.squareup.okhttp.Call call = listDirectDebitsCall(accountId, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Direct Debits For Account
     * Obtain direct debit authorisations for a specific account
     * @param accountId ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points. (required)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @return ResponseBankingDirectDebits
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseBankingDirectDebits listDirectDebits(String accountId, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<ResponseBankingDirectDebits> resp = listDirectDebitsWithHttpInfo(accountId, page, pageSize);
        return resp.getData();
    }

    /**
     * Get Direct Debits For Account
     * Obtain direct debit authorisations for a specific account
     * @param accountId ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points. (required)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @return ApiResponse&lt;ResponseBankingDirectDebits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseBankingDirectDebits> listDirectDebitsWithHttpInfo(String accountId, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = listDirectDebitsValidateBeforeCall(accountId, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<ResponseBankingDirectDebits>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Direct Debits For Account (asynchronously)
     * Obtain direct debit authorisations for a specific account
     * @param accountId ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points. (required)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDirectDebitsAsync(String accountId, Integer page, Integer pageSize, final ApiCallback<ResponseBankingDirectDebits> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDirectDebitsValidateBeforeCall(accountId, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseBankingDirectDebits>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDirectDebitsBulk
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDirectDebitsBulkCall(String isOwned, String productCategory, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/banking/accounts/direct-debits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isOwned != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is-owned", isOwned));
        if (productCategory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("product-category", productCategory));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page-size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDirectDebitsBulkValidateBeforeCall(String isOwned, String productCategory, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listDirectDebitsBulkCall(isOwned, productCategory, page, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Bulk Direct Debits
     * Obtain direct debit authorisations for multiple, filtered accounts
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @return ResponseBankingDirectDebits
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseBankingDirectDebits listDirectDebitsBulk(String isOwned, String productCategory, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<ResponseBankingDirectDebits> resp = listDirectDebitsBulkWithHttpInfo(isOwned, productCategory, page, pageSize);
        return resp.getData();
    }

    /**
     * Get Bulk Direct Debits
     * Obtain direct debit authorisations for multiple, filtered accounts
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @return ApiResponse&lt;ResponseBankingDirectDebits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseBankingDirectDebits> listDirectDebitsBulkWithHttpInfo(String isOwned, String productCategory, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = listDirectDebitsBulkValidateBeforeCall(isOwned, productCategory, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<ResponseBankingDirectDebits>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Bulk Direct Debits (asynchronously)
     * Obtain direct debit authorisations for multiple, filtered accounts
     * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
     * @param page Page of results to request (standard pagination) (optional)
     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDirectDebitsBulkAsync(String isOwned, String productCategory, Integer page, Integer pageSize, final ApiCallback<ResponseBankingDirectDebits> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDirectDebitsBulkValidateBeforeCall(isOwned, productCategory, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseBankingDirectDebits>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDirectDebitsSpecificAccounts
     * @param body The list of account IDs to obtain information for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDirectDebitsSpecificAccountsCall(RequestAccountIds body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/banking/accounts/direct-debits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDirectDebitsSpecificAccountsValidateBeforeCall(RequestAccountIds body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listDirectDebitsSpecificAccounts(Async)");
        }
        
        com.squareup.okhttp.Call call = listDirectDebitsSpecificAccountsCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Direct Debits For Specific Accounts
     * Obtain direct debit authorisations for a specified list of accounts
     * @param body The list of account IDs to obtain information for (required)
     * @return ResponseBankingDirectDebits
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseBankingDirectDebits listDirectDebitsSpecificAccounts(RequestAccountIds body) throws ApiException {
        ApiResponse<ResponseBankingDirectDebits> resp = listDirectDebitsSpecificAccountsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Get Direct Debits For Specific Accounts
     * Obtain direct debit authorisations for a specified list of accounts
     * @param body The list of account IDs to obtain information for (required)
     * @return ApiResponse&lt;ResponseBankingDirectDebits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseBankingDirectDebits> listDirectDebitsSpecificAccountsWithHttpInfo(RequestAccountIds body) throws ApiException {
        com.squareup.okhttp.Call call = listDirectDebitsSpecificAccountsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ResponseBankingDirectDebits>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Direct Debits For Specific Accounts (asynchronously)
     * Obtain direct debit authorisations for a specified list of accounts
     * @param body The list of account IDs to obtain information for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDirectDebitsSpecificAccountsAsync(RequestAccountIds body, final ApiCallback<ResponseBankingDirectDebits> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDirectDebitsSpecificAccountsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseBankingDirectDebits>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
