/*
 * Consumer Data Standards
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ErrorList;
import io.swagger.client.model.RequestAccountIds;
import io.swagger.client.model.ResponseBankingAccount;
import io.swagger.client.model.ResponseBankingAccounts;
import io.swagger.client.model.ResponseBankingAccountsBalances;
import io.swagger.client.model.ResponseBankingTransactionDetail;
import io.swagger.client.model.ResponseBankingTransactions;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Ignore
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Get Account Detail
     *
     * Obtain detailed information on a single account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountDetailTest() throws ApiException {
        String accountId = null;
        ResponseBankingAccount response = api.getAccountDetail(accountId);

        // TODO: test validations
    }
    /**
     * Get Transaction Detail
     *
     * Obtain detailed information on a transaction for a specific account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionDetailTest() throws ApiException {
        String accountId = null;
        String transactionId = null;
        ResponseBankingTransactionDetail response = api.getTransactionDetail(accountId, transactionId);

        // TODO: test validations
    }
    /**
     * Get Transactions For Account
     *
     * Obtain transactions for a specific account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsTest() throws ApiException {
        String accountId = null;
        String startTime = null;
        String endTime = null;
        String minAmount = null;
        String maxAmount = null;
        String text = null;
        Integer page = null;
        Integer pageSize = null;
        ResponseBankingTransactions response = api.getTransactions(accountId, startTime, endTime, minAmount, maxAmount, text, page, pageSize);

        // TODO: test validations
    }
    /**
     * Get Accounts
     *
     * Obtain a list of accounts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAccountsTest() throws ApiException {
        String openStatus = null;
        String isOwned = null;
        String productCategory = null;
        Integer page = null;
        Integer pageSize = null;
        ResponseBankingAccounts response = api.listAccounts(openStatus, isOwned, productCategory, page, pageSize);

        // TODO: test validations
    }
    /**
     * Get Bulk Balances
     *
     * Obtain balances for multiple, filtered accounts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBalancesBulkTest() throws ApiException {
        String openStatus = null;
        String isOwned = null;
        String productCategory = null;
        Integer page = null;
        Integer pageSize = null;
        ResponseBankingAccountsBalances response = api.listBalancesBulk(openStatus, isOwned, productCategory, page, pageSize);

        // TODO: test validations
    }
    /**
     * Get Balances For Specific Accounts
     *
     * Obtain balances for a specified list of accounts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBalancesSpecificAccountsTest() throws ApiException {
        RequestAccountIds body = null;
        ResponseBankingAccountsBalances response = api.listBalancesSpecificAccounts(body);

        // TODO: test validations
    }
    /**
     * Get Transactions For Multiple Accounts
     *
     * Obtain transactions for multiple, filtered accounts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTransactionsBulkTest() throws ApiException {
        String openStatus = null;
        String isOwned = null;
        String productCategory = null;
        String startTime = null;
        String endTime = null;
        String minAmount = null;
        String maxAmount = null;
        String text = null;
        Integer page = null;
        Integer pageSize = null;
        ResponseBankingTransactions response = api.listTransactionsBulk(openStatus, isOwned, productCategory, startTime, endTime, minAmount, maxAmount, text, page, pageSize);

        // TODO: test validations
    }
    /**
     * Get Transactions For Specific Accounts
     *
     * Obtain transactions for a specified list of transactions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTransactionsSpecificAccountsTest() throws ApiException {
        RequestAccountIds body = null;
        String startTime = null;
        String endTime = null;
        String minAmount = null;
        String maxAmount = null;
        String text = null;
        Integer page = null;
        Integer pageSize = null;
        ResponseBankingTransactions response = api.listTransactionsSpecificAccounts(body, startTime, endTime, minAmount, maxAmount, text, page, pageSize);

        // TODO: test validations
    }
}
