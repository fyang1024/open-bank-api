/**
 * Consumer Data Standards
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

export interface Transaction { 
    /**
     * A unique ID of the account adhering to the standards for ID permanence
     */
    accountId: string;
    /**
     * A unique ID of the transaction adhering to the standards for ID permanence. This is mandatory (through hashing if necessary) unless there are specific and justifiable technical reasons why a transaction cannot be uniquely identified for a particular account type
     */
    transactionId?: string;
    /**
     * True if extended information is available using the transaction detail end point. False if extended data is not available
     */
    isDetailAvailable: boolean;
    /**
     * The type of the transaction
     */
    type: Transaction.TypeEnum;
    /**
     * Status of the transaction whether pending or posted.  Note that there is currently no provision in the standards to gaurantee the ability to correlate a pending transaction with an associated posted transaction
     */
    status: Transaction.StatusEnum;
    /**
     * The transaction description as applied by the financial institution
     */
    description: string;
    /**
     * The time the transaction was posted. This field is mandatory if the transaction has status POSTED. This is the time that appears on a standard statement
     */
    postingDateTime?: string;
    /**
     * Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry
     */
    valueDateTime?: string;
    /**
     * The time the transaction was executed by the originating customer, if available
     */
    executionDateTime?: string;
    /**
     * The value of the transaction. Negative values mean money was outgoing from the account
     */
    amount?: string;
    /**
     * The currency for the transaction amount. AUD assumed if not present
     */
    currency?: string;
    /**
     * The reference for the transaction provided by the originating institution.  Empty string if no data provided
     */
    reference: string;
    /**
     * Name of the merchant for an outgoing payment to a merchant
     */
    merchantName?: string;
    /**
     * The merchant category code (or MCC) for an outgoing payment to a merchant
     */
    merchantCategoryCode?: string;
    /**
     * BPay Biller Code for the transaction (if available)
     */
    billerCode?: string;
    /**
     * Name of the BPay biller for the transaction (if available)
     */
    billerName?: string;
    /**
     * BPay CRN for the transaction (if available)
     */
    crn?: string;
    /**
     * 6 Digit APCA number for the initiating institution
     */
    apcaNumber?: string;
}
export namespace Transaction {
    export type TypeEnum = 'FEE' | 'INTEREST_CHARGED' | 'INTEREST_PAID' | 'TRANSFER_OUTGOING' | 'TRANSFER_INCOMING' | 'PAYMENT' | 'OTHER';
    export const TypeEnum = {
        FEE: 'FEE' as TypeEnum,
        INTERESTCHARGED: 'INTEREST_CHARGED' as TypeEnum,
        INTERESTPAID: 'INTEREST_PAID' as TypeEnum,
        TRANSFEROUTGOING: 'TRANSFER_OUTGOING' as TypeEnum,
        TRANSFERINCOMING: 'TRANSFER_INCOMING' as TypeEnum,
        PAYMENT: 'PAYMENT' as TypeEnum,
        OTHER: 'OTHER' as TypeEnum
    };
    export type StatusEnum = 'PENDING' | 'POSTED';
    export const StatusEnum = {
        PENDING: 'PENDING' as StatusEnum,
        POSTED: 'POSTED' as StatusEnum
    };
}