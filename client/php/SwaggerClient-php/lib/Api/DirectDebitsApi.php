<?php
/**
 * DirectDebitsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Consumer Data Standards
 *
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
* OpenAPI spec version: 1-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DirectDebitsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DirectDebitsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }
    /**
     * Operation listDirectDebits
*
     * Get Direct Debits For Account
*
* @param  string $account_id ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points. (required)
* @param  int $page Page of results to request (standard pagination) (optional)
* @param  int $page_size Page size to request. Default is 25 (standard pagination) (optional)
*
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseBankingDirectDebits
     */
    public function listDirectDebits($account_id, $page = null, $page_size = null)
    {
        list($response) = $this->listDirectDebitsWithHttpInfo($account_id, $page, $page_size);
        return $response;
    }

    /**
     * Operation listDirectDebitsWithHttpInfo
*
     * Get Direct Debits For Account
*
* @param  string $account_id ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points. (required)
* @param  int $page Page of results to request (standard pagination) (optional)
* @param  int $page_size Page size to request. Default is 25 (standard pagination) (optional)
*
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseBankingDirectDebits, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDirectDebitsWithHttpInfo($account_id, $page = null, $page_size = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseBankingDirectDebits';
        $request = $this->listDirectDebitsRequest($account_id, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Swagger\Client\Model\ResponseBankingDirectDebits',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation listDirectDebitsAsync
     *
     * Get Direct Debits For Account
     *
* @param  string $account_id ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points. (required)
* @param  int $page Page of results to request (standard pagination) (optional)
* @param  int $page_size Page size to request. Default is 25 (standard pagination) (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDirectDebitsAsync($account_id, $page = null, $page_size = null)
    {
        return $this->listDirectDebitsAsyncWithHttpInfo($account_id, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDirectDebitsAsyncWithHttpInfo
     *
     * Get Direct Debits For Account
     *
* @param  string $account_id ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points. (required)
* @param  int $page Page of results to request (standard pagination) (optional)
* @param  int $page_size Page size to request. Default is 25 (standard pagination) (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDirectDebitsAsyncWithHttpInfo($account_id, $page = null, $page_size = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseBankingDirectDebits';
        $request = $this->listDirectDebitsRequest($account_id, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDirectDebits'
     *
* @param  string $account_id ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points. (required)
* @param  int $page Page of results to request (standard pagination) (optional)
* @param  int $page_size Page size to request. Default is 25 (standard pagination) (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDirectDebitsRequest($account_id, $page = null, $page_size = null)
    {
// verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling listDirectDebits'
            );
        }
$resourcePath = '/banking/accounts/{accountId}/direct-debits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
// query params
if ($page_size !== null) {
            $queryParams['page-size'] = ObjectSerializer::toQueryValue($page_size);
        }
// path params
if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDirectDebitsBulk
*
     * Get Bulk Direct Debits
*
* @param  string $is_owned Filters accounts based on whether they are owned by the authorised customer (optional)
* @param  string $product_category Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
* @param  int $page Page of results to request (standard pagination) (optional)
* @param  int $page_size Page size to request. Default is 25 (standard pagination) (optional)
*
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseBankingDirectDebits
     */
    public function listDirectDebitsBulk($is_owned = null, $product_category = null, $page = null, $page_size = null)
    {
        list($response) = $this->listDirectDebitsBulkWithHttpInfo($is_owned, $product_category, $page, $page_size);
        return $response;
    }

    /**
     * Operation listDirectDebitsBulkWithHttpInfo
*
     * Get Bulk Direct Debits
*
* @param  string $is_owned Filters accounts based on whether they are owned by the authorised customer (optional)
* @param  string $product_category Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
* @param  int $page Page of results to request (standard pagination) (optional)
* @param  int $page_size Page size to request. Default is 25 (standard pagination) (optional)
*
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseBankingDirectDebits, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDirectDebitsBulkWithHttpInfo($is_owned = null, $product_category = null, $page = null, $page_size = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseBankingDirectDebits';
        $request = $this->listDirectDebitsBulkRequest($is_owned, $product_category, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Swagger\Client\Model\ResponseBankingDirectDebits',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation listDirectDebitsBulkAsync
     *
     * Get Bulk Direct Debits
     *
* @param  string $is_owned Filters accounts based on whether they are owned by the authorised customer (optional)
* @param  string $product_category Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
* @param  int $page Page of results to request (standard pagination) (optional)
* @param  int $page_size Page size to request. Default is 25 (standard pagination) (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDirectDebitsBulkAsync($is_owned = null, $product_category = null, $page = null, $page_size = null)
    {
        return $this->listDirectDebitsBulkAsyncWithHttpInfo($is_owned, $product_category, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDirectDebitsBulkAsyncWithHttpInfo
     *
     * Get Bulk Direct Debits
     *
* @param  string $is_owned Filters accounts based on whether they are owned by the authorised customer (optional)
* @param  string $product_category Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
* @param  int $page Page of results to request (standard pagination) (optional)
* @param  int $page_size Page size to request. Default is 25 (standard pagination) (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDirectDebitsBulkAsyncWithHttpInfo($is_owned = null, $product_category = null, $page = null, $page_size = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseBankingDirectDebits';
        $request = $this->listDirectDebitsBulkRequest($is_owned, $product_category, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDirectDebitsBulk'
     *
* @param  string $is_owned Filters accounts based on whether they are owned by the authorised customer (optional)
* @param  string $product_category Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
* @param  int $page Page of results to request (standard pagination) (optional)
* @param  int $page_size Page size to request. Default is 25 (standard pagination) (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDirectDebitsBulkRequest($is_owned = null, $product_category = null, $page = null, $page_size = null)
    {
$resourcePath = '/banking/accounts/direct-debits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($is_owned !== null) {
            $queryParams['is-owned'] = ObjectSerializer::toQueryValue($is_owned);
        }
// query params
if ($product_category !== null) {
            $queryParams['product-category'] = ObjectSerializer::toQueryValue($product_category);
        }
// query params
if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
// query params
if ($page_size !== null) {
            $queryParams['page-size'] = ObjectSerializer::toQueryValue($page_size);
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDirectDebitsSpecificAccounts
*
     * Get Direct Debits For Specific Accounts
*
* @param  \Swagger\Client\Model\RequestAccountIds $body The list of account IDs to obtain information for (required)
*
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseBankingDirectDebits
     */
    public function listDirectDebitsSpecificAccounts($body)
    {
        list($response) = $this->listDirectDebitsSpecificAccountsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listDirectDebitsSpecificAccountsWithHttpInfo
*
     * Get Direct Debits For Specific Accounts
*
* @param  \Swagger\Client\Model\RequestAccountIds $body The list of account IDs to obtain information for (required)
*
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseBankingDirectDebits, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDirectDebitsSpecificAccountsWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ResponseBankingDirectDebits';
        $request = $this->listDirectDebitsSpecificAccountsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Swagger\Client\Model\ResponseBankingDirectDebits',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 422:$data = ObjectSerializer::deserialize(
                        $content,
                        '\Swagger\Client\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation listDirectDebitsSpecificAccountsAsync
     *
     * Get Direct Debits For Specific Accounts
     *
* @param  \Swagger\Client\Model\RequestAccountIds $body The list of account IDs to obtain information for (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDirectDebitsSpecificAccountsAsync($body)
    {
        return $this->listDirectDebitsSpecificAccountsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDirectDebitsSpecificAccountsAsyncWithHttpInfo
     *
     * Get Direct Debits For Specific Accounts
     *
* @param  \Swagger\Client\Model\RequestAccountIds $body The list of account IDs to obtain information for (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDirectDebitsSpecificAccountsAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ResponseBankingDirectDebits';
        $request = $this->listDirectDebitsSpecificAccountsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDirectDebitsSpecificAccounts'
     *
* @param  \Swagger\Client\Model\RequestAccountIds $body The list of account IDs to obtain information for (required)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDirectDebitsSpecificAccountsRequest($body)
    {
// verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling listDirectDebitsSpecificAccounts'
            );
        }
$resourcePath = '/banking/accounts/direct-debits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// body params
        $_tempBody = null;
if (isset($body)) {
            $_tempBody = $body;
        }
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

/**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
