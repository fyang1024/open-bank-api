<?php
/**
 * PayeeDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Consumer Data Standards
 *
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
* OpenAPI spec version: 1-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * PayeeDetail Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayeeDetail extends Payee 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayeeDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payee_u_type' => 'string',
'domestic' => '\Swagger\Client\Model\DomesticPayee',
'biller' => '\Swagger\Client\Model\BillerPayee',
'international' => '\Swagger\Client\Model\InternationalPayee'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payee_u_type' => null,
'domestic' => null,
'biller' => null,
'international' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payee_u_type' => 'payeeUType',
'domestic' => 'domestic',
'biller' => 'biller',
'international' => 'international'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payee_u_type' => 'setPayeeUType',
'domestic' => 'setDomestic',
'biller' => 'setBiller',
'international' => 'setInternational'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payee_u_type' => 'getPayeeUType',
'domestic' => 'getDomestic',
'biller' => 'getBiller',
'international' => 'getInternational'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYEE_U_TYPE_DOMESTIC = 'domestic';
const PAYEE_U_TYPE_BILLER = 'biller';
const PAYEE_U_TYPE_INTERNATIONAL = 'international';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayeeUTypeAllowableValues()
    {
        return [
            self::PAYEE_U_TYPE_DOMESTIC,
self::PAYEE_U_TYPE_BILLER,
self::PAYEE_U_TYPE_INTERNATIONAL,        ];
    }


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['payee_u_type'] = isset($data['payee_u_type']) ? $data['payee_u_type'] : null;
        $this->container['domestic'] = isset($data['domestic']) ? $data['domestic'] : null;
        $this->container['biller'] = isset($data['biller']) ? $data['biller'] : null;
        $this->container['international'] = isset($data['international']) ? $data['international'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['payee_u_type'] === null) {
            $invalidProperties[] = "'payee_u_type' can't be null";
        }
        $allowedValues = $this->getPayeeUTypeAllowableValues();
        if (!in_array($this->container['payee_u_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payee_u_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        if ($this->container['payee_u_type'] === null) {
            return false;
        }
        $allowedValues = $this->getPayeeUTypeAllowableValues();
        if (!in_array($this->container['payee_u_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets payee_u_type
     *
     * @return string
     */
    public function getPayeeUType()
    {
        return $this->container['payee_u_type'];
    }

    /**
     * Sets payee_u_type
     *
     * @param string $payee_u_type Type of object included that describes the payee in detail
     *
     * @return $this
     */
    public function setPayeeUType($payee_u_type)
    {
        $allowedValues = $this->getPayeeUTypeAllowableValues();
        if (!in_array($payee_u_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payee_u_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payee_u_type'] = $payee_u_type;

        return $this;
    }

    /**
     * Gets domestic
     *
     * @return \Swagger\Client\Model\DomesticPayee
     */
    public function getDomestic()
    {
        return $this->container['domestic'];
    }

    /**
     * Sets domestic
     *
     * @param \Swagger\Client\Model\DomesticPayee $domestic domestic
     *
     * @return $this
     */
    public function setDomestic($domestic)
    {
        $this->container['domestic'] = $domestic;

        return $this;
    }

    /**
     * Gets biller
     *
     * @return \Swagger\Client\Model\BillerPayee
     */
    public function getBiller()
    {
        return $this->container['biller'];
    }

    /**
     * Sets biller
     *
     * @param \Swagger\Client\Model\BillerPayee $biller biller
     *
     * @return $this
     */
    public function setBiller($biller)
    {
        $this->container['biller'] = $biller;

        return $this;
    }

    /**
     * Gets international
     *
     * @return \Swagger\Client\Model\InternationalPayee
     */
    public function getInternational()
    {
        return $this->container['international'];
    }

    /**
     * Sets international
     *
     * @param \Swagger\Client\Model\InternationalPayee $international international
     *
     * @return $this
     */
    public function setInternational($international)
    {
        $this->container['international'] = $international;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
