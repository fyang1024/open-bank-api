<?php
/**
 * DirectDebits
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Consumer Data Standards
 *
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
* OpenAPI spec version: 1-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DirectDebits Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DirectDebits implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DirectDebits';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
'authorised_entity' => '\Swagger\Client\Model\AuthorisedEntity',
'last_debit_date_time' => 'string',
'last_debit_amount' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'ASCIIString',
'authorised_entity' => null,
'last_debit_date_time' => 'DateTimeString',
'last_debit_amount' => 'AmountString'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
'authorised_entity' => 'authorisedEntity',
'last_debit_date_time' => 'lastDebitDateTime',
'last_debit_amount' => 'lastDebitAmount'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
'authorised_entity' => 'setAuthorisedEntity',
'last_debit_date_time' => 'setLastDebitDateTime',
'last_debit_amount' => 'setLastDebitAmount'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
'authorised_entity' => 'getAuthorisedEntity',
'last_debit_date_time' => 'getLastDebitDateTime',
'last_debit_amount' => 'getLastDebitAmount'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['authorised_entity'] = isset($data['authorised_entity']) ? $data['authorised_entity'] : null;
        $this->container['last_debit_date_time'] = isset($data['last_debit_date_time']) ? $data['last_debit_date_time'] : null;
        $this->container['last_debit_amount'] = isset($data['last_debit_amount']) ? $data['last_debit_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['account_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id A unique ID of the account adhering to the standards for ID permanence.
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets authorised_entity
     *
     * @return \Swagger\Client\Model\AuthorisedEntity
     */
    public function getAuthorisedEntity()
    {
        return $this->container['authorised_entity'];
    }

    /**
     * Sets authorised_entity
     *
     * @param \Swagger\Client\Model\AuthorisedEntity $authorised_entity authorised_entity
     *
     * @return $this
     */
    public function setAuthorisedEntity($authorised_entity)
    {
        $this->container['authorised_entity'] = $authorised_entity;

        return $this;
    }

    /**
     * Gets last_debit_date_time
     *
     * @return string
     */
    public function getLastDebitDateTime()
    {
        return $this->container['last_debit_date_time'];
    }

    /**
     * Sets last_debit_date_time
     *
     * @param string $last_debit_date_time The date and time of the last debit executed under this authorisation
     *
     * @return $this
     */
    public function setLastDebitDateTime($last_debit_date_time)
    {
        $this->container['last_debit_date_time'] = $last_debit_date_time;

        return $this;
    }

    /**
     * Gets last_debit_amount
     *
     * @return string
     */
    public function getLastDebitAmount()
    {
        return $this->container['last_debit_amount'];
    }

    /**
     * Sets last_debit_amount
     *
     * @param string $last_debit_amount The amount of the last debit executed under this authorisation
     *
     * @return $this
     */
    public function setLastDebitAmount($last_debit_amount)
    {
        $this->container['last_debit_amount'] = $last_debit_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
