<?php
/**
 * InternationalPayeeBankDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Consumer Data Standards
 *
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
* OpenAPI spec version: 1-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InternationalPayeeBankDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InternationalPayeeBankDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InternationalPayee_bankDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country' => 'string',
'account_number' => 'string',
'bank_address' => '\Swagger\Client\Model\InternationalPayeeBankDetailsBankAddress',
'beneficiary_bank_bic' => 'string',
'fed_wire_number' => 'string',
'sort_code' => 'string',
'chip_number' => 'string',
'routing_number' => 'string',
'legal_entity_identifier' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'country' => null,
'account_number' => null,
'bank_address' => null,
'beneficiary_bank_bic' => null,
'fed_wire_number' => null,
'sort_code' => null,
'chip_number' => null,
'routing_number' => null,
'legal_entity_identifier' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
'account_number' => 'accountNumber',
'bank_address' => 'bankAddress',
'beneficiary_bank_bic' => 'beneficiaryBankBIC',
'fed_wire_number' => 'fedWireNumber',
'sort_code' => 'sortCode',
'chip_number' => 'chipNumber',
'routing_number' => 'routingNumber',
'legal_entity_identifier' => 'legalEntityIdentifier'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
'account_number' => 'setAccountNumber',
'bank_address' => 'setBankAddress',
'beneficiary_bank_bic' => 'setBeneficiaryBankBic',
'fed_wire_number' => 'setFedWireNumber',
'sort_code' => 'setSortCode',
'chip_number' => 'setChipNumber',
'routing_number' => 'setRoutingNumber',
'legal_entity_identifier' => 'setLegalEntityIdentifier'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
'account_number' => 'getAccountNumber',
'bank_address' => 'getBankAddress',
'beneficiary_bank_bic' => 'getBeneficiaryBankBic',
'fed_wire_number' => 'getFedWireNumber',
'sort_code' => 'getSortCode',
'chip_number' => 'getChipNumber',
'routing_number' => 'getRoutingNumber',
'legal_entity_identifier' => 'getLegalEntityIdentifier'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['bank_address'] = isset($data['bank_address']) ? $data['bank_address'] : null;
        $this->container['beneficiary_bank_bic'] = isset($data['beneficiary_bank_bic']) ? $data['beneficiary_bank_bic'] : null;
        $this->container['fed_wire_number'] = isset($data['fed_wire_number']) ? $data['fed_wire_number'] : null;
        $this->container['sort_code'] = isset($data['sort_code']) ? $data['sort_code'] : null;
        $this->container['chip_number'] = isset($data['chip_number']) ? $data['chip_number'] : null;
        $this->container['routing_number'] = isset($data['routing_number']) ? $data['routing_number'] : null;
        $this->container['legal_entity_identifier'] = isset($data['legal_entity_identifier']) ? $data['legal_entity_identifier'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Country of the recipient institution. A valid ISO 3166 Alpha-3 country code
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number Account Targeted for payment
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets bank_address
     *
     * @return \Swagger\Client\Model\InternationalPayeeBankDetailsBankAddress
     */
    public function getBankAddress()
    {
        return $this->container['bank_address'];
    }

    /**
     * Sets bank_address
     *
     * @param \Swagger\Client\Model\InternationalPayeeBankDetailsBankAddress $bank_address bank_address
     *
     * @return $this
     */
    public function setBankAddress($bank_address)
    {
        $this->container['bank_address'] = $bank_address;

        return $this;
    }

    /**
     * Gets beneficiary_bank_bic
     *
     * @return string
     */
    public function getBeneficiaryBankBic()
    {
        return $this->container['beneficiary_bank_bic'];
    }

    /**
     * Sets beneficiary_bank_bic
     *
     * @param string $beneficiary_bank_bic Swift bank code.  Aligns with standard [ISO 9362](https://www.iso.org/standard/60390.html)
     *
     * @return $this
     */
    public function setBeneficiaryBankBic($beneficiary_bank_bic)
    {
        $this->container['beneficiary_bank_bic'] = $beneficiary_bank_bic;

        return $this;
    }

    /**
     * Gets fed_wire_number
     *
     * @return string
     */
    public function getFedWireNumber()
    {
        return $this->container['fed_wire_number'];
    }

    /**
     * Sets fed_wire_number
     *
     * @param string $fed_wire_number Number for Fedwire payment (Federal Reserve Wire Network)
     *
     * @return $this
     */
    public function setFedWireNumber($fed_wire_number)
    {
        $this->container['fed_wire_number'] = $fed_wire_number;

        return $this;
    }

    /**
     * Gets sort_code
     *
     * @return string
     */
    public function getSortCode()
    {
        return $this->container['sort_code'];
    }

    /**
     * Sets sort_code
     *
     * @param string $sort_code Sort code used for account identification in some jurisdictions
     *
     * @return $this
     */
    public function setSortCode($sort_code)
    {
        $this->container['sort_code'] = $sort_code;

        return $this;
    }

    /**
     * Gets chip_number
     *
     * @return string
     */
    public function getChipNumber()
    {
        return $this->container['chip_number'];
    }

    /**
     * Sets chip_number
     *
     * @param string $chip_number Number for the Clearing House Interbank Payments System
     *
     * @return $this
     */
    public function setChipNumber($chip_number)
    {
        $this->container['chip_number'] = $chip_number;

        return $this;
    }

    /**
     * Gets routing_number
     *
     * @return string
     */
    public function getRoutingNumber()
    {
        return $this->container['routing_number'];
    }

    /**
     * Sets routing_number
     *
     * @param string $routing_number International bank routing number
     *
     * @return $this
     */
    public function setRoutingNumber($routing_number)
    {
        $this->container['routing_number'] = $routing_number;

        return $this;
    }

    /**
     * Gets legal_entity_identifier
     *
     * @return string
     */
    public function getLegalEntityIdentifier()
    {
        return $this->container['legal_entity_identifier'];
    }

    /**
     * Sets legal_entity_identifier
     *
     * @param string $legal_entity_identifier The legal entity identifier (LEI) for the beneficiary.  Aligns with [ISO 17442](https://www.iso.org/standard/59771.html)
     *
     * @return $this
     */
    public function setLegalEntityIdentifier($legal_entity_identifier)
    {
        $this->container['legal_entity_identifier'] = $legal_entity_identifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
