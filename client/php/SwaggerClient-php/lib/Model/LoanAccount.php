<?php
/**
 * LoanAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Consumer Data Standards
 *
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
* OpenAPI spec version: 1-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LoanAccount Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LoanAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LoanAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'original_start_date' => 'string',
'original_loan_amount' => 'string',
'original_loan_currency' => 'string',
'loan_end_date' => 'string',
'next_instalment_date' => 'string',
'min_instalment_amount' => 'string',
'min_instalment_currency' => 'string',
'max_redraw' => 'string',
'max_redraw_currency' => 'string',
'min_redraw' => 'string',
'min_redraw_currency' => 'string',
'offset_account_enabled' => 'bool',
'offset_account_ids' => 'string[]',
'repayment_frequency' => 'string',
'repayment_type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'original_start_date' => 'DateString',
'original_loan_amount' => 'AmountString',
'original_loan_currency' => 'CurrencyString',
'loan_end_date' => 'DateString',
'next_instalment_date' => 'DateString',
'min_instalment_amount' => 'AmountString',
'min_instalment_currency' => 'CurrencyString',
'max_redraw' => 'AmountString',
'max_redraw_currency' => 'CurrencyString',
'min_redraw' => 'AmountString',
'min_redraw_currency' => 'CurrencyString',
'offset_account_enabled' => null,
'offset_account_ids' => 'ASCIIString',
'repayment_frequency' => null,
'repayment_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'original_start_date' => 'originalStartDate',
'original_loan_amount' => 'originalLoanAmount',
'original_loan_currency' => 'originalLoanCurrency',
'loan_end_date' => 'loanEndDate',
'next_instalment_date' => 'nextInstalmentDate',
'min_instalment_amount' => 'minInstalmentAmount',
'min_instalment_currency' => 'minInstalmentCurrency',
'max_redraw' => 'maxRedraw',
'max_redraw_currency' => 'maxRedrawCurrency',
'min_redraw' => 'minRedraw',
'min_redraw_currency' => 'minRedrawCurrency',
'offset_account_enabled' => 'offsetAccountEnabled',
'offset_account_ids' => 'offsetAccountIds',
'repayment_frequency' => 'repaymentFrequency',
'repayment_type' => 'repaymentType'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'original_start_date' => 'setOriginalStartDate',
'original_loan_amount' => 'setOriginalLoanAmount',
'original_loan_currency' => 'setOriginalLoanCurrency',
'loan_end_date' => 'setLoanEndDate',
'next_instalment_date' => 'setNextInstalmentDate',
'min_instalment_amount' => 'setMinInstalmentAmount',
'min_instalment_currency' => 'setMinInstalmentCurrency',
'max_redraw' => 'setMaxRedraw',
'max_redraw_currency' => 'setMaxRedrawCurrency',
'min_redraw' => 'setMinRedraw',
'min_redraw_currency' => 'setMinRedrawCurrency',
'offset_account_enabled' => 'setOffsetAccountEnabled',
'offset_account_ids' => 'setOffsetAccountIds',
'repayment_frequency' => 'setRepaymentFrequency',
'repayment_type' => 'setRepaymentType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'original_start_date' => 'getOriginalStartDate',
'original_loan_amount' => 'getOriginalLoanAmount',
'original_loan_currency' => 'getOriginalLoanCurrency',
'loan_end_date' => 'getLoanEndDate',
'next_instalment_date' => 'getNextInstalmentDate',
'min_instalment_amount' => 'getMinInstalmentAmount',
'min_instalment_currency' => 'getMinInstalmentCurrency',
'max_redraw' => 'getMaxRedraw',
'max_redraw_currency' => 'getMaxRedrawCurrency',
'min_redraw' => 'getMinRedraw',
'min_redraw_currency' => 'getMinRedrawCurrency',
'offset_account_enabled' => 'getOffsetAccountEnabled',
'offset_account_ids' => 'getOffsetAccountIds',
'repayment_frequency' => 'getRepaymentFrequency',
'repayment_type' => 'getRepaymentType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REPAYMENT_TYPE_INTEREST_ONLY = 'INTEREST_ONLY';
const REPAYMENT_TYPE_PRINCIPAL_AND_INTEREST = 'PRINCIPAL_AND_INTEREST';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRepaymentTypeAllowableValues()
    {
        return [
            self::REPAYMENT_TYPE_INTEREST_ONLY,
self::REPAYMENT_TYPE_PRINCIPAL_AND_INTEREST,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['original_start_date'] = isset($data['original_start_date']) ? $data['original_start_date'] : null;
        $this->container['original_loan_amount'] = isset($data['original_loan_amount']) ? $data['original_loan_amount'] : null;
        $this->container['original_loan_currency'] = isset($data['original_loan_currency']) ? $data['original_loan_currency'] : null;
        $this->container['loan_end_date'] = isset($data['loan_end_date']) ? $data['loan_end_date'] : null;
        $this->container['next_instalment_date'] = isset($data['next_instalment_date']) ? $data['next_instalment_date'] : null;
        $this->container['min_instalment_amount'] = isset($data['min_instalment_amount']) ? $data['min_instalment_amount'] : null;
        $this->container['min_instalment_currency'] = isset($data['min_instalment_currency']) ? $data['min_instalment_currency'] : null;
        $this->container['max_redraw'] = isset($data['max_redraw']) ? $data['max_redraw'] : null;
        $this->container['max_redraw_currency'] = isset($data['max_redraw_currency']) ? $data['max_redraw_currency'] : null;
        $this->container['min_redraw'] = isset($data['min_redraw']) ? $data['min_redraw'] : null;
        $this->container['min_redraw_currency'] = isset($data['min_redraw_currency']) ? $data['min_redraw_currency'] : null;
        $this->container['offset_account_enabled'] = isset($data['offset_account_enabled']) ? $data['offset_account_enabled'] : null;
        $this->container['offset_account_ids'] = isset($data['offset_account_ids']) ? $data['offset_account_ids'] : null;
        $this->container['repayment_frequency'] = isset($data['repayment_frequency']) ? $data['repayment_frequency'] : null;
        $this->container['repayment_type'] = isset($data['repayment_type']) ? $data['repayment_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRepaymentTypeAllowableValues();
        if (!in_array($this->container['repayment_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'repayment_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getRepaymentTypeAllowableValues();
        if (!in_array($this->container['repayment_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets original_start_date
     *
     * @return string
     */
    public function getOriginalStartDate()
    {
        return $this->container['original_start_date'];
    }

    /**
     * Sets original_start_date
     *
     * @param string $original_start_date Optional original start date for the loan
     *
     * @return $this
     */
    public function setOriginalStartDate($original_start_date)
    {
        $this->container['original_start_date'] = $original_start_date;

        return $this;
    }

    /**
     * Gets original_loan_amount
     *
     * @return string
     */
    public function getOriginalLoanAmount()
    {
        return $this->container['original_loan_amount'];
    }

    /**
     * Sets original_loan_amount
     *
     * @param string $original_loan_amount Optional original loan value
     *
     * @return $this
     */
    public function setOriginalLoanAmount($original_loan_amount)
    {
        $this->container['original_loan_amount'] = $original_loan_amount;

        return $this;
    }

    /**
     * Gets original_loan_currency
     *
     * @return string
     */
    public function getOriginalLoanCurrency()
    {
        return $this->container['original_loan_currency'];
    }

    /**
     * Sets original_loan_currency
     *
     * @param string $original_loan_currency If absent assumes AUD
     *
     * @return $this
     */
    public function setOriginalLoanCurrency($original_loan_currency)
    {
        $this->container['original_loan_currency'] = $original_loan_currency;

        return $this;
    }

    /**
     * Gets loan_end_date
     *
     * @return string
     */
    public function getLoanEndDate()
    {
        return $this->container['loan_end_date'];
    }

    /**
     * Sets loan_end_date
     *
     * @param string $loan_end_date Date that the loan is due to be repaid in full
     *
     * @return $this
     */
    public function setLoanEndDate($loan_end_date)
    {
        $this->container['loan_end_date'] = $loan_end_date;

        return $this;
    }

    /**
     * Gets next_instalment_date
     *
     * @return string
     */
    public function getNextInstalmentDate()
    {
        return $this->container['next_instalment_date'];
    }

    /**
     * Sets next_instalment_date
     *
     * @param string $next_instalment_date Next date that an instalment is required
     *
     * @return $this
     */
    public function setNextInstalmentDate($next_instalment_date)
    {
        $this->container['next_instalment_date'] = $next_instalment_date;

        return $this;
    }

    /**
     * Gets min_instalment_amount
     *
     * @return string
     */
    public function getMinInstalmentAmount()
    {
        return $this->container['min_instalment_amount'];
    }

    /**
     * Sets min_instalment_amount
     *
     * @param string $min_instalment_amount Minimum amount of next instalment
     *
     * @return $this
     */
    public function setMinInstalmentAmount($min_instalment_amount)
    {
        $this->container['min_instalment_amount'] = $min_instalment_amount;

        return $this;
    }

    /**
     * Gets min_instalment_currency
     *
     * @return string
     */
    public function getMinInstalmentCurrency()
    {
        return $this->container['min_instalment_currency'];
    }

    /**
     * Sets min_instalment_currency
     *
     * @param string $min_instalment_currency If absent assumes AUD
     *
     * @return $this
     */
    public function setMinInstalmentCurrency($min_instalment_currency)
    {
        $this->container['min_instalment_currency'] = $min_instalment_currency;

        return $this;
    }

    /**
     * Gets max_redraw
     *
     * @return string
     */
    public function getMaxRedraw()
    {
        return $this->container['max_redraw'];
    }

    /**
     * Sets max_redraw
     *
     * @param string $max_redraw Maximum amount of funds that can be redrawn. If not present redraw is not available even if the feature exists for the account
     *
     * @return $this
     */
    public function setMaxRedraw($max_redraw)
    {
        $this->container['max_redraw'] = $max_redraw;

        return $this;
    }

    /**
     * Gets max_redraw_currency
     *
     * @return string
     */
    public function getMaxRedrawCurrency()
    {
        return $this->container['max_redraw_currency'];
    }

    /**
     * Sets max_redraw_currency
     *
     * @param string $max_redraw_currency If absent assumes AUD
     *
     * @return $this
     */
    public function setMaxRedrawCurrency($max_redraw_currency)
    {
        $this->container['max_redraw_currency'] = $max_redraw_currency;

        return $this;
    }

    /**
     * Gets min_redraw
     *
     * @return string
     */
    public function getMinRedraw()
    {
        return $this->container['min_redraw'];
    }

    /**
     * Sets min_redraw
     *
     * @param string $min_redraw Minimum redraw amount
     *
     * @return $this
     */
    public function setMinRedraw($min_redraw)
    {
        $this->container['min_redraw'] = $min_redraw;

        return $this;
    }

    /**
     * Gets min_redraw_currency
     *
     * @return string
     */
    public function getMinRedrawCurrency()
    {
        return $this->container['min_redraw_currency'];
    }

    /**
     * Sets min_redraw_currency
     *
     * @param string $min_redraw_currency If absent assumes AUD
     *
     * @return $this
     */
    public function setMinRedrawCurrency($min_redraw_currency)
    {
        $this->container['min_redraw_currency'] = $min_redraw_currency;

        return $this;
    }

    /**
     * Gets offset_account_enabled
     *
     * @return bool
     */
    public function getOffsetAccountEnabled()
    {
        return $this->container['offset_account_enabled'];
    }

    /**
     * Sets offset_account_enabled
     *
     * @param bool $offset_account_enabled Set to true if one or more offset accounts are configured for this loan account
     *
     * @return $this
     */
    public function setOffsetAccountEnabled($offset_account_enabled)
    {
        $this->container['offset_account_enabled'] = $offset_account_enabled;

        return $this;
    }

    /**
     * Gets offset_account_ids
     *
     * @return string[]
     */
    public function getOffsetAccountIds()
    {
        return $this->container['offset_account_ids'];
    }

    /**
     * Sets offset_account_ids
     *
     * @param string[] $offset_account_ids The accountIDs of the configured offset accounts attached to this loan. Only offset accounts that can be accesses under the current authorisation should be included. It is expected behaviour that offsetAccountEnabled is set to true but the offsetAccountIds field is absent or empty. This represents a situation where an offset account exists but details can not be accessed under the current authorisation
     *
     * @return $this
     */
    public function setOffsetAccountIds($offset_account_ids)
    {
        $this->container['offset_account_ids'] = $offset_account_ids;

        return $this;
    }

    /**
     * Gets repayment_frequency
     *
     * @return string
     */
    public function getRepaymentFrequency()
    {
        return $this->container['repayment_frequency'];
    }

    /**
     * Sets repayment_frequency
     *
     * @param string $repayment_frequency The expected or required repayment frequency. Formatted according to ISO 8601 Durations
     *
     * @return $this
     */
    public function setRepaymentFrequency($repayment_frequency)
    {
        $this->container['repayment_frequency'] = $repayment_frequency;

        return $this;
    }

    /**
     * Gets repayment_type
     *
     * @return string
     */
    public function getRepaymentType()
    {
        return $this->container['repayment_type'];
    }

    /**
     * Sets repayment_type
     *
     * @param string $repayment_type Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST
     *
     * @return $this
     */
    public function setRepaymentType($repayment_type)
    {
        $allowedValues = $this->getRepaymentTypeAllowableValues();
        if (!is_null($repayment_type) && !in_array($repayment_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'repayment_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['repayment_type'] = $repayment_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
