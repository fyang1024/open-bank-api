<?php
/**
 * CreditCardAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Consumer Data Standards
 *
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
* OpenAPI spec version: 1-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreditCardAccount Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditCardAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreditCardAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'min_payment_amount' => 'string',
'payment_due_amount' => 'string',
'payment_currency' => 'string',
'payment_due_date' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'min_payment_amount' => 'AmountString',
'payment_due_amount' => 'AmountString',
'payment_currency' => 'CurrencyString',
'payment_due_date' => 'DateString'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'min_payment_amount' => 'minPaymentAmount',
'payment_due_amount' => 'paymentDueAmount',
'payment_currency' => 'paymentCurrency',
'payment_due_date' => 'paymentDueDate'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'min_payment_amount' => 'setMinPaymentAmount',
'payment_due_amount' => 'setPaymentDueAmount',
'payment_currency' => 'setPaymentCurrency',
'payment_due_date' => 'setPaymentDueDate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'min_payment_amount' => 'getMinPaymentAmount',
'payment_due_amount' => 'getPaymentDueAmount',
'payment_currency' => 'getPaymentCurrency',
'payment_due_date' => 'getPaymentDueDate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['min_payment_amount'] = isset($data['min_payment_amount']) ? $data['min_payment_amount'] : null;
        $this->container['payment_due_amount'] = isset($data['payment_due_amount']) ? $data['payment_due_amount'] : null;
        $this->container['payment_currency'] = isset($data['payment_currency']) ? $data['payment_currency'] : null;
        $this->container['payment_due_date'] = isset($data['payment_due_date']) ? $data['payment_due_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['min_payment_amount'] === null) {
            $invalidProperties[] = "'min_payment_amount' can't be null";
        }
        if ($this->container['payment_due_amount'] === null) {
            $invalidProperties[] = "'payment_due_amount' can't be null";
        }
        if ($this->container['payment_due_date'] === null) {
            $invalidProperties[] = "'payment_due_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['min_payment_amount'] === null) {
            return false;
        }
        if ($this->container['payment_due_amount'] === null) {
            return false;
        }
        if ($this->container['payment_due_date'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets min_payment_amount
     *
     * @return string
     */
    public function getMinPaymentAmount()
    {
        return $this->container['min_payment_amount'];
    }

    /**
     * Sets min_payment_amount
     *
     * @param string $min_payment_amount The minimum payment amount due for the next card payment
     *
     * @return $this
     */
    public function setMinPaymentAmount($min_payment_amount)
    {
        $this->container['min_payment_amount'] = $min_payment_amount;

        return $this;
    }

    /**
     * Gets payment_due_amount
     *
     * @return string
     */
    public function getPaymentDueAmount()
    {
        return $this->container['payment_due_amount'];
    }

    /**
     * Sets payment_due_amount
     *
     * @param string $payment_due_amount The amount due for the next card payment
     *
     * @return $this
     */
    public function setPaymentDueAmount($payment_due_amount)
    {
        $this->container['payment_due_amount'] = $payment_due_amount;

        return $this;
    }

    /**
     * Gets payment_currency
     *
     * @return string
     */
    public function getPaymentCurrency()
    {
        return $this->container['payment_currency'];
    }

    /**
     * Sets payment_currency
     *
     * @param string $payment_currency If absent assumes AUD
     *
     * @return $this
     */
    public function setPaymentCurrency($payment_currency)
    {
        $this->container['payment_currency'] = $payment_currency;

        return $this;
    }

    /**
     * Gets payment_due_date
     *
     * @return string
     */
    public function getPaymentDueDate()
    {
        return $this->container['payment_due_date'];
    }

    /**
     * Sets payment_due_date
     *
     * @param string $payment_due_date Date that the next payment for the card is due
     *
     * @return $this
     */
    public function setPaymentDueDate($payment_due_date)
    {
        $this->container['payment_due_date'] = $payment_due_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
