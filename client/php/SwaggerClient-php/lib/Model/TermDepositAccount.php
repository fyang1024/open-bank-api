<?php
/**
 * TermDepositAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Consumer Data Standards
 *
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
* OpenAPI spec version: 1-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TermDepositAccount Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TermDepositAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TermDepositAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lodgement_date' => 'string',
'maturity_date' => 'string',
'maturity_amount' => 'string',
'maturity_currency' => 'string',
'maturity_instructions' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lodgement_date' => 'DateString',
'maturity_date' => 'DateString',
'maturity_amount' => 'AmountString',
'maturity_currency' => 'CurrencyString',
'maturity_instructions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lodgement_date' => 'lodgementDate',
'maturity_date' => 'maturityDate',
'maturity_amount' => 'maturityAmount',
'maturity_currency' => 'maturityCurrency',
'maturity_instructions' => 'maturityInstructions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lodgement_date' => 'setLodgementDate',
'maturity_date' => 'setMaturityDate',
'maturity_amount' => 'setMaturityAmount',
'maturity_currency' => 'setMaturityCurrency',
'maturity_instructions' => 'setMaturityInstructions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lodgement_date' => 'getLodgementDate',
'maturity_date' => 'getMaturityDate',
'maturity_amount' => 'getMaturityAmount',
'maturity_currency' => 'getMaturityCurrency',
'maturity_instructions' => 'getMaturityInstructions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MATURITY_INSTRUCTIONS_ROLLED_OVER = 'ROLLED_OVER';
const MATURITY_INSTRUCTIONS_PAID_OUT_AT_MATURITY = 'PAID_OUT_AT_MATURITY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaturityInstructionsAllowableValues()
    {
        return [
            self::MATURITY_INSTRUCTIONS_ROLLED_OVER,
self::MATURITY_INSTRUCTIONS_PAID_OUT_AT_MATURITY,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lodgement_date'] = isset($data['lodgement_date']) ? $data['lodgement_date'] : null;
        $this->container['maturity_date'] = isset($data['maturity_date']) ? $data['maturity_date'] : null;
        $this->container['maturity_amount'] = isset($data['maturity_amount']) ? $data['maturity_amount'] : null;
        $this->container['maturity_currency'] = isset($data['maturity_currency']) ? $data['maturity_currency'] : null;
        $this->container['maturity_instructions'] = isset($data['maturity_instructions']) ? $data['maturity_instructions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lodgement_date'] === null) {
            $invalidProperties[] = "'lodgement_date' can't be null";
        }
        if ($this->container['maturity_date'] === null) {
            $invalidProperties[] = "'maturity_date' can't be null";
        }
        if ($this->container['maturity_instructions'] === null) {
            $invalidProperties[] = "'maturity_instructions' can't be null";
        }
        $allowedValues = $this->getMaturityInstructionsAllowableValues();
        if (!in_array($this->container['maturity_instructions'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'maturity_instructions', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['lodgement_date'] === null) {
            return false;
        }
        if ($this->container['maturity_date'] === null) {
            return false;
        }
        if ($this->container['maturity_instructions'] === null) {
            return false;
        }
        $allowedValues = $this->getMaturityInstructionsAllowableValues();
        if (!in_array($this->container['maturity_instructions'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets lodgement_date
     *
     * @return string
     */
    public function getLodgementDate()
    {
        return $this->container['lodgement_date'];
    }

    /**
     * Sets lodgement_date
     *
     * @param string $lodgement_date The lodgement date of the original deposit
     *
     * @return $this
     */
    public function setLodgementDate($lodgement_date)
    {
        $this->container['lodgement_date'] = $lodgement_date;

        return $this;
    }

    /**
     * Gets maturity_date
     *
     * @return string
     */
    public function getMaturityDate()
    {
        return $this->container['maturity_date'];
    }

    /**
     * Sets maturity_date
     *
     * @param string $maturity_date Maturity date for the term deposit
     *
     * @return $this
     */
    public function setMaturityDate($maturity_date)
    {
        $this->container['maturity_date'] = $maturity_date;

        return $this;
    }

    /**
     * Gets maturity_amount
     *
     * @return string
     */
    public function getMaturityAmount()
    {
        return $this->container['maturity_amount'];
    }

    /**
     * Sets maturity_amount
     *
     * @param string $maturity_amount Amount to be paid upon maturity. If absent it implies the amount to paid is variable and cannot currently be calculated
     *
     * @return $this
     */
    public function setMaturityAmount($maturity_amount)
    {
        $this->container['maturity_amount'] = $maturity_amount;

        return $this;
    }

    /**
     * Gets maturity_currency
     *
     * @return string
     */
    public function getMaturityCurrency()
    {
        return $this->container['maturity_currency'];
    }

    /**
     * Sets maturity_currency
     *
     * @param string $maturity_currency If absent assumes AUD
     *
     * @return $this
     */
    public function setMaturityCurrency($maturity_currency)
    {
        $this->container['maturity_currency'] = $maturity_currency;

        return $this;
    }

    /**
     * Gets maturity_instructions
     *
     * @return string
     */
    public function getMaturityInstructions()
    {
        return $this->container['maturity_instructions'];
    }

    /**
     * Sets maturity_instructions
     *
     * @param string $maturity_instructions Current instructions on action to be taken at maturity
     *
     * @return $this
     */
    public function setMaturityInstructions($maturity_instructions)
    {
        $allowedValues = $this->getMaturityInstructionsAllowableValues();
        if (!in_array($maturity_instructions, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'maturity_instructions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['maturity_instructions'] = $maturity_instructions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
