<?php
/**
 * PAFAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Consumer Data Standards
 *
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
* OpenAPI spec version: 1-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PAFAddress Class Doc Comment
 *
 * @category Class
 * @description Australian address formatted according to the file format defined by the [PAF file format](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PAFAddress implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PAFAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dpid' => 'string',
'thoroughfare_number1' => 'int',
'thoroughfare_number1_suffix' => 'string',
'thoroughfare_number2' => 'int',
'thoroughfare_number2_suffix' => 'string',
'flat_unit_number' => 'string',
'floor_level_number' => 'string',
'lot_number' => 'int',
'building_name1' => 'string',
'building_name2' => 'string',
'street_name' => 'string',
'street_type' => 'string',
'street_suffix' => 'string',
'postal_delivery_type' => 'string',
'postal_delivery_number' => 'int',
'postal_delivery_number_prefix' => 'string',
'postal_delivery_number_suffix' => 'string',
'locality_name' => 'string',
'postcode' => 'string',
'state' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dpid' => null,
'thoroughfare_number1' => 'int32',
'thoroughfare_number1_suffix' => null,
'thoroughfare_number2' => 'int32',
'thoroughfare_number2_suffix' => null,
'flat_unit_number' => null,
'floor_level_number' => null,
'lot_number' => 'int32',
'building_name1' => null,
'building_name2' => null,
'street_name' => null,
'street_type' => null,
'street_suffix' => null,
'postal_delivery_type' => null,
'postal_delivery_number' => 'int32',
'postal_delivery_number_prefix' => null,
'postal_delivery_number_suffix' => null,
'locality_name' => null,
'postcode' => null,
'state' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dpid' => 'dpid',
'thoroughfare_number1' => 'thoroughfareNumber1',
'thoroughfare_number1_suffix' => 'thoroughfareNumber1Suffix',
'thoroughfare_number2' => 'thoroughfareNumber2',
'thoroughfare_number2_suffix' => 'thoroughfareNumber2Suffix',
'flat_unit_number' => 'flatUnitNumber',
'floor_level_number' => 'floorLevelNumber',
'lot_number' => 'lotNumber',
'building_name1' => 'buildingName1',
'building_name2' => 'buildingName2',
'street_name' => 'streetName',
'street_type' => 'streetType',
'street_suffix' => 'streetSuffix',
'postal_delivery_type' => 'postalDeliveryType',
'postal_delivery_number' => 'postalDeliveryNumber',
'postal_delivery_number_prefix' => 'postalDeliveryNumberPrefix',
'postal_delivery_number_suffix' => 'postalDeliveryNumberSuffix',
'locality_name' => 'localityName',
'postcode' => 'postcode',
'state' => 'state'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dpid' => 'setDpid',
'thoroughfare_number1' => 'setThoroughfareNumber1',
'thoroughfare_number1_suffix' => 'setThoroughfareNumber1Suffix',
'thoroughfare_number2' => 'setThoroughfareNumber2',
'thoroughfare_number2_suffix' => 'setThoroughfareNumber2Suffix',
'flat_unit_number' => 'setFlatUnitNumber',
'floor_level_number' => 'setFloorLevelNumber',
'lot_number' => 'setLotNumber',
'building_name1' => 'setBuildingName1',
'building_name2' => 'setBuildingName2',
'street_name' => 'setStreetName',
'street_type' => 'setStreetType',
'street_suffix' => 'setStreetSuffix',
'postal_delivery_type' => 'setPostalDeliveryType',
'postal_delivery_number' => 'setPostalDeliveryNumber',
'postal_delivery_number_prefix' => 'setPostalDeliveryNumberPrefix',
'postal_delivery_number_suffix' => 'setPostalDeliveryNumberSuffix',
'locality_name' => 'setLocalityName',
'postcode' => 'setPostcode',
'state' => 'setState'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dpid' => 'getDpid',
'thoroughfare_number1' => 'getThoroughfareNumber1',
'thoroughfare_number1_suffix' => 'getThoroughfareNumber1Suffix',
'thoroughfare_number2' => 'getThoroughfareNumber2',
'thoroughfare_number2_suffix' => 'getThoroughfareNumber2Suffix',
'flat_unit_number' => 'getFlatUnitNumber',
'floor_level_number' => 'getFloorLevelNumber',
'lot_number' => 'getLotNumber',
'building_name1' => 'getBuildingName1',
'building_name2' => 'getBuildingName2',
'street_name' => 'getStreetName',
'street_type' => 'getStreetType',
'street_suffix' => 'getStreetSuffix',
'postal_delivery_type' => 'getPostalDeliveryType',
'postal_delivery_number' => 'getPostalDeliveryNumber',
'postal_delivery_number_prefix' => 'getPostalDeliveryNumberPrefix',
'postal_delivery_number_suffix' => 'getPostalDeliveryNumberSuffix',
'locality_name' => 'getLocalityName',
'postcode' => 'getPostcode',
'state' => 'getState'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dpid'] = isset($data['dpid']) ? $data['dpid'] : null;
        $this->container['thoroughfare_number1'] = isset($data['thoroughfare_number1']) ? $data['thoroughfare_number1'] : null;
        $this->container['thoroughfare_number1_suffix'] = isset($data['thoroughfare_number1_suffix']) ? $data['thoroughfare_number1_suffix'] : null;
        $this->container['thoroughfare_number2'] = isset($data['thoroughfare_number2']) ? $data['thoroughfare_number2'] : null;
        $this->container['thoroughfare_number2_suffix'] = isset($data['thoroughfare_number2_suffix']) ? $data['thoroughfare_number2_suffix'] : null;
        $this->container['flat_unit_number'] = isset($data['flat_unit_number']) ? $data['flat_unit_number'] : null;
        $this->container['floor_level_number'] = isset($data['floor_level_number']) ? $data['floor_level_number'] : null;
        $this->container['lot_number'] = isset($data['lot_number']) ? $data['lot_number'] : null;
        $this->container['building_name1'] = isset($data['building_name1']) ? $data['building_name1'] : null;
        $this->container['building_name2'] = isset($data['building_name2']) ? $data['building_name2'] : null;
        $this->container['street_name'] = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['street_type'] = isset($data['street_type']) ? $data['street_type'] : null;
        $this->container['street_suffix'] = isset($data['street_suffix']) ? $data['street_suffix'] : null;
        $this->container['postal_delivery_type'] = isset($data['postal_delivery_type']) ? $data['postal_delivery_type'] : null;
        $this->container['postal_delivery_number'] = isset($data['postal_delivery_number']) ? $data['postal_delivery_number'] : null;
        $this->container['postal_delivery_number_prefix'] = isset($data['postal_delivery_number_prefix']) ? $data['postal_delivery_number_prefix'] : null;
        $this->container['postal_delivery_number_suffix'] = isset($data['postal_delivery_number_suffix']) ? $data['postal_delivery_number_suffix'] : null;
        $this->container['locality_name'] = isset($data['locality_name']) ? $data['locality_name'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['locality_name'] === null) {
            $invalidProperties[] = "'locality_name' can't be null";
        }
        if ($this->container['postcode'] === null) {
            $invalidProperties[] = "'postcode' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['locality_name'] === null) {
            return false;
        }
        if ($this->container['postcode'] === null) {
            return false;
        }
        if ($this->container['state'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets dpid
     *
     * @return string
     */
    public function getDpid()
    {
        return $this->container['dpid'];
    }

    /**
     * Sets dpid
     *
     * @param string $dpid Unique identifier for an address as defined by Australia Post.  Also known as Delivery Point Identifier
     *
     * @return $this
     */
    public function setDpid($dpid)
    {
        $this->container['dpid'] = $dpid;

        return $this;
    }

    /**
     * Gets thoroughfare_number1
     *
     * @return int
     */
    public function getThoroughfareNumber1()
    {
        return $this->container['thoroughfare_number1'];
    }

    /**
     * Sets thoroughfare_number1
     *
     * @param int $thoroughfare_number1 Thoroughfare number for a property (first number in a property ranged address)
     *
     * @return $this
     */
    public function setThoroughfareNumber1($thoroughfare_number1)
    {
        $this->container['thoroughfare_number1'] = $thoroughfare_number1;

        return $this;
    }

    /**
     * Gets thoroughfare_number1_suffix
     *
     * @return string
     */
    public function getThoroughfareNumber1Suffix()
    {
        return $this->container['thoroughfare_number1_suffix'];
    }

    /**
     * Sets thoroughfare_number1_suffix
     *
     * @param string $thoroughfare_number1_suffix Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated
     *
     * @return $this
     */
    public function setThoroughfareNumber1Suffix($thoroughfare_number1_suffix)
    {
        $this->container['thoroughfare_number1_suffix'] = $thoroughfare_number1_suffix;

        return $this;
    }

    /**
     * Gets thoroughfare_number2
     *
     * @return int
     */
    public function getThoroughfareNumber2()
    {
        return $this->container['thoroughfare_number2'];
    }

    /**
     * Sets thoroughfare_number2
     *
     * @param int $thoroughfare_number2 Second thoroughfare number (only used if the property has a ranged address eg 23-25)
     *
     * @return $this
     */
    public function setThoroughfareNumber2($thoroughfare_number2)
    {
        $this->container['thoroughfare_number2'] = $thoroughfare_number2;

        return $this;
    }

    /**
     * Gets thoroughfare_number2_suffix
     *
     * @return string
     */
    public function getThoroughfareNumber2Suffix()
    {
        return $this->container['thoroughfare_number2_suffix'];
    }

    /**
     * Sets thoroughfare_number2_suffix
     *
     * @param string $thoroughfare_number2_suffix Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated
     *
     * @return $this
     */
    public function setThoroughfareNumber2Suffix($thoroughfare_number2_suffix)
    {
        $this->container['thoroughfare_number2_suffix'] = $thoroughfare_number2_suffix;

        return $this;
    }

    /**
     * Gets flat_unit_number
     *
     * @return string
     */
    public function getFlatUnitNumber()
    {
        return $this->container['flat_unit_number'];
    }

    /**
     * Sets flat_unit_number
     *
     * @param string $flat_unit_number Unit number (including suffix, if applicable)
     *
     * @return $this
     */
    public function setFlatUnitNumber($flat_unit_number)
    {
        $this->container['flat_unit_number'] = $flat_unit_number;

        return $this;
    }

    /**
     * Gets floor_level_number
     *
     * @return string
     */
    public function getFloorLevelNumber()
    {
        return $this->container['floor_level_number'];
    }

    /**
     * Sets floor_level_number
     *
     * @param string $floor_level_number Floor or level number (including alpha characters)
     *
     * @return $this
     */
    public function setFloorLevelNumber($floor_level_number)
    {
        $this->container['floor_level_number'] = $floor_level_number;

        return $this;
    }

    /**
     * Gets lot_number
     *
     * @return int
     */
    public function getLotNumber()
    {
        return $this->container['lot_number'];
    }

    /**
     * Sets lot_number
     *
     * @param int $lot_number Allotment number for the address
     *
     * @return $this
     */
    public function setLotNumber($lot_number)
    {
        $this->container['lot_number'] = $lot_number;

        return $this;
    }

    /**
     * Gets building_name1
     *
     * @return string
     */
    public function getBuildingName1()
    {
        return $this->container['building_name1'];
    }

    /**
     * Sets building_name1
     *
     * @param string $building_name1 Building/Property name 1
     *
     * @return $this
     */
    public function setBuildingName1($building_name1)
    {
        $this->container['building_name1'] = $building_name1;

        return $this;
    }

    /**
     * Gets building_name2
     *
     * @return string
     */
    public function getBuildingName2()
    {
        return $this->container['building_name2'];
    }

    /**
     * Sets building_name2
     *
     * @param string $building_name2 Building/Property name 2
     *
     * @return $this
     */
    public function setBuildingName2($building_name2)
    {
        $this->container['building_name2'] = $building_name2;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string $street_name The name of the street
     *
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets street_type
     *
     * @return string
     */
    public function getStreetType()
    {
        return $this->container['street_type'];
    }

    /**
     * Sets street_type
     *
     * @param string $street_type The street type. Valid enumeration defined by Australia Post PAF code file
     *
     * @return $this
     */
    public function setStreetType($street_type)
    {
        $this->container['street_type'] = $street_type;

        return $this;
    }

    /**
     * Gets street_suffix
     *
     * @return string
     */
    public function getStreetSuffix()
    {
        return $this->container['street_suffix'];
    }

    /**
     * Sets street_suffix
     *
     * @param string $street_suffix The street type suffix. Valid enumeration defined by Australia Post PAF code file
     *
     * @return $this
     */
    public function setStreetSuffix($street_suffix)
    {
        $this->container['street_suffix'] = $street_suffix;

        return $this;
    }

    /**
     * Gets postal_delivery_type
     *
     * @return string
     */
    public function getPostalDeliveryType()
    {
        return $this->container['postal_delivery_type'];
    }

    /**
     * Sets postal_delivery_type
     *
     * @param string $postal_delivery_type Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file
     *
     * @return $this
     */
    public function setPostalDeliveryType($postal_delivery_type)
    {
        $this->container['postal_delivery_type'] = $postal_delivery_type;

        return $this;
    }

    /**
     * Gets postal_delivery_number
     *
     * @return int
     */
    public function getPostalDeliveryNumber()
    {
        return $this->container['postal_delivery_number'];
    }

    /**
     * Sets postal_delivery_number
     *
     * @param int $postal_delivery_number Postal delivery number if the address is a postal delivery type
     *
     * @return $this
     */
    public function setPostalDeliveryNumber($postal_delivery_number)
    {
        $this->container['postal_delivery_number'] = $postal_delivery_number;

        return $this;
    }

    /**
     * Gets postal_delivery_number_prefix
     *
     * @return string
     */
    public function getPostalDeliveryNumberPrefix()
    {
        return $this->container['postal_delivery_number_prefix'];
    }

    /**
     * Sets postal_delivery_number_prefix
     *
     * @param string $postal_delivery_number_prefix Postal delivery number prefix related to the postal delivery number
     *
     * @return $this
     */
    public function setPostalDeliveryNumberPrefix($postal_delivery_number_prefix)
    {
        $this->container['postal_delivery_number_prefix'] = $postal_delivery_number_prefix;

        return $this;
    }

    /**
     * Gets postal_delivery_number_suffix
     *
     * @return string
     */
    public function getPostalDeliveryNumberSuffix()
    {
        return $this->container['postal_delivery_number_suffix'];
    }

    /**
     * Sets postal_delivery_number_suffix
     *
     * @param string $postal_delivery_number_suffix Postal delivery number suffix related to the postal delivery number
     *
     * @return $this
     */
    public function setPostalDeliveryNumberSuffix($postal_delivery_number_suffix)
    {
        $this->container['postal_delivery_number_suffix'] = $postal_delivery_number_suffix;

        return $this;
    }

    /**
     * Gets locality_name
     *
     * @return string
     */
    public function getLocalityName()
    {
        return $this->container['locality_name'];
    }

    /**
     * Sets locality_name
     *
     * @param string $locality_name Full name of locality
     *
     * @return $this
     */
    public function setLocalityName($locality_name)
    {
        $this->container['locality_name'] = $locality_name;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode Postcode for the locality
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State in which the address belongs. Valid enumeration defined by Australia Post PAF code file
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
