<?php
/**
 * AccountDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Consumer Data Standards
 *
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
* OpenAPI spec version: 1-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * AccountDetail Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountDetail extends Account 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bsb' => 'string',
'account_number' => 'string',
'bundle_name' => 'string',
'specific_account_u_type' => 'string',
'term_deposit' => '\Swagger\Client\Model\TermDepositAccount',
'credit_card' => '\Swagger\Client\Model\CreditCardAccount',
'loan' => '\Swagger\Client\Model\LoanAccount',
'features' => '\Swagger\Client\Model\AccountFeatures[]',
'fees' => '\Swagger\Client\Model\AccountFees[]',
'deposit_rates' => '\Swagger\Client\Model\AccountDepositRates[]',
'lending_rates' => '\Swagger\Client\Model\AccountLendingRates[]',
'address' => '\Swagger\Client\Model\PhysicalAddress'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bsb' => null,
'account_number' => null,
'bundle_name' => null,
'specific_account_u_type' => null,
'term_deposit' => null,
'credit_card' => null,
'loan' => null,
'features' => null,
'fees' => null,
'deposit_rates' => null,
'lending_rates' => null,
'address' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bsb' => 'bsb',
'account_number' => 'accountNumber',
'bundle_name' => 'bundleName',
'specific_account_u_type' => 'specificAccountUType',
'term_deposit' => 'termDeposit',
'credit_card' => 'creditCard',
'loan' => 'loan',
'features' => 'features',
'fees' => 'fees',
'deposit_rates' => 'depositRates',
'lending_rates' => 'lendingRates',
'address' => 'address'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bsb' => 'setBsb',
'account_number' => 'setAccountNumber',
'bundle_name' => 'setBundleName',
'specific_account_u_type' => 'setSpecificAccountUType',
'term_deposit' => 'setTermDeposit',
'credit_card' => 'setCreditCard',
'loan' => 'setLoan',
'features' => 'setFeatures',
'fees' => 'setFees',
'deposit_rates' => 'setDepositRates',
'lending_rates' => 'setLendingRates',
'address' => 'setAddress'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bsb' => 'getBsb',
'account_number' => 'getAccountNumber',
'bundle_name' => 'getBundleName',
'specific_account_u_type' => 'getSpecificAccountUType',
'term_deposit' => 'getTermDeposit',
'credit_card' => 'getCreditCard',
'loan' => 'getLoan',
'features' => 'getFeatures',
'fees' => 'getFees',
'deposit_rates' => 'getDepositRates',
'lending_rates' => 'getLendingRates',
'address' => 'getAddress'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SPECIFIC_ACCOUNT_U_TYPE_TERM_DEPOSIT = 'termDeposit';
const SPECIFIC_ACCOUNT_U_TYPE_CREDIT_CARD = 'creditCard';
const SPECIFIC_ACCOUNT_U_TYPE_LOAN = 'loan';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpecificAccountUTypeAllowableValues()
    {
        return [
            self::SPECIFIC_ACCOUNT_U_TYPE_TERM_DEPOSIT,
self::SPECIFIC_ACCOUNT_U_TYPE_CREDIT_CARD,
self::SPECIFIC_ACCOUNT_U_TYPE_LOAN,        ];
    }


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['bsb'] = isset($data['bsb']) ? $data['bsb'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['bundle_name'] = isset($data['bundle_name']) ? $data['bundle_name'] : null;
        $this->container['specific_account_u_type'] = isset($data['specific_account_u_type']) ? $data['specific_account_u_type'] : null;
        $this->container['term_deposit'] = isset($data['term_deposit']) ? $data['term_deposit'] : null;
        $this->container['credit_card'] = isset($data['credit_card']) ? $data['credit_card'] : null;
        $this->container['loan'] = isset($data['loan']) ? $data['loan'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['fees'] = isset($data['fees']) ? $data['fees'] : null;
        $this->container['deposit_rates'] = isset($data['deposit_rates']) ? $data['deposit_rates'] : null;
        $this->container['lending_rates'] = isset($data['lending_rates']) ? $data['lending_rates'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getSpecificAccountUTypeAllowableValues();
        if (!in_array($this->container['specific_account_u_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'specific_account_u_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        $allowedValues = $this->getSpecificAccountUTypeAllowableValues();
        if (!in_array($this->container['specific_account_u_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets bsb
     *
     * @return string
     */
    public function getBsb()
    {
        return $this->container['bsb'];
    }

    /**
     * Sets bsb
     *
     * @param string $bsb The unmasked BSB for the account.  Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces
     *
     * @return $this
     */
    public function setBsb($bsb)
    {
        $this->container['bsb'] = $bsb;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number The unmasked account number for the account.  Should not be supplied if the account number is a PAN requiring PCI compliance. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets bundle_name
     *
     * @return string
     */
    public function getBundleName()
    {
        return $this->container['bundle_name'];
    }

    /**
     * Sets bundle_name
     *
     * @param string $bundle_name Optional field to indicate if this account is part of a bundle that is providing additional benefit for to the customer
     *
     * @return $this
     */
    public function setBundleName($bundle_name)
    {
        $this->container['bundle_name'] = $bundle_name;

        return $this;
    }

    /**
     * Gets specific_account_u_type
     *
     * @return string
     */
    public function getSpecificAccountUType()
    {
        return $this->container['specific_account_u_type'];
    }

    /**
     * Sets specific_account_u_type
     *
     * @param string $specific_account_u_type The type of structure to present account specific fields.
     *
     * @return $this
     */
    public function setSpecificAccountUType($specific_account_u_type)
    {
        $allowedValues = $this->getSpecificAccountUTypeAllowableValues();
        if (!is_null($specific_account_u_type) && !in_array($specific_account_u_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'specific_account_u_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['specific_account_u_type'] = $specific_account_u_type;

        return $this;
    }

    /**
     * Gets term_deposit
     *
     * @return \Swagger\Client\Model\TermDepositAccount
     */
    public function getTermDeposit()
    {
        return $this->container['term_deposit'];
    }

    /**
     * Sets term_deposit
     *
     * @param \Swagger\Client\Model\TermDepositAccount $term_deposit term_deposit
     *
     * @return $this
     */
    public function setTermDeposit($term_deposit)
    {
        $this->container['term_deposit'] = $term_deposit;

        return $this;
    }

    /**
     * Gets credit_card
     *
     * @return \Swagger\Client\Model\CreditCardAccount
     */
    public function getCreditCard()
    {
        return $this->container['credit_card'];
    }

    /**
     * Sets credit_card
     *
     * @param \Swagger\Client\Model\CreditCardAccount $credit_card credit_card
     *
     * @return $this
     */
    public function setCreditCard($credit_card)
    {
        $this->container['credit_card'] = $credit_card;

        return $this;
    }

    /**
     * Gets loan
     *
     * @return \Swagger\Client\Model\LoanAccount
     */
    public function getLoan()
    {
        return $this->container['loan'];
    }

    /**
     * Sets loan
     *
     * @param \Swagger\Client\Model\LoanAccount $loan loan
     *
     * @return $this
     */
    public function setLoan($loan)
    {
        $this->container['loan'] = $loan;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \Swagger\Client\Model\AccountFeatures[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \Swagger\Client\Model\AccountFeatures[] $features features
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \Swagger\Client\Model\AccountFees[]
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \Swagger\Client\Model\AccountFees[] $fees fees
     *
     * @return $this
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets deposit_rates
     *
     * @return \Swagger\Client\Model\AccountDepositRates[]
     */
    public function getDepositRates()
    {
        return $this->container['deposit_rates'];
    }

    /**
     * Sets deposit_rates
     *
     * @param \Swagger\Client\Model\AccountDepositRates[] $deposit_rates deposit_rates
     *
     * @return $this
     */
    public function setDepositRates($deposit_rates)
    {
        $this->container['deposit_rates'] = $deposit_rates;

        return $this;
    }

    /**
     * Gets lending_rates
     *
     * @return \Swagger\Client\Model\AccountLendingRates[]
     */
    public function getLendingRates()
    {
        return $this->container['lending_rates'];
    }

    /**
     * Sets lending_rates
     *
     * @param \Swagger\Client\Model\AccountLendingRates[] $lending_rates lending_rates
     *
     * @return $this
     */
    public function setLendingRates($lending_rates)
    {
        $this->container['lending_rates'] = $lending_rates;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\PhysicalAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\PhysicalAddress $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
