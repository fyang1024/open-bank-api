<?php
/**
 * PhoneNumber
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Consumer Data Standards
 *
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
* OpenAPI spec version: 1-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PhoneNumber Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PhoneNumber implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PhoneNumber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_preferred' => 'bool',
'purpose' => 'string',
'country_code' => 'string',
'area_code' => 'string',
'number' => 'string',
'extension' => 'string',
'full_number' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_preferred' => null,
'purpose' => null,
'country_code' => null,
'area_code' => null,
'number' => null,
'extension' => null,
'full_number' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_preferred' => 'isPreferred',
'purpose' => 'purpose',
'country_code' => 'countryCode',
'area_code' => 'areaCode',
'number' => 'number',
'extension' => 'extension',
'full_number' => 'fullNumber'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_preferred' => 'setIsPreferred',
'purpose' => 'setPurpose',
'country_code' => 'setCountryCode',
'area_code' => 'setAreaCode',
'number' => 'setNumber',
'extension' => 'setExtension',
'full_number' => 'setFullNumber'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_preferred' => 'getIsPreferred',
'purpose' => 'getPurpose',
'country_code' => 'getCountryCode',
'area_code' => 'getAreaCode',
'number' => 'getNumber',
'extension' => 'getExtension',
'full_number' => 'getFullNumber'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PURPOSE_MOBILE = 'MOBILE';
const PURPOSE_HOME = 'HOME';
const PURPOSE_WORK = 'WORK';
const PURPOSE_OTHER = 'OTHER';
const PURPOSE_INTERNATIONAL = 'INTERNATIONAL';
const PURPOSE_UNSPECIFIED = 'UNSPECIFIED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPurposeAllowableValues()
    {
        return [
            self::PURPOSE_MOBILE,
self::PURPOSE_HOME,
self::PURPOSE_WORK,
self::PURPOSE_OTHER,
self::PURPOSE_INTERNATIONAL,
self::PURPOSE_UNSPECIFIED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_preferred'] = isset($data['is_preferred']) ? $data['is_preferred'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['area_code'] = isset($data['area_code']) ? $data['area_code'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['extension'] = isset($data['extension']) ? $data['extension'] : null;
        $this->container['full_number'] = isset($data['full_number']) ? $data['full_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['purpose'] === null) {
            $invalidProperties[] = "'purpose' can't be null";
        }
        $allowedValues = $this->getPurposeAllowableValues();
        if (!in_array($this->container['purpose'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'purpose', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['full_number'] === null) {
            $invalidProperties[] = "'full_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['purpose'] === null) {
            return false;
        }
        $allowedValues = $this->getPurposeAllowableValues();
        if (!in_array($this->container['purpose'], $allowedValues)) {
            return false;
        }
        if ($this->container['number'] === null) {
            return false;
        }
        if ($this->container['full_number'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets is_preferred
     *
     * @return bool
     */
    public function getIsPreferred()
    {
        return $this->container['is_preferred'];
    }

    /**
     * Sets is_preferred
     *
     * @param bool $is_preferred Required to be true for one and only one entry to indicate the preferred phone number.  Assumed to be 'false' if not present
     *
     * @return $this
     */
    public function setIsPreferred($is_preferred)
    {
        $this->container['is_preferred'] = $is_preferred;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string $purpose The purpose of the number as specified by the customer
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $allowedValues = $this->getPurposeAllowableValues();
        if (!in_array($purpose, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'purpose', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code If absent, assumed to be Australia (+61). The + should be included
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets area_code
     *
     * @return string
     */
    public function getAreaCode()
    {
        return $this->container['area_code'];
    }

    /**
     * Sets area_code
     *
     * @param string $area_code Required for non Mobile Phones, if field is present and refers to Australian code - the leading 0 should be omitted.
     *
     * @return $this
     */
    public function setAreaCode($area_code)
    {
        $this->container['area_code'] = $area_code;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number The actual phone number, with leading zeros as appropriate
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets extension
     *
     * @return string
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     *
     * @param string $extension An extension number (if applicable)
     *
     * @return $this
     */
    public function setExtension($extension)
    {
        $this->container['extension'] = $extension;

        return $this;
    }

    /**
     * Gets full_number
     *
     * @return string
     */
    public function getFullNumber()
    {
        return $this->container['full_number'];
    }

    /**
     * Sets full_number
     *
     * @param string $full_number Fully formatted phone number with country code, area code, number and extension incorporated. Formatted according to section 5.1.4. of RFC 3966
     *
     * @return $this
     */
    public function setFullNumber($full_number)
    {
        $this->container['full_number'] = $full_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
