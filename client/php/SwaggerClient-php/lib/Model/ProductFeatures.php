<?php
/**
 * ProductFeatures
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Consumer Data Standards
 *
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
* OpenAPI spec version: 1-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProductFeatures Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductFeatures implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductFeatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'feature_type' => 'string',
'additional_value' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'feature_type' => null,
'additional_value' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'feature_type' => 'featureType',
'additional_value' => 'additionalValue'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'feature_type' => 'setFeatureType',
'additional_value' => 'setAdditionalValue'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'feature_type' => 'getFeatureType',
'additional_value' => 'getAdditionalValue'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FEATURE_TYPE_CARD_ACCESS = 'CARD_ACCESS';
const FEATURE_TYPE_ADDITIONAL_CARDS = 'ADDITIONAL_CARDS';
const FEATURE_TYPE_UNLIMITED_TXNS = 'UNLIMITED_TXNS';
const FEATURE_TYPE_FREE_TXNS = 'FREE_TXNS';
const FEATURE_TYPE_FREE_TXNS_ALLOWANCE = 'FREE_TXNS_ALLOWANCE';
const FEATURE_TYPE_LOYALTY_PROGRAM = 'LOYALTY_PROGRAM';
const FEATURE_TYPE_OFFSET = 'OFFSET';
const FEATURE_TYPE_OVERDRAFT = 'OVERDRAFT';
const FEATURE_TYPE_REDRAW = 'REDRAW';
const FEATURE_TYPE_INSURANCE = 'INSURANCE';
const FEATURE_TYPE_BALANCE_TRANSFERS = 'BALANCE_TRANSFERS';
const FEATURE_TYPE_INTEREST_FREE = 'INTEREST_FREE';
const FEATURE_TYPE_INTEREST_FREE_TRANSFERS = 'INTEREST_FREE_TRANSFERS';
const FEATURE_TYPE_DIGITAL_WALLET = 'DIGITAL_WALLET';
const FEATURE_TYPE_DIGITAL_BANKING = 'DIGITAL_BANKING';
const FEATURE_TYPE_NPP_PAYID = 'NPP_PAYID';
const FEATURE_TYPE_NPP_ENABLED = 'NPP_ENABLED';
const FEATURE_TYPE_DONATE_INTEREST = 'DONATE_INTEREST';
const FEATURE_TYPE_BILL_PAYMENT = 'BILL_PAYMENT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeatureTypeAllowableValues()
    {
        return [
            self::FEATURE_TYPE_CARD_ACCESS,
self::FEATURE_TYPE_ADDITIONAL_CARDS,
self::FEATURE_TYPE_UNLIMITED_TXNS,
self::FEATURE_TYPE_FREE_TXNS,
self::FEATURE_TYPE_FREE_TXNS_ALLOWANCE,
self::FEATURE_TYPE_LOYALTY_PROGRAM,
self::FEATURE_TYPE_OFFSET,
self::FEATURE_TYPE_OVERDRAFT,
self::FEATURE_TYPE_REDRAW,
self::FEATURE_TYPE_INSURANCE,
self::FEATURE_TYPE_BALANCE_TRANSFERS,
self::FEATURE_TYPE_INTEREST_FREE,
self::FEATURE_TYPE_INTEREST_FREE_TRANSFERS,
self::FEATURE_TYPE_DIGITAL_WALLET,
self::FEATURE_TYPE_DIGITAL_BANKING,
self::FEATURE_TYPE_NPP_PAYID,
self::FEATURE_TYPE_NPP_ENABLED,
self::FEATURE_TYPE_DONATE_INTEREST,
self::FEATURE_TYPE_BILL_PAYMENT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['feature_type'] = isset($data['feature_type']) ? $data['feature_type'] : null;
        $this->container['additional_value'] = isset($data['additional_value']) ? $data['additional_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['feature_type'] === null) {
            $invalidProperties[] = "'feature_type' can't be null";
        }
        $allowedValues = $this->getFeatureTypeAllowableValues();
        if (!in_array($this->container['feature_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'feature_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['feature_type'] === null) {
            return false;
        }
        $allowedValues = $this->getFeatureTypeAllowableValues();
        if (!in_array($this->container['feature_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets feature_type
     *
     * @return string
     */
    public function getFeatureType()
    {
        return $this->container['feature_type'];
    }

    /**
     * Sets feature_type
     *
     * @param string $feature_type The type of feature described
     *
     * @return $this
     */
    public function setFeatureType($feature_type)
    {
        $allowedValues = $this->getFeatureTypeAllowableValues();
        if (!in_array($feature_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'feature_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['feature_type'] = $feature_type;

        return $this;
    }

    /**
     * Gets additional_value
     *
     * @return string
     */
    public function getAdditionalValue()
    {
        return $this->container['additional_value'];
    }

    /**
     * Sets additional_value
     *
     * @param string $additional_value Generic field containing additional information relevant to the featureType specified. Whether mandatory or not is dependent on the value of featureType
     *
     * @return $this
     */
    public function setAdditionalValue($additional_value)
    {
        $this->container['additional_value'] = $additional_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
