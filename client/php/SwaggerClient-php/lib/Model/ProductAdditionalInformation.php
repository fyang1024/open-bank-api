<?php
/**
 * ProductAdditionalInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Consumer Data Standards
 *
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
* OpenAPI spec version: 1-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProductAdditionalInformation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductAdditionalInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Product_additionalInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'overview_uri' => 'string',
'terms_uri' => 'string',
'eligibility_uri' => 'string',
'fees_and_pricing_uri' => 'string',
'bundle_uri' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'overview_uri' => 'URIString',
'terms_uri' => 'URIString',
'eligibility_uri' => 'URIString',
'fees_and_pricing_uri' => 'URIString',
'bundle_uri' => 'URIString'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'overview_uri' => 'overviewUri',
'terms_uri' => 'termsUri',
'eligibility_uri' => 'eligibilityUri',
'fees_and_pricing_uri' => 'feesAndPricingUri',
'bundle_uri' => 'bundleUri'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'overview_uri' => 'setOverviewUri',
'terms_uri' => 'setTermsUri',
'eligibility_uri' => 'setEligibilityUri',
'fees_and_pricing_uri' => 'setFeesAndPricingUri',
'bundle_uri' => 'setBundleUri'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'overview_uri' => 'getOverviewUri',
'terms_uri' => 'getTermsUri',
'eligibility_uri' => 'getEligibilityUri',
'fees_and_pricing_uri' => 'getFeesAndPricingUri',
'bundle_uri' => 'getBundleUri'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['overview_uri'] = isset($data['overview_uri']) ? $data['overview_uri'] : null;
        $this->container['terms_uri'] = isset($data['terms_uri']) ? $data['terms_uri'] : null;
        $this->container['eligibility_uri'] = isset($data['eligibility_uri']) ? $data['eligibility_uri'] : null;
        $this->container['fees_and_pricing_uri'] = isset($data['fees_and_pricing_uri']) ? $data['fees_and_pricing_uri'] : null;
        $this->container['bundle_uri'] = isset($data['bundle_uri']) ? $data['bundle_uri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets overview_uri
     *
     * @return string
     */
    public function getOverviewUri()
    {
        return $this->container['overview_uri'];
    }

    /**
     * Sets overview_uri
     *
     * @param string $overview_uri General overview of the product
     *
     * @return $this
     */
    public function setOverviewUri($overview_uri)
    {
        $this->container['overview_uri'] = $overview_uri;

        return $this;
    }

    /**
     * Gets terms_uri
     *
     * @return string
     */
    public function getTermsUri()
    {
        return $this->container['terms_uri'];
    }

    /**
     * Sets terms_uri
     *
     * @param string $terms_uri Terms and conditions for the product
     *
     * @return $this
     */
    public function setTermsUri($terms_uri)
    {
        $this->container['terms_uri'] = $terms_uri;

        return $this;
    }

    /**
     * Gets eligibility_uri
     *
     * @return string
     */
    public function getEligibilityUri()
    {
        return $this->container['eligibility_uri'];
    }

    /**
     * Sets eligibility_uri
     *
     * @param string $eligibility_uri Eligibility rules and criteria for the product
     *
     * @return $this
     */
    public function setEligibilityUri($eligibility_uri)
    {
        $this->container['eligibility_uri'] = $eligibility_uri;

        return $this;
    }

    /**
     * Gets fees_and_pricing_uri
     *
     * @return string
     */
    public function getFeesAndPricingUri()
    {
        return $this->container['fees_and_pricing_uri'];
    }

    /**
     * Sets fees_and_pricing_uri
     *
     * @param string $fees_and_pricing_uri Description of fees, pricing, discounts, exemptions and bonuses for the product
     *
     * @return $this
     */
    public function setFeesAndPricingUri($fees_and_pricing_uri)
    {
        $this->container['fees_and_pricing_uri'] = $fees_and_pricing_uri;

        return $this;
    }

    /**
     * Gets bundle_uri
     *
     * @return string
     */
    public function getBundleUri()
    {
        return $this->container['bundle_uri'];
    }

    /**
     * Sets bundle_uri
     *
     * @param string $bundle_uri Description of a bundle that this product can be part of
     *
     * @return $this
     */
    public function setBundleUri($bundle_uri)
    {
        $this->container['bundle_uri'] = $bundle_uri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
