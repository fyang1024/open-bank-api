<?php
/**
 * DomesticPayee
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Consumer Data Standards
 *
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
* OpenAPI spec version: 1-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomesticPayee Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomesticPayee implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomesticPayee';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payee_account_u_type' => 'string',
'account' => '\Swagger\Client\Model\DomesticPayeeAccount',
'card' => '\Swagger\Client\Model\DomesticPayeeCard',
'pay_id' => '\Swagger\Client\Model\DomesticPayeePayId'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payee_account_u_type' => null,
'account' => null,
'card' => null,
'pay_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payee_account_u_type' => 'payeeAccountUType',
'account' => 'account',
'card' => 'card',
'pay_id' => 'payId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payee_account_u_type' => 'setPayeeAccountUType',
'account' => 'setAccount',
'card' => 'setCard',
'pay_id' => 'setPayId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payee_account_u_type' => 'getPayeeAccountUType',
'account' => 'getAccount',
'card' => 'getCard',
'pay_id' => 'getPayId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYEE_ACCOUNT_U_TYPE_ACCOUNT = 'account';
const PAYEE_ACCOUNT_U_TYPE_CARD = 'card';
const PAYEE_ACCOUNT_U_TYPE_PAY_ID = 'payId';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayeeAccountUTypeAllowableValues()
    {
        return [
            self::PAYEE_ACCOUNT_U_TYPE_ACCOUNT,
self::PAYEE_ACCOUNT_U_TYPE_CARD,
self::PAYEE_ACCOUNT_U_TYPE_PAY_ID,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payee_account_u_type'] = isset($data['payee_account_u_type']) ? $data['payee_account_u_type'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['card'] = isset($data['card']) ? $data['card'] : null;
        $this->container['pay_id'] = isset($data['pay_id']) ? $data['pay_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payee_account_u_type'] === null) {
            $invalidProperties[] = "'payee_account_u_type' can't be null";
        }
        $allowedValues = $this->getPayeeAccountUTypeAllowableValues();
        if (!in_array($this->container['payee_account_u_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payee_account_u_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['payee_account_u_type'] === null) {
            return false;
        }
        $allowedValues = $this->getPayeeAccountUTypeAllowableValues();
        if (!in_array($this->container['payee_account_u_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets payee_account_u_type
     *
     * @return string
     */
    public function getPayeeAccountUType()
    {
        return $this->container['payee_account_u_type'];
    }

    /**
     * Sets payee_account_u_type
     *
     * @param string $payee_account_u_type Type of account object included. Valid values are: { payeeAccountUType - - account A standard Australian account defined by BSB/Account Number payId A PayID recognised by NPP
     *
     * @return $this
     */
    public function setPayeeAccountUType($payee_account_u_type)
    {
        $allowedValues = $this->getPayeeAccountUTypeAllowableValues();
        if (!in_array($payee_account_u_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payee_account_u_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payee_account_u_type'] = $payee_account_u_type;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \Swagger\Client\Model\DomesticPayeeAccount
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Swagger\Client\Model\DomesticPayeeAccount $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets card
     *
     * @return \Swagger\Client\Model\DomesticPayeeCard
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param \Swagger\Client\Model\DomesticPayeeCard $card card
     *
     * @return $this
     */
    public function setCard($card)
    {
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets pay_id
     *
     * @return \Swagger\Client\Model\DomesticPayeePayId
     */
    public function getPayId()
    {
        return $this->container['pay_id'];
    }

    /**
     * Sets pay_id
     *
     * @param \Swagger\Client\Model\DomesticPayeePayId $pay_id pay_id
     *
     * @return $this
     */
    public function setPayId($pay_id)
    {
        $this->container['pay_id'] = $pay_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
