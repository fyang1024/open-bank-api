<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Consumer Data Standards
 *
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
* OpenAPI spec version: 1-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
'transaction_id' => 'string',
'is_detail_available' => 'bool',
'type' => 'string',
'status' => 'string',
'description' => 'string',
'posting_date_time' => 'string',
'value_date_time' => 'string',
'execution_date_time' => 'string',
'amount' => 'string',
'currency' => 'string',
'reference' => 'string',
'merchant_name' => 'string',
'merchant_category_code' => 'string',
'biller_code' => 'string',
'biller_name' => 'string',
'crn' => 'string',
'apca_number' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'ASCIIString',
'transaction_id' => 'ASCIIString',
'is_detail_available' => null,
'type' => null,
'status' => null,
'description' => null,
'posting_date_time' => 'DateTimeString',
'value_date_time' => 'DateTimeString',
'execution_date_time' => 'DateTimeString',
'amount' => 'AmountString',
'currency' => 'CurrencyString',
'reference' => null,
'merchant_name' => null,
'merchant_category_code' => null,
'biller_code' => null,
'biller_name' => null,
'crn' => null,
'apca_number' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
'transaction_id' => 'transactionId',
'is_detail_available' => 'isDetailAvailable',
'type' => 'type',
'status' => 'status',
'description' => 'description',
'posting_date_time' => 'postingDateTime',
'value_date_time' => 'valueDateTime',
'execution_date_time' => 'executionDateTime',
'amount' => 'amount',
'currency' => 'currency',
'reference' => 'reference',
'merchant_name' => 'merchantName',
'merchant_category_code' => 'merchantCategoryCode',
'biller_code' => 'billerCode',
'biller_name' => 'billerName',
'crn' => 'crn',
'apca_number' => 'apcaNumber'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
'transaction_id' => 'setTransactionId',
'is_detail_available' => 'setIsDetailAvailable',
'type' => 'setType',
'status' => 'setStatus',
'description' => 'setDescription',
'posting_date_time' => 'setPostingDateTime',
'value_date_time' => 'setValueDateTime',
'execution_date_time' => 'setExecutionDateTime',
'amount' => 'setAmount',
'currency' => 'setCurrency',
'reference' => 'setReference',
'merchant_name' => 'setMerchantName',
'merchant_category_code' => 'setMerchantCategoryCode',
'biller_code' => 'setBillerCode',
'biller_name' => 'setBillerName',
'crn' => 'setCrn',
'apca_number' => 'setApcaNumber'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
'transaction_id' => 'getTransactionId',
'is_detail_available' => 'getIsDetailAvailable',
'type' => 'getType',
'status' => 'getStatus',
'description' => 'getDescription',
'posting_date_time' => 'getPostingDateTime',
'value_date_time' => 'getValueDateTime',
'execution_date_time' => 'getExecutionDateTime',
'amount' => 'getAmount',
'currency' => 'getCurrency',
'reference' => 'getReference',
'merchant_name' => 'getMerchantName',
'merchant_category_code' => 'getMerchantCategoryCode',
'biller_code' => 'getBillerCode',
'biller_name' => 'getBillerName',
'crn' => 'getCrn',
'apca_number' => 'getApcaNumber'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_FEE = 'FEE';
const TYPE_INTEREST_CHARGED = 'INTEREST_CHARGED';
const TYPE_INTEREST_PAID = 'INTEREST_PAID';
const TYPE_TRANSFER_OUTGOING = 'TRANSFER_OUTGOING';
const TYPE_TRANSFER_INCOMING = 'TRANSFER_INCOMING';
const TYPE_PAYMENT = 'PAYMENT';
const TYPE_OTHER = 'OTHER';
const STATUS_PENDING = 'PENDING';
const STATUS_POSTED = 'POSTED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FEE,
self::TYPE_INTEREST_CHARGED,
self::TYPE_INTEREST_PAID,
self::TYPE_TRANSFER_OUTGOING,
self::TYPE_TRANSFER_INCOMING,
self::TYPE_PAYMENT,
self::TYPE_OTHER,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
self::STATUS_POSTED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['is_detail_available'] = isset($data['is_detail_available']) ? $data['is_detail_available'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['posting_date_time'] = isset($data['posting_date_time']) ? $data['posting_date_time'] : null;
        $this->container['value_date_time'] = isset($data['value_date_time']) ? $data['value_date_time'] : null;
        $this->container['execution_date_time'] = isset($data['execution_date_time']) ? $data['execution_date_time'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['merchant_name'] = isset($data['merchant_name']) ? $data['merchant_name'] : null;
        $this->container['merchant_category_code'] = isset($data['merchant_category_code']) ? $data['merchant_category_code'] : null;
        $this->container['biller_code'] = isset($data['biller_code']) ? $data['biller_code'] : null;
        $this->container['biller_name'] = isset($data['biller_name']) ? $data['biller_name'] : null;
        $this->container['crn'] = isset($data['crn']) ? $data['crn'] : null;
        $this->container['apca_number'] = isset($data['apca_number']) ? $data['apca_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['is_detail_available'] === null) {
            $invalidProperties[] = "'is_detail_available' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['account_id'] === null) {
            return false;
        }
        if ($this->container['is_detail_available'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['reference'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id A unique ID of the account adhering to the standards for ID permanence
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id A unique ID of the transaction adhering to the standards for ID permanence. This is mandatory (through hashing if necessary) unless there are specific and justifiable technical reasons why a transaction cannot be uniquely identified for a particular account type
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets is_detail_available
     *
     * @return bool
     */
    public function getIsDetailAvailable()
    {
        return $this->container['is_detail_available'];
    }

    /**
     * Sets is_detail_available
     *
     * @param bool $is_detail_available True if extended information is available using the transaction detail end point. False if extended data is not available
     *
     * @return $this
     */
    public function setIsDetailAvailable($is_detail_available)
    {
        $this->container['is_detail_available'] = $is_detail_available;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the transaction
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of the transaction whether pending or posted.  Note that there is currently no provision in the standards to gaurantee the ability to correlate a pending transaction with an associated posted transaction
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The transaction description as applied by the financial institution
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets posting_date_time
     *
     * @return string
     */
    public function getPostingDateTime()
    {
        return $this->container['posting_date_time'];
    }

    /**
     * Sets posting_date_time
     *
     * @param string $posting_date_time The time the transaction was posted. This field is mandatory if the transaction has status POSTED. This is the time that appears on a standard statement
     *
     * @return $this
     */
    public function setPostingDateTime($posting_date_time)
    {
        $this->container['posting_date_time'] = $posting_date_time;

        return $this;
    }

    /**
     * Gets value_date_time
     *
     * @return string
     */
    public function getValueDateTime()
    {
        return $this->container['value_date_time'];
    }

    /**
     * Sets value_date_time
     *
     * @param string $value_date_time Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry
     *
     * @return $this
     */
    public function setValueDateTime($value_date_time)
    {
        $this->container['value_date_time'] = $value_date_time;

        return $this;
    }

    /**
     * Gets execution_date_time
     *
     * @return string
     */
    public function getExecutionDateTime()
    {
        return $this->container['execution_date_time'];
    }

    /**
     * Sets execution_date_time
     *
     * @param string $execution_date_time The time the transaction was executed by the originating customer, if available
     *
     * @return $this
     */
    public function setExecutionDateTime($execution_date_time)
    {
        $this->container['execution_date_time'] = $execution_date_time;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount The value of the transaction. Negative values mean money was outgoing from the account
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The currency for the transaction amount. AUD assumed if not present
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference The reference for the transaction provided by the originating institution.  Empty string if no data provided
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets merchant_name
     *
     * @return string
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     *
     * @param string $merchant_name Name of the merchant for an outgoing payment to a merchant
     *
     * @return $this
     */
    public function setMerchantName($merchant_name)
    {
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets merchant_category_code
     *
     * @return string
     */
    public function getMerchantCategoryCode()
    {
        return $this->container['merchant_category_code'];
    }

    /**
     * Sets merchant_category_code
     *
     * @param string $merchant_category_code The merchant category code (or MCC) for an outgoing payment to a merchant
     *
     * @return $this
     */
    public function setMerchantCategoryCode($merchant_category_code)
    {
        $this->container['merchant_category_code'] = $merchant_category_code;

        return $this;
    }

    /**
     * Gets biller_code
     *
     * @return string
     */
    public function getBillerCode()
    {
        return $this->container['biller_code'];
    }

    /**
     * Sets biller_code
     *
     * @param string $biller_code BPay Biller Code for the transaction (if available)
     *
     * @return $this
     */
    public function setBillerCode($biller_code)
    {
        $this->container['biller_code'] = $biller_code;

        return $this;
    }

    /**
     * Gets biller_name
     *
     * @return string
     */
    public function getBillerName()
    {
        return $this->container['biller_name'];
    }

    /**
     * Sets biller_name
     *
     * @param string $biller_name Name of the BPay biller for the transaction (if available)
     *
     * @return $this
     */
    public function setBillerName($biller_name)
    {
        $this->container['biller_name'] = $biller_name;

        return $this;
    }

    /**
     * Gets crn
     *
     * @return string
     */
    public function getCrn()
    {
        return $this->container['crn'];
    }

    /**
     * Sets crn
     *
     * @param string $crn BPay CRN for the transaction (if available)
     *
     * @return $this
     */
    public function setCrn($crn)
    {
        $this->container['crn'] = $crn;

        return $this;
    }

    /**
     * Gets apca_number
     *
     * @return string
     */
    public function getApcaNumber()
    {
        return $this->container['apca_number'];
    }

    /**
     * Sets apca_number
     *
     * @param string $apca_number 6 Digit APCA number for the initiating institution
     *
     * @return $this
     */
    public function setApcaNumber($apca_number)
    {
        $this->container['apca_number'] = $apca_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
