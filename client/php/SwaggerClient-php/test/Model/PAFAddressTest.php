<?php
/**
 * PAFAddressTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Consumer Data Standards
 *
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
* OpenAPI spec version: 1-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace Swagger\Client;

/**
 * PAFAddressTest Class Doc Comment
 *
 * @category    Class
 * @description Australian address formatted according to the file format defined by the [PAF file format](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf)
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PAFAddressTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "PAFAddress"
     */
    public function testPAFAddress()
    {
    }

    /**
     * Test attribute "dpid"
     */
    public function testPropertyDpid()
    {
    }

    /**
     * Test attribute "thoroughfare_number1"
     */
    public function testPropertyThoroughfareNumber1()
    {
    }

    /**
     * Test attribute "thoroughfare_number1_suffix"
     */
    public function testPropertyThoroughfareNumber1Suffix()
    {
    }

    /**
     * Test attribute "thoroughfare_number2"
     */
    public function testPropertyThoroughfareNumber2()
    {
    }

    /**
     * Test attribute "thoroughfare_number2_suffix"
     */
    public function testPropertyThoroughfareNumber2Suffix()
    {
    }

    /**
     * Test attribute "flat_unit_number"
     */
    public function testPropertyFlatUnitNumber()
    {
    }

    /**
     * Test attribute "floor_level_number"
     */
    public function testPropertyFloorLevelNumber()
    {
    }

    /**
     * Test attribute "lot_number"
     */
    public function testPropertyLotNumber()
    {
    }

    /**
     * Test attribute "building_name1"
     */
    public function testPropertyBuildingName1()
    {
    }

    /**
     * Test attribute "building_name2"
     */
    public function testPropertyBuildingName2()
    {
    }

    /**
     * Test attribute "street_name"
     */
    public function testPropertyStreetName()
    {
    }

    /**
     * Test attribute "street_type"
     */
    public function testPropertyStreetType()
    {
    }

    /**
     * Test attribute "street_suffix"
     */
    public function testPropertyStreetSuffix()
    {
    }

    /**
     * Test attribute "postal_delivery_type"
     */
    public function testPropertyPostalDeliveryType()
    {
    }

    /**
     * Test attribute "postal_delivery_number"
     */
    public function testPropertyPostalDeliveryNumber()
    {
    }

    /**
     * Test attribute "postal_delivery_number_prefix"
     */
    public function testPropertyPostalDeliveryNumberPrefix()
    {
    }

    /**
     * Test attribute "postal_delivery_number_suffix"
     */
    public function testPropertyPostalDeliveryNumberSuffix()
    {
    }

    /**
     * Test attribute "locality_name"
     */
    public function testPropertyLocalityName()
    {
    }

    /**
     * Test attribute "postcode"
     */
    public function testPropertyPostcode()
    {
    }

    /**
     * Test attribute "state"
     */
    public function testPropertyState()
    {
    }
}
