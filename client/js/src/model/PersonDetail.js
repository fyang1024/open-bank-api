/**
 * Consumer Data Standards
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1-oas3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EmailAddress', 'model/Person', 'model/PhoneNumber', 'model/PhysicalAddressWithPurpose'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./EmailAddress'), require('./Person'), require('./PhoneNumber'), require('./PhysicalAddressWithPurpose'));
  } else {
    // Browser globals (root is window)
    if (!root.ConsumerDataStandards) {
      root.ConsumerDataStandards = {};
    }
    root.ConsumerDataStandards.PersonDetail = factory(root.ConsumerDataStandards.ApiClient, root.ConsumerDataStandards.EmailAddress, root.ConsumerDataStandards.Person, root.ConsumerDataStandards.PhoneNumber, root.ConsumerDataStandards.PhysicalAddressWithPurpose);
  }
}(this, function(ApiClient, EmailAddress, Person, PhoneNumber, PhysicalAddressWithPurpose) {
  'use strict';



  /**
   * The PersonDetail model module.
   * @module model/PersonDetail
   * @version 1-oas3
   */

  /**
   * Constructs a new <code>PersonDetail</code>.
   * @alias module:model/PersonDetail
   * @class
   * @implements module:model/Person
   * @param phoneNumbers {Array.<module:model/PhoneNumber>} At least one record is required
   * @param emailAddresses {Array.<module:model/EmailAddress>} May be empty
   * @param physicalAddresses {Array.<module:model/PhysicalAddressWithPurpose>} Must contain at least one address. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail
   */
  var exports = function(phoneNumbers, emailAddresses, physicalAddresses) {
    var _this = this;

    Person.call(_this, lastUpdateTime, lastName, middleNames);
    _this['lastUpdateTime'] = lastUpdateTime;
    _this['lastName'] = lastName;
    _this['middleNames'] = middleNames;
    _this['phoneNumbers'] = phoneNumbers;
    _this['emailAddresses'] = emailAddresses;
    _this['physicalAddresses'] = physicalAddresses;
  };

  /**
   * Constructs a <code>PersonDetail</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PersonDetail} obj Optional instance to populate.
   * @return {module:model/PersonDetail} The populated <code>PersonDetail</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      Person.constructFromObject(data, obj);
      if (data.hasOwnProperty('lastUpdateTime')) {
        obj['lastUpdateTime'] = ApiClient.convertToType(data['lastUpdateTime'], 'String');
      }
      if (data.hasOwnProperty('firstName')) {
        obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
      }
      if (data.hasOwnProperty('lastName')) {
        obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
      }
      if (data.hasOwnProperty('middleNames')) {
        obj['middleNames'] = ApiClient.convertToType(data['middleNames'], ['String']);
      }
      if (data.hasOwnProperty('prefix')) {
        obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
      }
      if (data.hasOwnProperty('suffix')) {
        obj['suffix'] = ApiClient.convertToType(data['suffix'], 'String');
      }
      if (data.hasOwnProperty('occupationCode')) {
        obj['occupationCode'] = ApiClient.convertToType(data['occupationCode'], 'String');
      }
      if (data.hasOwnProperty('phoneNumbers')) {
        obj['phoneNumbers'] = ApiClient.convertToType(data['phoneNumbers'], [PhoneNumber]);
      }
      if (data.hasOwnProperty('emailAddresses')) {
        obj['emailAddresses'] = ApiClient.convertToType(data['emailAddresses'], [EmailAddress]);
      }
      if (data.hasOwnProperty('physicalAddresses')) {
        obj['physicalAddresses'] = ApiClient.convertToType(data['physicalAddresses'], [PhysicalAddressWithPurpose]);
      }
    }
    return obj;
  }

  /**
   * The date and time that this record was last updated by the customer.  If no update has occurred then this date should reflect the initial creation date for the data
   * @member {String} lastUpdateTime
   */
  exports.prototype['lastUpdateTime'] = undefined;
  /**
   * For people with single names this field need not be present.  The single name should be in the lastName field
   * @member {String} firstName
   */
  exports.prototype['firstName'] = undefined;
  /**
   * For people with single names the single name should be in this field
   * @member {String} lastName
   */
  exports.prototype['lastName'] = undefined;
  /**
   * Field is mandatory but array may be empty
   * @member {Array.<String>} middleNames
   */
  exports.prototype['middleNames'] = undefined;
  /**
   * Also known as title or salutation.  The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc)
   * @member {String} prefix
   */
  exports.prototype['prefix'] = undefined;
  /**
   * Used for a trailing suffix to the name (e.g. Jr)
   * @member {String} suffix
   */
  exports.prototype['suffix'] = undefined;
  /**
   * Value is a valid [ANZCO v1.2](http://www.abs.gov.au/ANZSCO) Standard Occupation classification.
   * @member {String} occupationCode
   */
  exports.prototype['occupationCode'] = undefined;
  /**
   * At least one record is required
   * @member {Array.<module:model/PhoneNumber>} phoneNumbers
   */
  exports.prototype['phoneNumbers'] = undefined;
  /**
   * May be empty
   * @member {Array.<module:model/EmailAddress>} emailAddresses
   */
  exports.prototype['emailAddresses'] = undefined;
  /**
   * Must contain at least one address. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail
   * @member {Array.<module:model/PhysicalAddressWithPurpose>} physicalAddresses
   */
  exports.prototype['physicalAddresses'] = undefined;

  // Implement Person interface:
  /**
   * The date and time that this record was last updated by the customer.  If no update has occurred then this date should reflect the initial creation date for the data
   * @member {String} lastUpdateTime
   */
exports.prototype['lastUpdateTime'] = undefined;

  /**
   * For people with single names this field need not be present.  The single name should be in the lastName field
   * @member {String} firstName
   */
exports.prototype['firstName'] = undefined;

  /**
   * For people with single names the single name should be in this field
   * @member {String} lastName
   */
exports.prototype['lastName'] = undefined;

  /**
   * Field is mandatory but array may be empty
   * @member {Array.<String>} middleNames
   */
exports.prototype['middleNames'] = undefined;

  /**
   * Also known as title or salutation.  The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc)
   * @member {String} prefix
   */
exports.prototype['prefix'] = undefined;

  /**
   * Used for a trailing suffix to the name (e.g. Jr)
   * @member {String} suffix
   */
exports.prototype['suffix'] = undefined;

  /**
   * Value is a valid [ANZCO v1.2](http://www.abs.gov.au/ANZSCO) Standard Occupation classification.
   * @member {String} occupationCode
   */
exports.prototype['occupationCode'] = undefined;



  return exports;
}));


