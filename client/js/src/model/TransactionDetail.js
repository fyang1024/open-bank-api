/**
 * Consumer Data Standards
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1-oas3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Transaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Transaction'));
  } else {
    // Browser globals (root is window)
    if (!root.ConsumerDataStandards) {
      root.ConsumerDataStandards = {};
    }
    root.ConsumerDataStandards.TransactionDetail = factory(root.ConsumerDataStandards.ApiClient, root.ConsumerDataStandards.Transaction);
  }
}(this, function(ApiClient, Transaction) {
  'use strict';



  /**
   * The TransactionDetail model module.
   * @module model/TransactionDetail
   * @version 1-oas3
   */

  /**
   * Constructs a new <code>TransactionDetail</code>.
   * @alias module:model/TransactionDetail
   * @class
   * @implements module:model/Transaction
   * @param extendedData {Object} 
   */
  var exports = function(extendedData) {
    var _this = this;

    Transaction.call(_this, accountId, isDetailAvailable, type, status, description, reference);
    _this['accountId'] = accountId;
    _this['isDetailAvailable'] = isDetailAvailable;
    _this['type'] = type;
    _this['status'] = status;
    _this['description'] = description;
    _this['reference'] = reference;
    _this['extendedData'] = extendedData;
  };

  /**
   * Constructs a <code>TransactionDetail</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TransactionDetail} obj Optional instance to populate.
   * @return {module:model/TransactionDetail} The populated <code>TransactionDetail</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      Transaction.constructFromObject(data, obj);
      if (data.hasOwnProperty('accountId')) {
        obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
      }
      if (data.hasOwnProperty('transactionId')) {
        obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
      }
      if (data.hasOwnProperty('isDetailAvailable')) {
        obj['isDetailAvailable'] = ApiClient.convertToType(data['isDetailAvailable'], 'Boolean');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('postingDateTime')) {
        obj['postingDateTime'] = ApiClient.convertToType(data['postingDateTime'], 'String');
      }
      if (data.hasOwnProperty('valueDateTime')) {
        obj['valueDateTime'] = ApiClient.convertToType(data['valueDateTime'], 'String');
      }
      if (data.hasOwnProperty('executionDateTime')) {
        obj['executionDateTime'] = ApiClient.convertToType(data['executionDateTime'], 'String');
      }
      if (data.hasOwnProperty('amount')) {
        obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
      }
      if (data.hasOwnProperty('reference')) {
        obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
      }
      if (data.hasOwnProperty('merchantName')) {
        obj['merchantName'] = ApiClient.convertToType(data['merchantName'], 'String');
      }
      if (data.hasOwnProperty('merchantCategoryCode')) {
        obj['merchantCategoryCode'] = ApiClient.convertToType(data['merchantCategoryCode'], 'String');
      }
      if (data.hasOwnProperty('billerCode')) {
        obj['billerCode'] = ApiClient.convertToType(data['billerCode'], 'String');
      }
      if (data.hasOwnProperty('billerName')) {
        obj['billerName'] = ApiClient.convertToType(data['billerName'], 'String');
      }
      if (data.hasOwnProperty('crn')) {
        obj['crn'] = ApiClient.convertToType(data['crn'], 'String');
      }
      if (data.hasOwnProperty('apcaNumber')) {
        obj['apcaNumber'] = ApiClient.convertToType(data['apcaNumber'], 'String');
      }
      if (data.hasOwnProperty('extendedData')) {
        obj['extendedData'] = ApiClient.convertToType(data['extendedData'], Object);
      }
    }
    return obj;
  }

  /**
   * A unique ID of the account adhering to the standards for ID permanence
   * @member {String} accountId
   */
  exports.prototype['accountId'] = undefined;
  /**
   * A unique ID of the transaction adhering to the standards for ID permanence. This is mandatory (through hashing if necessary) unless there are specific and justifiable technical reasons why a transaction cannot be uniquely identified for a particular account type
   * @member {String} transactionId
   */
  exports.prototype['transactionId'] = undefined;
  /**
   * True if extended information is available using the transaction detail end point. False if extended data is not available
   * @member {Boolean} isDetailAvailable
   */
  exports.prototype['isDetailAvailable'] = undefined;
  /**
   * The type of the transaction
   * @member {module:model/TransactionDetail.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Status of the transaction whether pending or posted.  Note that there is currently no provision in the standards to gaurantee the ability to correlate a pending transaction with an associated posted transaction
   * @member {module:model/TransactionDetail.StatusEnum} status
   */
  exports.prototype['status'] = undefined;
  /**
   * The transaction description as applied by the financial institution
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * The time the transaction was posted. This field is mandatory if the transaction has status POSTED. This is the time that appears on a standard statement
   * @member {String} postingDateTime
   */
  exports.prototype['postingDateTime'] = undefined;
  /**
   * Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry
   * @member {String} valueDateTime
   */
  exports.prototype['valueDateTime'] = undefined;
  /**
   * The time the transaction was executed by the originating customer, if available
   * @member {String} executionDateTime
   */
  exports.prototype['executionDateTime'] = undefined;
  /**
   * The value of the transaction. Negative values mean money was outgoing from the account
   * @member {String} amount
   */
  exports.prototype['amount'] = undefined;
  /**
   * The currency for the transaction amount. AUD assumed if not present
   * @member {String} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * The reference for the transaction provided by the originating institution.  Empty string if no data provided
   * @member {String} reference
   */
  exports.prototype['reference'] = undefined;
  /**
   * Name of the merchant for an outgoing payment to a merchant
   * @member {String} merchantName
   */
  exports.prototype['merchantName'] = undefined;
  /**
   * The merchant category code (or MCC) for an outgoing payment to a merchant
   * @member {String} merchantCategoryCode
   */
  exports.prototype['merchantCategoryCode'] = undefined;
  /**
   * BPay Biller Code for the transaction (if available)
   * @member {String} billerCode
   */
  exports.prototype['billerCode'] = undefined;
  /**
   * Name of the BPay biller for the transaction (if available)
   * @member {String} billerName
   */
  exports.prototype['billerName'] = undefined;
  /**
   * BPay CRN for the transaction (if available)
   * @member {String} crn
   */
  exports.prototype['crn'] = undefined;
  /**
   * 6 Digit APCA number for the initiating institution
   * @member {String} apcaNumber
   */
  exports.prototype['apcaNumber'] = undefined;
  /**
   * @member {Object} extendedData
   */
  exports.prototype['extendedData'] = undefined;

  // Implement Transaction interface:
  /**
   * A unique ID of the account adhering to the standards for ID permanence
   * @member {String} accountId
   */
exports.prototype['accountId'] = undefined;

  /**
   * A unique ID of the transaction adhering to the standards for ID permanence. This is mandatory (through hashing if necessary) unless there are specific and justifiable technical reasons why a transaction cannot be uniquely identified for a particular account type
   * @member {String} transactionId
   */
exports.prototype['transactionId'] = undefined;

  /**
   * True if extended information is available using the transaction detail end point. False if extended data is not available
   * @member {Boolean} isDetailAvailable
   */
exports.prototype['isDetailAvailable'] = undefined;

  /**
   * The type of the transaction
   * @member {module:model/Transaction.TypeEnum} type
   */
exports.prototype['type'] = undefined;

  /**
   * Status of the transaction whether pending or posted.  Note that there is currently no provision in the standards to gaurantee the ability to correlate a pending transaction with an associated posted transaction
   * @member {module:model/Transaction.StatusEnum} status
   */
exports.prototype['status'] = undefined;

  /**
   * The transaction description as applied by the financial institution
   * @member {String} description
   */
exports.prototype['description'] = undefined;

  /**
   * The time the transaction was posted. This field is mandatory if the transaction has status POSTED. This is the time that appears on a standard statement
   * @member {String} postingDateTime
   */
exports.prototype['postingDateTime'] = undefined;

  /**
   * Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry
   * @member {String} valueDateTime
   */
exports.prototype['valueDateTime'] = undefined;

  /**
   * The time the transaction was executed by the originating customer, if available
   * @member {String} executionDateTime
   */
exports.prototype['executionDateTime'] = undefined;

  /**
   * The value of the transaction. Negative values mean money was outgoing from the account
   * @member {String} amount
   */
exports.prototype['amount'] = undefined;

  /**
   * The currency for the transaction amount. AUD assumed if not present
   * @member {String} currency
   */
exports.prototype['currency'] = undefined;

  /**
   * The reference for the transaction provided by the originating institution.  Empty string if no data provided
   * @member {String} reference
   */
exports.prototype['reference'] = undefined;

  /**
   * Name of the merchant for an outgoing payment to a merchant
   * @member {String} merchantName
   */
exports.prototype['merchantName'] = undefined;

  /**
   * The merchant category code (or MCC) for an outgoing payment to a merchant
   * @member {String} merchantCategoryCode
   */
exports.prototype['merchantCategoryCode'] = undefined;

  /**
   * BPay Biller Code for the transaction (if available)
   * @member {String} billerCode
   */
exports.prototype['billerCode'] = undefined;

  /**
   * Name of the BPay biller for the transaction (if available)
   * @member {String} billerName
   */
exports.prototype['billerName'] = undefined;

  /**
   * BPay CRN for the transaction (if available)
   * @member {String} crn
   */
exports.prototype['crn'] = undefined;

  /**
   * 6 Digit APCA number for the initiating institution
   * @member {String} apcaNumber
   */
exports.prototype['apcaNumber'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "FEE"
     * @const
     */
    "FEE": "FEE",
    /**
     * value: "INTEREST_CHARGED"
     * @const
     */
    "INTEREST_CHARGED": "INTEREST_CHARGED",
    /**
     * value: "INTEREST_PAID"
     * @const
     */
    "INTEREST_PAID": "INTEREST_PAID",
    /**
     * value: "TRANSFER_OUTGOING"
     * @const
     */
    "TRANSFER_OUTGOING": "TRANSFER_OUTGOING",
    /**
     * value: "TRANSFER_INCOMING"
     * @const
     */
    "TRANSFER_INCOMING": "TRANSFER_INCOMING",
    /**
     * value: "PAYMENT"
     * @const
     */
    "PAYMENT": "PAYMENT",
    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER"  };

  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",
    /**
     * value: "POSTED"
     * @const
     */
    "POSTED": "POSTED"  };


  return exports;
}));


