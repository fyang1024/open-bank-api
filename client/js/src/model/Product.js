/**
 * Consumer Data Standards
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1-oas3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EnumProductCategory', 'model/ProductAdditionalInformation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./EnumProductCategory'), require('./ProductAdditionalInformation'));
  } else {
    // Browser globals (root is window)
    if (!root.ConsumerDataStandards) {
      root.ConsumerDataStandards = {};
    }
    root.ConsumerDataStandards.Product = factory(root.ConsumerDataStandards.ApiClient, root.ConsumerDataStandards.EnumProductCategory, root.ConsumerDataStandards.ProductAdditionalInformation);
  }
}(this, function(ApiClient, EnumProductCategory, ProductAdditionalInformation) {
  'use strict';



  /**
   * The Product model module.
   * @module model/Product
   * @version 1-oas3
   */

  /**
   * Constructs a new <code>Product</code>.
   * @alias module:model/Product
   * @class
   * @param productId {String} A provider specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines.
   * @param lastUpdated {String} The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)
   * @param productCategory {module:model/EnumProductCategory} 
   * @param name {String} The display name of the product
   * @param description {String} A description of the product
   * @param brand {String} A label of the brand for the product. Able to be used for filtering. For data providers with single brands this value is still required
   * @param isTailored {Boolean} Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable
   */
  var exports = function(productId, lastUpdated, productCategory, name, description, brand, isTailored) {
    var _this = this;

    _this['productId'] = productId;
    _this['lastUpdated'] = lastUpdated;
    _this['productCategory'] = productCategory;
    _this['name'] = name;
    _this['description'] = description;
    _this['brand'] = brand;
    _this['isTailored'] = isTailored;
  };

  /**
   * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Product} obj Optional instance to populate.
   * @return {module:model/Product} The populated <code>Product</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('productId')) {
        obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
      }
      if (data.hasOwnProperty('effectiveFrom')) {
        obj['effectiveFrom'] = ApiClient.convertToType(data['effectiveFrom'], 'String');
      }
      if (data.hasOwnProperty('effectiveTo')) {
        obj['effectiveTo'] = ApiClient.convertToType(data['effectiveTo'], 'String');
      }
      if (data.hasOwnProperty('lastUpdated')) {
        obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'String');
      }
      if (data.hasOwnProperty('productCategory')) {
        obj['productCategory'] = EnumProductCategory.constructFromObject(data['productCategory']);
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('brand')) {
        obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
      }
      if (data.hasOwnProperty('brandName')) {
        obj['brandName'] = ApiClient.convertToType(data['brandName'], 'String');
      }
      if (data.hasOwnProperty('applicationUri')) {
        obj['applicationUri'] = ApiClient.convertToType(data['applicationUri'], 'String');
      }
      if (data.hasOwnProperty('isTailored')) {
        obj['isTailored'] = ApiClient.convertToType(data['isTailored'], 'Boolean');
      }
      if (data.hasOwnProperty('additionalInformation')) {
        obj['additionalInformation'] = ProductAdditionalInformation.constructFromObject(data['additionalInformation']);
      }
    }
    return obj;
  }

  /**
   * A provider specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines.
   * @member {String} productId
   */
  exports.prototype['productId'] = undefined;
  /**
   * The date and time from which this product is effective (ie. is available for origination).  Used to enable the articulation of products to the regime before they are available for customers to originate
   * @member {String} effectiveFrom
   */
  exports.prototype['effectiveFrom'] = undefined;
  /**
   * The date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products
   * @member {String} effectiveTo
   */
  exports.prototype['effectiveTo'] = undefined;
  /**
   * The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)
   * @member {String} lastUpdated
   */
  exports.prototype['lastUpdated'] = undefined;
  /**
   * @member {module:model/EnumProductCategory} productCategory
   */
  exports.prototype['productCategory'] = undefined;
  /**
   * The display name of the product
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * A description of the product
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * A label of the brand for the product. Able to be used for filtering. For data providers with single brands this value is still required
   * @member {String} brand
   */
  exports.prototype['brand'] = undefined;
  /**
   * An optional display name of the brand
   * @member {String} brandName
   */
  exports.prototype['brandName'] = undefined;
  /**
   * A link to the an application web page where this product can be applied for.
   * @member {String} applicationUri
   */
  exports.prototype['applicationUri'] = undefined;
  /**
   * Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable
   * @member {Boolean} isTailored
   */
  exports.prototype['isTailored'] = undefined;
  /**
   * @member {module:model/ProductAdditionalInformation} additionalInformation
   */
  exports.prototype['additionalInformation'] = undefined;



  return exports;
}));


