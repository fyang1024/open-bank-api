/**
 * Consumer Data Standards
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1-oas3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Account', 'model/AccountDepositRates', 'model/AccountFeatures', 'model/AccountFees', 'model/AccountLendingRates', 'model/CreditCardAccount', 'model/EnumProductCategory', 'model/LoanAccount', 'model/PhysicalAddress', 'model/TermDepositAccount'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Account'), require('./AccountDepositRates'), require('./AccountFeatures'), require('./AccountFees'), require('./AccountLendingRates'), require('./CreditCardAccount'), require('./EnumProductCategory'), require('./LoanAccount'), require('./PhysicalAddress'), require('./TermDepositAccount'));
  } else {
    // Browser globals (root is window)
    if (!root.ConsumerDataStandards) {
      root.ConsumerDataStandards = {};
    }
    root.ConsumerDataStandards.AccountDetail = factory(root.ConsumerDataStandards.ApiClient, root.ConsumerDataStandards.Account, root.ConsumerDataStandards.AccountDepositRates, root.ConsumerDataStandards.AccountFeatures, root.ConsumerDataStandards.AccountFees, root.ConsumerDataStandards.AccountLendingRates, root.ConsumerDataStandards.CreditCardAccount, root.ConsumerDataStandards.EnumProductCategory, root.ConsumerDataStandards.LoanAccount, root.ConsumerDataStandards.PhysicalAddress, root.ConsumerDataStandards.TermDepositAccount);
  }
}(this, function(ApiClient, Account, AccountDepositRates, AccountFeatures, AccountFees, AccountLendingRates, CreditCardAccount, EnumProductCategory, LoanAccount, PhysicalAddress, TermDepositAccount) {
  'use strict';



  /**
   * The AccountDetail model module.
   * @module model/AccountDetail
   * @version 1-oas3
   */

  /**
   * Constructs a new <code>AccountDetail</code>.
   * @alias module:model/AccountDetail
   * @class
   * @implements module:model/Account
   */
  var exports = function() {
    var _this = this;

    Account.call(_this, accountId, displayName, maskedNumber, productCategory, productName);
    _this['accountId'] = accountId;
    _this['displayName'] = displayName;
    _this['maskedNumber'] = maskedNumber;
    _this['productCategory'] = productCategory;
    _this['productName'] = productName;
  };

  /**
   * Constructs a <code>AccountDetail</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AccountDetail} obj Optional instance to populate.
   * @return {module:model/AccountDetail} The populated <code>AccountDetail</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      Account.constructFromObject(data, obj);
      if (data.hasOwnProperty('accountId')) {
        obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
      }
      if (data.hasOwnProperty('displayName')) {
        obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
      }
      if (data.hasOwnProperty('nickname')) {
        obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
      }
      if (data.hasOwnProperty('maskedNumber')) {
        obj['maskedNumber'] = ApiClient.convertToType(data['maskedNumber'], 'String');
      }
      if (data.hasOwnProperty('openStatus')) {
        obj['openStatus'] = ApiClient.convertToType(data['openStatus'], 'String');
      }
      if (data.hasOwnProperty('isOwned')) {
        obj['isOwned'] = ApiClient.convertToType(data['isOwned'], 'Boolean');
      }
      if (data.hasOwnProperty('productCategory')) {
        obj['productCategory'] = EnumProductCategory.constructFromObject(data['productCategory']);
      }
      if (data.hasOwnProperty('productName')) {
        obj['productName'] = ApiClient.convertToType(data['productName'], 'String');
      }
      if (data.hasOwnProperty('bsb')) {
        obj['bsb'] = ApiClient.convertToType(data['bsb'], 'String');
      }
      if (data.hasOwnProperty('accountNumber')) {
        obj['accountNumber'] = ApiClient.convertToType(data['accountNumber'], 'String');
      }
      if (data.hasOwnProperty('bundleName')) {
        obj['bundleName'] = ApiClient.convertToType(data['bundleName'], 'String');
      }
      if (data.hasOwnProperty('specificAccountUType')) {
        obj['specificAccountUType'] = ApiClient.convertToType(data['specificAccountUType'], 'String');
      }
      if (data.hasOwnProperty('termDeposit')) {
        obj['termDeposit'] = TermDepositAccount.constructFromObject(data['termDeposit']);
      }
      if (data.hasOwnProperty('creditCard')) {
        obj['creditCard'] = CreditCardAccount.constructFromObject(data['creditCard']);
      }
      if (data.hasOwnProperty('loan')) {
        obj['loan'] = LoanAccount.constructFromObject(data['loan']);
      }
      if (data.hasOwnProperty('features')) {
        obj['features'] = ApiClient.convertToType(data['features'], [AccountFeatures]);
      }
      if (data.hasOwnProperty('fees')) {
        obj['fees'] = ApiClient.convertToType(data['fees'], [AccountFees]);
      }
      if (data.hasOwnProperty('depositRates')) {
        obj['depositRates'] = ApiClient.convertToType(data['depositRates'], [AccountDepositRates]);
      }
      if (data.hasOwnProperty('lendingRates')) {
        obj['lendingRates'] = ApiClient.convertToType(data['lendingRates'], [AccountLendingRates]);
      }
      if (data.hasOwnProperty('address')) {
        obj['address'] = PhysicalAddress.constructFromObject(data['address']);
      }
    }
    return obj;
  }

  /**
   * A unique ID of the account adhering to the standards for ID permanence
   * @member {String} accountId
   */
  exports.prototype['accountId'] = undefined;
  /**
   * The display name of the account. If a customer provided nickname is available that value should be returned
   * @member {String} displayName
   */
  exports.prototype['displayName'] = undefined;
  /**
   * A customer supplied nick name for the account
   * @member {String} nickname
   */
  exports.prototype['nickname'] = undefined;
  /**
   * A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number this should be formatted with each digit masked and the last three digits unmasked
   * @member {String} maskedNumber
   */
  exports.prototype['maskedNumber'] = undefined;
  /**
   * Open or closed status for the account.  If not present then OPEN is assumed
   * @member {module:model/AccountDetail.OpenStatusEnum} openStatus
   * @default 'OPEN'
   */
  exports.prototype['openStatus'] = 'OPEN';
  /**
   * Flag indicating that the customer associated with the authorisation is an owner of the account.  Does not indicate sole ownership, however.  If no present then 'true' is assumed
   * @member {Boolean} isOwned
   * @default true
   */
  exports.prototype['isOwned'] = true;
  /**
   * @member {module:model/EnumProductCategory} productCategory
   */
  exports.prototype['productCategory'] = undefined;
  /**
   * A unique name or identifier for the account class for this account as defined by the account provider.  Not expected to be used for display
   * @member {String} productName
   */
  exports.prototype['productName'] = undefined;
  /**
   * The unmasked BSB for the account.  Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces
   * @member {String} bsb
   */
  exports.prototype['bsb'] = undefined;
  /**
   * The unmasked account number for the account.  Should not be supplied if the account number is a PAN requiring PCI compliance. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces
   * @member {String} accountNumber
   */
  exports.prototype['accountNumber'] = undefined;
  /**
   * Optional field to indicate if this account is part of a bundle that is providing additional benefit for to the customer
   * @member {String} bundleName
   */
  exports.prototype['bundleName'] = undefined;
  /**
   * The type of structure to present account specific fields.
   * @member {module:model/AccountDetail.SpecificAccountUTypeEnum} specificAccountUType
   */
  exports.prototype['specificAccountUType'] = undefined;
  /**
   * @member {module:model/TermDepositAccount} termDeposit
   */
  exports.prototype['termDeposit'] = undefined;
  /**
   * @member {module:model/CreditCardAccount} creditCard
   */
  exports.prototype['creditCard'] = undefined;
  /**
   * @member {module:model/LoanAccount} loan
   */
  exports.prototype['loan'] = undefined;
  /**
   * @member {Array.<module:model/AccountFeatures>} features
   */
  exports.prototype['features'] = undefined;
  /**
   * @member {Array.<module:model/AccountFees>} fees
   */
  exports.prototype['fees'] = undefined;
  /**
   * @member {Array.<module:model/AccountDepositRates>} depositRates
   */
  exports.prototype['depositRates'] = undefined;
  /**
   * @member {Array.<module:model/AccountLendingRates>} lendingRates
   */
  exports.prototype['lendingRates'] = undefined;
  /**
   * @member {module:model/PhysicalAddress} address
   */
  exports.prototype['address'] = undefined;

  // Implement Account interface:
  /**
   * A unique ID of the account adhering to the standards for ID permanence
   * @member {String} accountId
   */
exports.prototype['accountId'] = undefined;

  /**
   * The display name of the account. If a customer provided nickname is available that value should be returned
   * @member {String} displayName
   */
exports.prototype['displayName'] = undefined;

  /**
   * A customer supplied nick name for the account
   * @member {String} nickname
   */
exports.prototype['nickname'] = undefined;

  /**
   * A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number this should be formatted with each digit masked and the last three digits unmasked
   * @member {String} maskedNumber
   */
exports.prototype['maskedNumber'] = undefined;

  /**
   * Open or closed status for the account.  If not present then OPEN is assumed
   * @member {module:model/Account.OpenStatusEnum} openStatus
   * @default 'OPEN'
   */
exports.prototype['openStatus'] = 'OPEN';

  /**
   * Flag indicating that the customer associated with the authorisation is an owner of the account.  Does not indicate sole ownership, however.  If no present then 'true' is assumed
   * @member {Boolean} isOwned
   * @default true
   */
exports.prototype['isOwned'] = true;

  /**
   * @member {module:model/EnumProductCategory} productCategory
   */
exports.prototype['productCategory'] = undefined;

  /**
   * A unique name or identifier for the account class for this account as defined by the account provider.  Not expected to be used for display
   * @member {String} productName
   */
exports.prototype['productName'] = undefined;


  /**
   * Allowed values for the <code>openStatus</code> property.
   * @enum {String}
   * @readonly
   */
  exports.OpenStatusEnum = {
    /**
     * value: "OPEN"
     * @const
     */
    "OPEN": "OPEN",
    /**
     * value: "CLOSED"
     * @const
     */
    "CLOSED": "CLOSED"  };

  /**
   * Allowed values for the <code>specificAccountUType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SpecificAccountUTypeEnum = {
    /**
     * value: "termDeposit"
     * @const
     */
    "termDeposit": "termDeposit",
    /**
     * value: "creditCard"
     * @const
     */
    "creditCard": "creditCard",
    /**
     * value: "loan"
     * @const
     */
    "loan": "loan"  };


  return exports;
}));


