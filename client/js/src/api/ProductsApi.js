/**
 * Consumer Data Standards
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1-oas3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ResponseBankingProduct', 'model/ResponseBankingProducts'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ResponseBankingProduct'), require('../model/ResponseBankingProducts'));
  } else {
    // Browser globals (root is window)
    if (!root.ConsumerDataStandards) {
      root.ConsumerDataStandards = {};
    }
    root.ConsumerDataStandards.ProductsApi = factory(root.ConsumerDataStandards.ApiClient, root.ConsumerDataStandards.ResponseBankingProduct, root.ConsumerDataStandards.ResponseBankingProducts);
  }
}(this, function(ApiClient, ResponseBankingProduct, ResponseBankingProducts) {
  'use strict';

  /**
   * Products service.
   * @module api/ProductsApi
   * @version 1-oas3
   */

  /**
   * Constructs a new ProductsApi. 
   * @alias module:api/ProductsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getProductDetail operation.
     * @callback module:api/ProductsApi~getProductDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseBankingProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Detail
     * Obtain detailed information on a single product offered openly to the market
     * @param {String} productId ID of the specific product requested
     * @param {module:api/ProductsApi~getProductDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseBankingProduct}
     */
    this.getProductDetail = function(productId, callback) {
      var postBody = null;

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductDetail");
      }


      var pathParams = {
        'productId': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResponseBankingProduct;

      return this.apiClient.callApi(
        '/banking/products/{productId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listProducts operation.
     * @callback module:api/ProductsApi~listProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseBankingProducts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Products
     * Obtain a list of products that are currently openly offered to the market
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.effective Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields.  If absent defaults to &#39;CURRENT&#39; (default to &#39;CURRENT&#39;)
     * @param {String} opts.updatedSince Only include products that have been updated after the specified date and time. If absent defaults to include all products
     * @param {String} opts.brand Filter results based on a specific brand
     * @param {module:model/String} opts.productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.
     * @param {Number} opts.page Page of results to request (standard pagination) (default to 1)
     * @param {Number} opts.pageSize Page size to request. Default is 25 (standard pagination) (default to 25)
     * @param {module:api/ProductsApi~listProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseBankingProducts}
     */
    this.listProducts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'effective': opts['effective'],
        'updated-since': opts['updatedSince'],
        'brand': opts['brand'],
        'product-category': opts['productCategory'],
        'page': opts['page'],
        'page-size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResponseBankingProducts;

      return this.apiClient.callApi(
        '/banking/products', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
