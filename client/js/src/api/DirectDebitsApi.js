/**
 * Consumer Data Standards
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1-oas3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorList', 'model/RequestAccountIds', 'model/ResponseBankingDirectDebits'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorList'), require('../model/RequestAccountIds'), require('../model/ResponseBankingDirectDebits'));
  } else {
    // Browser globals (root is window)
    if (!root.ConsumerDataStandards) {
      root.ConsumerDataStandards = {};
    }
    root.ConsumerDataStandards.DirectDebitsApi = factory(root.ConsumerDataStandards.ApiClient, root.ConsumerDataStandards.ErrorList, root.ConsumerDataStandards.RequestAccountIds, root.ConsumerDataStandards.ResponseBankingDirectDebits);
  }
}(this, function(ApiClient, ErrorList, RequestAccountIds, ResponseBankingDirectDebits) {
  'use strict';

  /**
   * DirectDebits service.
   * @module api/DirectDebitsApi
   * @version 1-oas3
   */

  /**
   * Constructs a new DirectDebitsApi. 
   * @alias module:api/DirectDebitsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the listDirectDebits operation.
     * @callback module:api/DirectDebitsApi~listDirectDebitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseBankingDirectDebits} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Direct Debits For Account
     * Obtain direct debit authorisations for a specific account
     * @param {String} accountId ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page of results to request (standard pagination) (default to 1)
     * @param {Number} opts.pageSize Page size to request. Default is 25 (standard pagination) (default to 25)
     * @param {module:api/DirectDebitsApi~listDirectDebitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseBankingDirectDebits}
     */
    this.listDirectDebits = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling listDirectDebits");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
        'page': opts['page'],
        'page-size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResponseBankingDirectDebits;

      return this.apiClient.callApi(
        '/banking/accounts/{accountId}/direct-debits', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listDirectDebitsBulk operation.
     * @callback module:api/DirectDebitsApi~listDirectDebitsBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseBankingDirectDebits} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Bulk Direct Debits
     * Obtain direct debit authorisations for multiple, filtered accounts
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.isOwned Filters accounts based on whether they are owned by the authorised customer (default to &#39;ALL&#39;)
     * @param {module:model/String} opts.productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.
     * @param {Number} opts.page Page of results to request (standard pagination) (default to 1)
     * @param {Number} opts.pageSize Page size to request. Default is 25 (standard pagination) (default to 25)
     * @param {module:api/DirectDebitsApi~listDirectDebitsBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseBankingDirectDebits}
     */
    this.listDirectDebitsBulk = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'is-owned': opts['isOwned'],
        'product-category': opts['productCategory'],
        'page': opts['page'],
        'page-size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResponseBankingDirectDebits;

      return this.apiClient.callApi(
        '/banking/accounts/direct-debits', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listDirectDebitsSpecificAccounts operation.
     * @callback module:api/DirectDebitsApi~listDirectDebitsSpecificAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseBankingDirectDebits} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Direct Debits For Specific Accounts
     * Obtain direct debit authorisations for a specified list of accounts
     * @param {module:model/RequestAccountIds} requestAccountIds The list of account IDs to obtain information for
     * @param {module:api/DirectDebitsApi~listDirectDebitsSpecificAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseBankingDirectDebits}
     */
    this.listDirectDebitsSpecificAccounts = function(requestAccountIds, callback) {
      var postBody = requestAccountIds;

      // verify the required parameter 'requestAccountIds' is set
      if (requestAccountIds === undefined || requestAccountIds === null) {
        throw new Error("Missing the required parameter 'requestAccountIds' when calling listDirectDebitsSpecificAccounts");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResponseBankingDirectDebits;

      return this.apiClient.callApi(
        '/banking/accounts/direct-debits', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
