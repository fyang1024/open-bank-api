/**
 * Consumer Data Standards
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1-oas3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorList', 'model/RequestAccountIds', 'model/ResponseBankingAccount', 'model/ResponseBankingAccounts', 'model/ResponseBankingAccountsBalances', 'model/ResponseBankingTransactionDetail', 'model/ResponseBankingTransactions'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorList'), require('../model/RequestAccountIds'), require('../model/ResponseBankingAccount'), require('../model/ResponseBankingAccounts'), require('../model/ResponseBankingAccountsBalances'), require('../model/ResponseBankingTransactionDetail'), require('../model/ResponseBankingTransactions'));
  } else {
    // Browser globals (root is window)
    if (!root.ConsumerDataStandards) {
      root.ConsumerDataStandards = {};
    }
    root.ConsumerDataStandards.AccountsApi = factory(root.ConsumerDataStandards.ApiClient, root.ConsumerDataStandards.ErrorList, root.ConsumerDataStandards.RequestAccountIds, root.ConsumerDataStandards.ResponseBankingAccount, root.ConsumerDataStandards.ResponseBankingAccounts, root.ConsumerDataStandards.ResponseBankingAccountsBalances, root.ConsumerDataStandards.ResponseBankingTransactionDetail, root.ConsumerDataStandards.ResponseBankingTransactions);
  }
}(this, function(ApiClient, ErrorList, RequestAccountIds, ResponseBankingAccount, ResponseBankingAccounts, ResponseBankingAccountsBalances, ResponseBankingTransactionDetail, ResponseBankingTransactions) {
  'use strict';

  /**
   * Accounts service.
   * @module api/AccountsApi
   * @version 1-oas3
   */

  /**
   * Constructs a new AccountsApi. 
   * @alias module:api/AccountsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAccountDetail operation.
     * @callback module:api/AccountsApi~getAccountDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseBankingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Detail
     * Obtain detailed information on a single account
     * @param {String} accountId A tokenised identifier for the account which is unique but not shareable
     * @param {module:api/AccountsApi~getAccountDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseBankingAccount}
     */
    this.getAccountDetail = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountDetail");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResponseBankingAccount;

      return this.apiClient.callApi(
        '/banking/accounts/{accountId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionDetail operation.
     * @callback module:api/AccountsApi~getTransactionDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseBankingTransactionDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transaction Detail
     * Obtain detailed information on a transaction for a specific account
     * @param {String} accountId The account id token that is used to uniquely represent the account
     * @param {String} transactionId The unique identifier for the specific transaction for which details are being requested
     * @param {module:api/AccountsApi~getTransactionDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseBankingTransactionDetail}
     */
    this.getTransactionDetail = function(accountId, transactionId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getTransactionDetail");
      }

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getTransactionDetail");
      }


      var pathParams = {
        'accountId': accountId,
        'transactionId': transactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResponseBankingTransactionDetail;

      return this.apiClient.callApi(
        '/banking/accounts/{accountId}/transactions/{transactionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactions operation.
     * @callback module:api/AccountsApi~getTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseBankingTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transactions For Account
     * Obtain transactions for a specific account
     * @param {String} accountId ID of the account to get transactions for.  Must have previously been returned by one of the account list end points.
     * @param {Object} opts Optional parameters
     * @param {String} opts.startTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type
     * @param {String} opts.endTime Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type
     * @param {String} opts.minAmount Filter transactions to only transactions with amounts higher or equal to than this amount
     * @param {String} opts.maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount
     * @param {String} opts.text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string
     * @param {Number} opts.page Page of results to request (standard pagination) (default to 1)
     * @param {Number} opts.pageSize Page size to request. Default is 25 (standard pagination) (default to 25)
     * @param {module:api/AccountsApi~getTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseBankingTransactions}
     */
    this.getTransactions = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getTransactions");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
        'start-time': opts['startTime'],
        'end-time': opts['endTime'],
        'min-amount': opts['minAmount'],
        'max-amount': opts['maxAmount'],
        'text': opts['text'],
        'page': opts['page'],
        'page-size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResponseBankingTransactions;

      return this.apiClient.callApi(
        '/banking/accounts/{accountId}/transactions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccounts operation.
     * @callback module:api/AccountsApi~listAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseBankingAccounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Accounts
     * Obtain a list of accounts
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (default to &#39;ALL&#39;)
     * @param {module:model/String} opts.isOwned Filters accounts based on whether they are owned by the authorised customer (default to &#39;ALL&#39;)
     * @param {module:model/String} opts.productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.
     * @param {Number} opts.page Page of results to request (standard pagination) (default to 1)
     * @param {Number} opts.pageSize Page size to request. Default is 25 (standard pagination) (default to 25)
     * @param {module:api/AccountsApi~listAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseBankingAccounts}
     */
    this.listAccounts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'open-status': opts['openStatus'],
        'is-owned': opts['isOwned'],
        'product-category': opts['productCategory'],
        'page': opts['page'],
        'page-size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResponseBankingAccounts;

      return this.apiClient.callApi(
        '/banking/accounts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBalancesBulk operation.
     * @callback module:api/AccountsApi~listBalancesBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseBankingAccountsBalances} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Bulk Balances
     * Obtain balances for multiple, filtered accounts
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (default to &#39;ALL&#39;)
     * @param {module:model/String} opts.isOwned Filters accounts based on whether they are owned by the authorised customer (default to &#39;ALL&#39;)
     * @param {module:model/String} opts.productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.
     * @param {Number} opts.page Page of results to request (standard pagination) (default to 1)
     * @param {Number} opts.pageSize Page size to request. Default is 25 (standard pagination) (default to 25)
     * @param {module:api/AccountsApi~listBalancesBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseBankingAccountsBalances}
     */
    this.listBalancesBulk = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'open-status': opts['openStatus'],
        'is-owned': opts['isOwned'],
        'product-category': opts['productCategory'],
        'page': opts['page'],
        'page-size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResponseBankingAccountsBalances;

      return this.apiClient.callApi(
        '/banking/accounts/balances', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBalancesSpecificAccounts operation.
     * @callback module:api/AccountsApi~listBalancesSpecificAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseBankingAccountsBalances} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Balances For Specific Accounts
     * Obtain balances for a specified list of accounts
     * @param {module:model/RequestAccountIds} requestAccountIds The list of account IDs to obtain information for
     * @param {module:api/AccountsApi~listBalancesSpecificAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseBankingAccountsBalances}
     */
    this.listBalancesSpecificAccounts = function(requestAccountIds, callback) {
      var postBody = requestAccountIds;

      // verify the required parameter 'requestAccountIds' is set
      if (requestAccountIds === undefined || requestAccountIds === null) {
        throw new Error("Missing the required parameter 'requestAccountIds' when calling listBalancesSpecificAccounts");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResponseBankingAccountsBalances;

      return this.apiClient.callApi(
        '/banking/accounts/balances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listTransactionsBulk operation.
     * @callback module:api/AccountsApi~listTransactionsBulkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseBankingTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transactions For Multiple Accounts
     * Obtain transactions for multiple, filtered accounts
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (default to &#39;ALL&#39;)
     * @param {module:model/String} opts.isOwned Filters accounts based on whether they are owned by the authorised customer (default to &#39;ALL&#39;)
     * @param {module:model/String} opts.productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.
     * @param {String} opts.startTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type
     * @param {String} opts.endTime Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type
     * @param {String} opts.minAmount Filter transactions to only transactions with amounts higher or equal to than this amount
     * @param {String} opts.maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount
     * @param {String} opts.text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string
     * @param {Number} opts.page Page of results to request (standard pagination) (default to 1)
     * @param {Number} opts.pageSize Page size to request. Default is 25 (standard pagination) (default to 25)
     * @param {module:api/AccountsApi~listTransactionsBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseBankingTransactions}
     */
    this.listTransactionsBulk = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'open-status': opts['openStatus'],
        'is-owned': opts['isOwned'],
        'product-category': opts['productCategory'],
        'start-time': opts['startTime'],
        'end-time': opts['endTime'],
        'min-amount': opts['minAmount'],
        'max-amount': opts['maxAmount'],
        'text': opts['text'],
        'page': opts['page'],
        'page-size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResponseBankingTransactions;

      return this.apiClient.callApi(
        '/banking/accounts/transactions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listTransactionsSpecificAccounts operation.
     * @callback module:api/AccountsApi~listTransactionsSpecificAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseBankingTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transactions For Specific Accounts
     * Obtain transactions for a specified list of transactions.
     * @param {module:model/RequestAccountIds} requestAccountIds The list of account IDs to obtain information for
     * @param {Object} opts Optional parameters
     * @param {String} opts.startTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type
     * @param {String} opts.endTime Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type
     * @param {String} opts.minAmount Filter transactions to only transactions with amounts higher or equal to than this amount
     * @param {String} opts.maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount
     * @param {String} opts.text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string
     * @param {Number} opts.page Page of results to request (standard pagination) (default to 1)
     * @param {Number} opts.pageSize Page size to request. Default is 25 (standard pagination) (default to 25)
     * @param {module:api/AccountsApi~listTransactionsSpecificAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseBankingTransactions}
     */
    this.listTransactionsSpecificAccounts = function(requestAccountIds, opts, callback) {
      opts = opts || {};
      var postBody = requestAccountIds;

      // verify the required parameter 'requestAccountIds' is set
      if (requestAccountIds === undefined || requestAccountIds === null) {
        throw new Error("Missing the required parameter 'requestAccountIds' when calling listTransactionsSpecificAccounts");
      }


      var pathParams = {
      };
      var queryParams = {
        'start-time': opts['startTime'],
        'end-time': opts['endTime'],
        'min-amount': opts['minAmount'],
        'max-amount': opts['maxAmount'],
        'text': opts['text'],
        'page': opts['page'],
        'page-size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResponseBankingTransactions;

      return this.apiClient.callApi(
        '/banking/accounts/transactions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
