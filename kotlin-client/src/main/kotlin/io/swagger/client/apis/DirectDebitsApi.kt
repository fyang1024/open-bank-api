/**
* Consumer Data Standards
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
*
* OpenAPI spec version: 1-oas3
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.ErrorList
import io.swagger.client.models.RequestAccountIds
import io.swagger.client.models.ResponseBankingDirectDebits

import io.swagger.client.infrastructure.*

class DirectDebitsApi(basePath: kotlin.String = "https://data.provider.com.au/cds-au/v1") : ApiClient(basePath) {

    /**
    * Get Direct Debits For Account
    * Obtain direct debit authorisations for a specific account
    * @param accountId ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points. 
    * @param page Page of results to request (standard pagination) (optional)
    * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
    * @return ResponseBankingDirectDebits
    */
    @Suppress("UNCHECKED_CAST")
    fun listDirectDebits(accountId: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int) : ResponseBankingDirectDebits {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("page" to listOf("$page"), "page-size" to listOf("$pageSize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/banking/accounts/{accountId}/direct-debits".replace("{"+"accountId"+"}", "$accountId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ResponseBankingDirectDebits>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBankingDirectDebits
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get Bulk Direct Debits
    * Obtain direct debit authorisations for multiple, filtered accounts
    * @param isOwned Filters accounts based on whether they are owned by the authorised customer (optional)
    * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
    * @param page Page of results to request (standard pagination) (optional)
    * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
    * @return ResponseBankingDirectDebits
    */
    @Suppress("UNCHECKED_CAST")
    fun listDirectDebitsBulk(isOwned: kotlin.String, productCategory: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int) : ResponseBankingDirectDebits {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("is-owned" to listOf("$isOwned"), "product-category" to listOf("$productCategory"), "page" to listOf("$page"), "page-size" to listOf("$pageSize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/banking/accounts/direct-debits",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ResponseBankingDirectDebits>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBankingDirectDebits
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get Direct Debits For Specific Accounts
    * Obtain direct debit authorisations for a specified list of accounts
    * @param body The list of account IDs to obtain information for 
    * @return ResponseBankingDirectDebits
    */
    @Suppress("UNCHECKED_CAST")
    fun listDirectDebitsSpecificAccounts(body: RequestAccountIds) : ResponseBankingDirectDebits {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/banking/accounts/direct-debits",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ResponseBankingDirectDebits>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBankingDirectDebits
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
