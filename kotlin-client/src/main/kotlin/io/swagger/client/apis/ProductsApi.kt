/**
* Consumer Data Standards
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
*
* OpenAPI spec version: 1-oas3
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.ResponseBankingProduct
import io.swagger.client.models.ResponseBankingProducts

import io.swagger.client.infrastructure.*

class ProductsApi(basePath: kotlin.String = "https://data.provider.com.au/cds-au/v1") : ApiClient(basePath) {

    /**
    * Get Product Detail
    * Obtain detailed information on a single product offered openly to the market
    * @param productId ID of the specific product requested 
    * @return ResponseBankingProduct
    */
    @Suppress("UNCHECKED_CAST")
    fun getProductDetail(productId: kotlin.String) : ResponseBankingProduct {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/banking/products/{productId}".replace("{"+"productId"+"}", "$productId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ResponseBankingProduct>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBankingProduct
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get Products
    * Obtain a list of products that are currently openly offered to the market
    * @param effective Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields.  If absent defaults to &#x27;CURRENT&#x27; (optional)
    * @param updatedSince Only include products that have been updated after the specified date and time. If absent defaults to include all products (optional)
    * @param brand Filter results based on a specific brand (optional)
    * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
    * @param page Page of results to request (standard pagination) (optional)
    * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
    * @return ResponseBankingProducts
    */
    @Suppress("UNCHECKED_CAST")
    fun listProducts(effective: kotlin.String, updatedSince: kotlin.String, brand: kotlin.String, productCategory: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int) : ResponseBankingProducts {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("effective" to listOf("$effective"), "updated-since" to listOf("$updatedSince"), "brand" to listOf("$brand"), "product-category" to listOf("$productCategory"), "page" to listOf("$page"), "page-size" to listOf("$pageSize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/banking/products",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ResponseBankingProducts>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBankingProducts
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
