/**
* Consumer Data Standards
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
*
* OpenAPI spec version: 1-oas3
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.ResponseBankingPayeeDetails
import io.swagger.client.models.ResponseBankingPayees

import io.swagger.client.infrastructure.*

class PayeesApi(basePath: kotlin.String = "https://data.provider.com.au/cds-au/v1") : ApiClient(basePath) {

    /**
    * Get Payee Detail
    * Obtain detailed information on a single payee
    * @param payeeId The ID used to locate the details of a particular payee 
    * @return ResponseBankingPayeeDetails
    */
    @Suppress("UNCHECKED_CAST")
    fun getPayeeDetail(payeeId: kotlin.String) : ResponseBankingPayeeDetails {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/banking/payees/{payeeId}".replace("{"+"payeeId"+"}", "$payeeId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ResponseBankingPayeeDetails>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBankingPayeeDetails
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get Payees
    * Obtain a list of pre-registered payees
    * @param type Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL (optional)
    * @param page Page of results to request (standard pagination) (optional)
    * @param pageSize Page size to request. Default is 25 (standard pagination) (optional)
    * @return ResponseBankingPayees
    */
    @Suppress("UNCHECKED_CAST")
    fun listPayees(type: kotlin.String, page: kotlin.Int, pageSize: kotlin.Int) : ResponseBankingPayees {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("type" to listOf("$type"), "page" to listOf("$page"), "page-size" to listOf("$pageSize"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/banking/payees",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ResponseBankingPayees>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBankingPayees
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
