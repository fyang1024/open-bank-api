/**
* Consumer Data Standards
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
*
* OpenAPI spec version: 1-oas3
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.models


/**
 * 
 * @param originalStartDate Optional original start date for the loan
 * @param originalLoanAmount Optional original loan value
 * @param originalLoanCurrency If absent assumes AUD
 * @param loanEndDate Date that the loan is due to be repaid in full
 * @param nextInstalmentDate Next date that an instalment is required
 * @param minInstalmentAmount Minimum amount of next instalment
 * @param minInstalmentCurrency If absent assumes AUD
 * @param maxRedraw Maximum amount of funds that can be redrawn. If not present redraw is not available even if the feature exists for the account
 * @param maxRedrawCurrency If absent assumes AUD
 * @param minRedraw Minimum redraw amount
 * @param minRedrawCurrency If absent assumes AUD
 * @param offsetAccountEnabled Set to true if one or more offset accounts are configured for this loan account
 * @param offsetAccountIds The accountIDs of the configured offset accounts attached to this loan. Only offset accounts that can be accesses under the current authorisation should be included. It is expected behaviour that offsetAccountEnabled is set to true but the offsetAccountIds field is absent or empty. This represents a situation where an offset account exists but details can not be accessed under the current authorisation
 * @param repaymentFrequency The expected or required repayment frequency. Formatted according to ISO 8601 Durations
 * @param repaymentType Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST
 */
data class LoanAccount (

    /* Optional original start date for the loan */
    val originalStartDate: kotlin.String? = null,
    /* Optional original loan value */
    val originalLoanAmount: kotlin.String? = null,
    /* If absent assumes AUD */
    val originalLoanCurrency: kotlin.String? = null,
    /* Date that the loan is due to be repaid in full */
    val loanEndDate: kotlin.String? = null,
    /* Next date that an instalment is required */
    val nextInstalmentDate: kotlin.String? = null,
    /* Minimum amount of next instalment */
    val minInstalmentAmount: kotlin.String? = null,
    /* If absent assumes AUD */
    val minInstalmentCurrency: kotlin.String? = null,
    /* Maximum amount of funds that can be redrawn. If not present redraw is not available even if the feature exists for the account */
    val maxRedraw: kotlin.String? = null,
    /* If absent assumes AUD */
    val maxRedrawCurrency: kotlin.String? = null,
    /* Minimum redraw amount */
    val minRedraw: kotlin.String? = null,
    /* If absent assumes AUD */
    val minRedrawCurrency: kotlin.String? = null,
    /* Set to true if one or more offset accounts are configured for this loan account */
    val offsetAccountEnabled: kotlin.Boolean? = null,
    /* The accountIDs of the configured offset accounts attached to this loan. Only offset accounts that can be accesses under the current authorisation should be included. It is expected behaviour that offsetAccountEnabled is set to true but the offsetAccountIds field is absent or empty. This represents a situation where an offset account exists but details can not be accessed under the current authorisation */
    val offsetAccountIds: kotlin.Array<kotlin.String>? = null,
    /* The expected or required repayment frequency. Formatted according to ISO 8601 Durations */
    val repaymentFrequency: kotlin.String? = null,
    /* Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST */
    val repaymentType: LoanAccount.RepaymentType? = null
) {
    /**
    * Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST
    * Values: iNTERESTONLY,pRINCIPALANDINTEREST
    */
    enum class RepaymentType(val value: kotlin.String){
        iNTERESTONLY("INTEREST_ONLY"),
        pRINCIPALANDINTEREST("PRINCIPAL_AND_INTEREST");
    }
}