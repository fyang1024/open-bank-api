/**
* Consumer Data Standards
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
*
* OpenAPI spec version: 1-oas3
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.models

import io.swagger.client.models.Organisation
import io.swagger.client.models.PhysicalAddressWithPurpose

/**
 * 
 * @param physicalAddresses Must contain at least one address. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail
 */
data class OrganisationDetail (
    /* Must contain at least one address. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail */
    val physicalAddresses: kotlin.Array<PhysicalAddressWithPurpose>,
    /* The date and time that this record was last updated by the customer. If no update has occurred then this date should reflect the initial creation date for the data */
    val lastUpdateTime: kotlin.String,
    /* The last name of the individual providing access on behalf of the organisation. For people with single names the single name should be in this field */
    val agentLastName: kotlin.String,
    /* The role of the individual identified as the agent who is providing authorisation.  Expected to be used for display.  Default to “Unspecified” if the role is not known */
    val agentRole: kotlin.String,
    /* Name of the organisation */
    val businessName: kotlin.String,
    /* Legal organisation type */
    val organisationType: OrganisationDetail.OrganisationType
,
    /* The first name of the individual providing access on behalf of the organisation. For people with single names this field need not be present.  The single name should be in the lastName field */
    val agentFirstName: kotlin.String? = null,
    /* Legal name, if different to the business name */
    val legalName: kotlin.String? = null,
    /* Short name used for communication, if  different to the business name */
    val shortName: kotlin.String? = null,
    /* Australian Business Number for the organisation */
    val abn: kotlin.String? = null,
    /* Australian Company Number for the organisation. Required only if an ACN is applicable for the organisation type */
    val acn: kotlin.String? = null,
    /* True if registered with the ACNC.  False if not. Absent or null if not confirmed. */
    val isACNCRegistered: kotlin.Boolean? = null,
    /* [ANZSIC (2006)](http://www.abs.gov.au/anzsic) code for the organisation. */
    val industryCode: kotlin.String? = null,
    /* Enumeration with values from ISO 3166 Alpha-3 country codes.  Assumed to be AUS if absent */
    val registeredCountry: kotlin.String? = null,
    /* The date the organisation described was established */
    val establishmentDate: kotlin.String? = null
) {
}