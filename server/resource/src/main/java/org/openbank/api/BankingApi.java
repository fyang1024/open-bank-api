/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.0.0-beta2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openbank.api;

import org.openbank.model.ErrorList;
import org.openbank.model.RequestAccountIds;
import org.openbank.model.ResponseBankingAccount;
import org.openbank.model.ResponseBankingAccounts;
import org.openbank.model.ResponseBankingAccountsBalances;
import org.openbank.model.ResponseBankingDirectDebits;
import org.openbank.model.ResponseBankingPayeeDetails;
import org.openbank.model.ResponseBankingPayees;
import org.openbank.model.ResponseBankingProduct;
import org.openbank.model.ResponseBankingProducts;
import org.openbank.model.ResponseBankingTransactionDetail;
import org.openbank.model.ResponseBankingTransactions;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-02-15T14:07:08.087118+11:00[Australia/Sydney]")

@Validated
@Api(value = "banking", description = "the banking API")
public interface BankingApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Get Account Detail", nickname = "getAccountDetail", notes = "Obtain detailed information on a single account", response = ResponseBankingAccount.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Read accounts information")
        })
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseBankingAccount.class) })
    @RequestMapping(value = "/banking/accounts/{accountId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseBankingAccount> getAccountDetail(@ApiParam(value = "A tokenised identifier for the account which is unique but not shareable",required=true) @PathVariable("accountId") String accountId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"meta\" : \"{}\",  \"links\" : {    \"self\" : \"self\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }

    @ApiOperation(value = "Get Payee Detail", nickname = "getPayeeDetail", notes = "Obtain detailed information on a single payee", response = ResponseBankingPayeeDetails.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "payees", description = "Read payees information")
            })
    }, tags={ "Payees", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseBankingPayeeDetails.class) })
    @RequestMapping(value = "/banking/payees/{payeeId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseBankingPayeeDetails> getPayeeDetail(@ApiParam(value = "The ID used to locate the details of a particular payee",required=true) @PathVariable("payeeId") String payeeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"meta\" : \"{}\",  \"links\" : {    \"self\" : \"self\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }


    @ApiOperation(value = "Get Product Detail", nickname = "getProductDetail", notes = "Obtain detailed information on a single product offered openly to the market", response = ResponseBankingProduct.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "products", description = "Read products information")
            })
    }, tags={ "Products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseBankingProduct.class) })
    @RequestMapping(value = "/banking/products/{productId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseBankingProduct> getProductDetail(@ApiParam(value = "ID of the specific product requested",required=true) @PathVariable("productId") String productId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"meta\" : \"{}\",  \"links\" : {    \"self\" : \"self\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }

    @ApiOperation(value = "Get Transaction Detail", nickname = "getTransactionDetail", notes = "Obtain detailed information on a transaction for a specific account", response = ResponseBankingTransactionDetail.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Read accounts information")
            })
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseBankingTransactionDetail.class) })
    @RequestMapping(value = "/banking/accounts/{accountId}/transactions/{transactionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseBankingTransactionDetail> getTransactionDetail(@ApiParam(value = "The account id token that is used to uniquely represent the account",required=true) @PathVariable("accountId") String accountId,@ApiParam(value = "The unique identifier for the specific transaction for which details are being requested",required=true) @PathVariable("transactionId") String transactionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"data\" : {    \"accountId\" : \"accountId\",    \"displayName\" : \"displayName\",    \"nickname\" : \"nickname\",    \"transaction\" : [ null, null ]  },  \"meta\" : \"{}\",  \"links\" : {    \"self\" : \"self\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }

    @ApiOperation(value = "Get Transactions For Account", nickname = "getTransactions", notes = "Obtain transactions for a specific account", response = ResponseBankingTransactions.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Read accounts information")
            })
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseBankingTransactions.class) })
    @RequestMapping(value = "/banking/accounts/{accountId}/transactions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseBankingTransactions> getTransactions(@ApiParam(value = "ID of the account to get transactions for.  Must have previously been returned by one of the account list end points.",required=true) @PathVariable("accountId") String accountId,@ApiParam(value = "Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type") @Valid @RequestParam(value = "start-time", required = false) String startTime,@ApiParam(value = "Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type") @Valid @RequestParam(value = "end-time", required = false) String endTime,@ApiParam(value = "Filter transactions to only transactions with amounts higher or equal to than this amount") @Valid @RequestParam(value = "min-amount", required = false) String minAmount,@ApiParam(value = "Filter transactions to only transactions with amounts less than or equal to than this amount") @Valid @RequestParam(value = "max-amount", required = false) String maxAmount,@ApiParam(value = "Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string") @Valid @RequestParam(value = "text", required = false) String text,@ApiParam(value = "Page of results to request (standard pagination)", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "Page size to request. Default is 25 (standard pagination)", defaultValue = "25") @Valid @RequestParam(value = "page-size", required = false, defaultValue="25") Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"data\" : {    \"accountId\" : \"accountId\",    \"displayName\" : \"displayName\",    \"nickname\" : \"nickname\",    \"transactions\" : [ {      \"postingDateTime\" : \"postingDateTime\",      \"amount\" : \"amount\",      \"apcaNumber\" : \"apcaNumber\",      \"isDetailAvailable\" : true,      \"description\" : \"description\",      \"type\" : \"FEE\",      \"billerName\" : \"billerName\",      \"executionDateTime\" : \"executionDateTime\",      \"transactionId\" : \"transactionId\",      \"merchantName\" : \"merchantName\",      \"billerCode\" : \"billerCode\",      \"reference\" : \"reference\",      \"accountId\" : \"accountId\",      \"merchantCategoryCode\" : \"merchantCategoryCode\",      \"valueDateTime\" : \"valueDateTime\",      \"currency\" : \"currency\",      \"crn\" : \"crn\",      \"status\" : \"PENDING\"    }, {      \"postingDateTime\" : \"postingDateTime\",      \"amount\" : \"amount\",      \"apcaNumber\" : \"apcaNumber\",      \"isDetailAvailable\" : true,      \"description\" : \"description\",      \"type\" : \"FEE\",      \"billerName\" : \"billerName\",      \"executionDateTime\" : \"executionDateTime\",      \"transactionId\" : \"transactionId\",      \"merchantName\" : \"merchantName\",      \"billerCode\" : \"billerCode\",      \"reference\" : \"reference\",      \"accountId\" : \"accountId\",      \"merchantCategoryCode\" : \"merchantCategoryCode\",      \"valueDateTime\" : \"valueDateTime\",      \"currency\" : \"currency\",      \"crn\" : \"crn\",      \"status\" : \"PENDING\"    } ]  },  \"meta\" : {    \"totalRecords\" : 0,    \"totalPages\" : 6  },  \"links\" : {    \"next\" : \"next\",    \"last\" : \"last\",    \"prev\" : \"prev\",    \"self\" : \"self\",    \"first\" : \"first\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }

    @ApiOperation(value = "Get Accounts", nickname = "listAccounts", notes = "Obtain a list of accounts", response = ResponseBankingAccounts.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Read accounts information")
            })
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseBankingAccounts.class) })
    @RequestMapping(value = "/banking/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseBankingAccounts> listAccounts(@ApiParam(value = "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed", allowableValues = "OPEN, CLOSED, ALL", defaultValue = "ALL") @Valid @RequestParam(value = "open-status", required = false, defaultValue="ALL") String openStatus,@ApiParam(value = "Filters accounts based on whether they are owned by the authorised customer", allowableValues = "OWNED, NOT_OWNED, ALL", defaultValue = "ALL") @Valid @RequestParam(value = "is-owned", required = false, defaultValue="ALL") String isOwned,@ApiParam(value = "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.", allowableValues = "PERS_AT_CALL_DEPOSITS, BUS_AT_CALL_DEPOSITS, TERM_DEPOSITS, RESIDENTIAL_MORTGAGES, PERS_CRED_AND_CHRG_CARDS, BUS_CRED_AND_CHRG_CARDS, PERS_LOANS, PERS_LEASING, BUS_LEASING, TRADE_FINANCE, PERS_OVERDRAFT, BUS_OVERDRAFT, BUS_LOANS, FOREIGN_CURR_AT_CALL_DEPOSITS, FOREIGN_CURR_TERM_DEPOSITS, FOREIGN_CURR_LOAN, FOREIGN_CURRRENCT_OVERDRAFT, TRAVEL_CARD") @Valid @RequestParam(value = "product-category", required = false) String productCategory,@ApiParam(value = "Page of results to request (standard pagination)", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "Page size to request. Default is 25 (standard pagination)", defaultValue = "25") @Valid @RequestParam(value = "page-size", required = false, defaultValue="25") Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"data\" : {    \"accounts\" : [ {      \"accountId\" : \"accountId\",      \"maskedNumber\" : \"maskedNumber\",      \"openStatus\" : \"OPEN\",      \"displayName\" : \"displayName\",      \"isOwned\" : true,      \"nickname\" : \"nickname\",      \"productName\" : \"productName\"    }, {      \"accountId\" : \"accountId\",      \"maskedNumber\" : \"maskedNumber\",      \"openStatus\" : \"OPEN\",      \"displayName\" : \"displayName\",      \"isOwned\" : true,      \"nickname\" : \"nickname\",      \"productName\" : \"productName\"    } ]  },  \"meta\" : {    \"totalRecords\" : 0,    \"totalPages\" : 6  },  \"links\" : {    \"next\" : \"next\",    \"last\" : \"last\",    \"prev\" : \"prev\",    \"self\" : \"self\",    \"first\" : \"first\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }

    @ApiOperation(value = "Get Bulk Balances", nickname = "listBalancesBulk", notes = "Obtain balances for multiple, filtered accounts", response = ResponseBankingAccountsBalances.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Read accounts information")
            })
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "resource listing the financial balances for the account", response = ResponseBankingAccountsBalances.class) })
    @RequestMapping(value = "/banking/accounts/balances",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseBankingAccountsBalances> listBalancesBulk(@ApiParam(value = "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed", allowableValues = "OPEN, CLOSED, ALL", defaultValue = "ALL") @Valid @RequestParam(value = "open-status", required = false, defaultValue="ALL") String openStatus,@ApiParam(value = "Filters accounts based on whether they are owned by the authorised customer", allowableValues = "OWNED, NOT_OWNED, ALL", defaultValue = "ALL") @Valid @RequestParam(value = "is-owned", required = false, defaultValue="ALL") String isOwned,@ApiParam(value = "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.", allowableValues = "PERS_AT_CALL_DEPOSITS, BUS_AT_CALL_DEPOSITS, TERM_DEPOSITS, RESIDENTIAL_MORTGAGES, PERS_CRED_AND_CHRG_CARDS, BUS_CRED_AND_CHRG_CARDS, PERS_LOANS, PERS_LEASING, BUS_LEASING, TRADE_FINANCE, PERS_OVERDRAFT, BUS_OVERDRAFT, BUS_LOANS, FOREIGN_CURR_AT_CALL_DEPOSITS, FOREIGN_CURR_TERM_DEPOSITS, FOREIGN_CURR_LOAN, FOREIGN_CURRRENCT_OVERDRAFT, TRAVEL_CARD") @Valid @RequestParam(value = "product-category", required = false) String productCategory,@ApiParam(value = "Page of results to request (standard pagination)", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "Page size to request. Default is 25 (standard pagination)", defaultValue = "25") @Valid @RequestParam(value = "page-size", required = false, defaultValue="25") Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"data\" : {    \"balances\" : [ {      \"accountId\" : \"accountId\",      \"purses\" : [ {        \"amount\" : \"amount\",        \"currency\" : \"currency\"      }, {        \"amount\" : \"amount\",        \"currency\" : \"currency\"      } ],      \"lending\" : {        \"amortisedLimit\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"creditLimit\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"accountBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"availableBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        }      },      \"deposit\" : {        \"currentBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"availableBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        }      },      \"balanceUType\" : \"deposit\"    }, {      \"accountId\" : \"accountId\",      \"purses\" : [ {        \"amount\" : \"amount\",        \"currency\" : \"currency\"      }, {        \"amount\" : \"amount\",        \"currency\" : \"currency\"      } ],      \"lending\" : {        \"amortisedLimit\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"creditLimit\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"accountBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"availableBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        }      },      \"deposit\" : {        \"currentBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"availableBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        }      },      \"balanceUType\" : \"deposit\"    } ]  },  \"meta\" : {    \"totalRecords\" : 0,    \"totalPages\" : 6  },  \"links\" : {    \"next\" : \"next\",    \"last\" : \"last\",    \"prev\" : \"prev\",    \"self\" : \"self\",    \"first\" : \"first\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }

    @ApiOperation(value = "Get Balances For Specific Accounts", nickname = "listBalancesSpecificAccounts", notes = "Obtain balances for a specified list of accounts", response = ResponseBankingAccountsBalances.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Read accounts information")
        })
    }, tags = {"Accounts",})
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseBankingAccountsBalances.class),
        @ApiResponse(code = 422, message = "The request was well formed but was unable to be processed due to business logic specific to the request", response = ErrorList.class) })
    @RequestMapping(value = "/banking/accounts/balances",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResponseBankingAccountsBalances> listBalancesSpecificAccounts(@ApiParam(value = "The list of account IDs to obtain information for" ,required=true )  @Valid @RequestBody RequestAccountIds requestAccountIds) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"data\" : {    \"balances\" : [ {      \"accountId\" : \"accountId\",      \"purses\" : [ {        \"amount\" : \"amount\",        \"currency\" : \"currency\"      }, {        \"amount\" : \"amount\",        \"currency\" : \"currency\"      } ],      \"lending\" : {        \"amortisedLimit\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"creditLimit\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"accountBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"availableBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        }      },      \"deposit\" : {        \"currentBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"availableBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        }      },      \"balanceUType\" : \"deposit\"    }, {      \"accountId\" : \"accountId\",      \"purses\" : [ {        \"amount\" : \"amount\",        \"currency\" : \"currency\"      }, {        \"amount\" : \"amount\",        \"currency\" : \"currency\"      } ],      \"lending\" : {        \"amortisedLimit\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"creditLimit\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"accountBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"availableBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        }      },      \"deposit\" : {        \"currentBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        },        \"availableBalance\" : {          \"amount\" : \"amount\",          \"currency\" : \"currency\"        }      },      \"balanceUType\" : \"deposit\"    } ]  },  \"meta\" : {    \"totalRecords\" : 0,    \"totalPages\" : 6  },  \"links\" : {    \"next\" : \"next\",    \"last\" : \"last\",    \"prev\" : \"prev\",    \"self\" : \"self\",    \"first\" : \"first\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }

    @ApiOperation(value = "Get Direct Debits For Account", nickname = "listDirectDebits", notes = "Obtain direct debit authorisations for a specific account", response = ResponseBankingDirectDebits.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "direct-debits", description = "Read direct debits information"),
            })
    }, tags={ "Direct Debits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseBankingDirectDebits.class) })
    @RequestMapping(value = "/banking/accounts/{accountId}/direct-debits",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseBankingDirectDebits> listDirectDebits(@ApiParam(value = "ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points.",required=true) @PathVariable("accountId") String accountId,@ApiParam(value = "Page of results to request (standard pagination)", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "Page size to request. Default is 25 (standard pagination)", defaultValue = "25") @Valid @RequestParam(value = "page-size", required = false, defaultValue="25") Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"data\" : {    \"directDebitAuthorisations\" : [ {      \"lastDebitAmount\" : \"lastDebitAmount\",      \"accountId\" : \"accountId\",      \"lastDebitDateTime\" : \"lastDebitDateTime\",      \"authorisedEntity\" : {        \"arbn\" : \"arbn\",        \"name\" : \"name\",        \"financialInstitution\" : \"financialInstitution\",        \"abn\" : \"abn\",        \"acn\" : \"acn\"      }    }, {      \"lastDebitAmount\" : \"lastDebitAmount\",      \"accountId\" : \"accountId\",      \"lastDebitDateTime\" : \"lastDebitDateTime\",      \"authorisedEntity\" : {        \"arbn\" : \"arbn\",        \"name\" : \"name\",        \"financialInstitution\" : \"financialInstitution\",        \"abn\" : \"abn\",        \"acn\" : \"acn\"      }    } ]  },  \"meta\" : {    \"totalRecords\" : 0,    \"totalPages\" : 6  },  \"links\" : {    \"next\" : \"next\",    \"last\" : \"last\",    \"prev\" : \"prev\",    \"self\" : \"self\",    \"first\" : \"first\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }

    @ApiOperation(value = "Get Bulk Direct Debits", nickname = "listDirectDebitsBulk", notes = "Obtain direct debit authorisations for multiple, filtered accounts", response = ResponseBankingDirectDebits.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "direct-debits", description = "Read direct debits information")
            })
    }, tags={ "Direct Debits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseBankingDirectDebits.class) })
    @RequestMapping(value = "/banking/accounts/direct-debits",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseBankingDirectDebits> listDirectDebitsBulk(@ApiParam(value = "Filters accounts based on whether they are owned by the authorised customer", allowableValues = "OWNED, NOT_OWNED, ALL", defaultValue = "ALL") @Valid @RequestParam(value = "is-owned", required = false, defaultValue="ALL") String isOwned,@ApiParam(value = "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.", allowableValues = "PERS_AT_CALL_DEPOSITS, BUS_AT_CALL_DEPOSITS, TERM_DEPOSITS, RESIDENTIAL_MORTGAGES, PERS_CRED_AND_CHRG_CARDS, BUS_CRED_AND_CHRG_CARDS, PERS_LOANS, PERS_LEASING, BUS_LEASING, TRADE_FINANCE, PERS_OVERDRAFT, BUS_OVERDRAFT, BUS_LOANS, FOREIGN_CURR_AT_CALL_DEPOSITS, FOREIGN_CURR_TERM_DEPOSITS, FOREIGN_CURR_LOAN, FOREIGN_CURRRENCT_OVERDRAFT, TRAVEL_CARD") @Valid @RequestParam(value = "product-category", required = false) String productCategory,@ApiParam(value = "Page of results to request (standard pagination)", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "Page size to request. Default is 25 (standard pagination)", defaultValue = "25") @Valid @RequestParam(value = "page-size", required = false, defaultValue="25") Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"data\" : {    \"directDebitAuthorisations\" : [ {      \"lastDebitAmount\" : \"lastDebitAmount\",      \"accountId\" : \"accountId\",      \"lastDebitDateTime\" : \"lastDebitDateTime\",      \"authorisedEntity\" : {        \"arbn\" : \"arbn\",        \"name\" : \"name\",        \"financialInstitution\" : \"financialInstitution\",        \"abn\" : \"abn\",        \"acn\" : \"acn\"      }    }, {      \"lastDebitAmount\" : \"lastDebitAmount\",      \"accountId\" : \"accountId\",      \"lastDebitDateTime\" : \"lastDebitDateTime\",      \"authorisedEntity\" : {        \"arbn\" : \"arbn\",        \"name\" : \"name\",        \"financialInstitution\" : \"financialInstitution\",        \"abn\" : \"abn\",        \"acn\" : \"acn\"      }    } ]  },  \"meta\" : {    \"totalRecords\" : 0,    \"totalPages\" : 6  },  \"links\" : {    \"next\" : \"next\",    \"last\" : \"last\",    \"prev\" : \"prev\",    \"self\" : \"self\",    \"first\" : \"first\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }

    @ApiOperation(value = "Get Direct Debits For Specific Accounts", nickname = "listDirectDebitsSpecificAccounts", notes = "Obtain direct debit authorisations for a specified list of accounts", response = ResponseBankingDirectDebits.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "direct-debits", description = "Read direct debits information"),
            })
    }, tags={ "Direct Debits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseBankingDirectDebits.class),
        @ApiResponse(code = 422, message = "The request was well formed but was unable to be processed due to business logic specific to the request", response = ErrorList.class) })
    @RequestMapping(value = "/banking/accounts/direct-debits",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResponseBankingDirectDebits> listDirectDebitsSpecificAccounts(@ApiParam(value = "The list of account IDs to obtain information for" ,required=true )  @Valid @RequestBody RequestAccountIds requestAccountIds) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"data\" : {    \"directDebitAuthorisations\" : [ {      \"lastDebitAmount\" : \"lastDebitAmount\",      \"accountId\" : \"accountId\",      \"lastDebitDateTime\" : \"lastDebitDateTime\",      \"authorisedEntity\" : {        \"arbn\" : \"arbn\",        \"name\" : \"name\",        \"financialInstitution\" : \"financialInstitution\",        \"abn\" : \"abn\",        \"acn\" : \"acn\"      }    }, {      \"lastDebitAmount\" : \"lastDebitAmount\",      \"accountId\" : \"accountId\",      \"lastDebitDateTime\" : \"lastDebitDateTime\",      \"authorisedEntity\" : {        \"arbn\" : \"arbn\",        \"name\" : \"name\",        \"financialInstitution\" : \"financialInstitution\",        \"abn\" : \"abn\",        \"acn\" : \"acn\"      }    } ]  },  \"meta\" : {    \"totalRecords\" : 0,    \"totalPages\" : 6  },  \"links\" : {    \"next\" : \"next\",    \"last\" : \"last\",    \"prev\" : \"prev\",    \"self\" : \"self\",    \"first\" : \"first\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }

    @ApiOperation(value = "Get Payees", nickname = "listPayees", notes = "Obtain a list of pre-registered payees", response = ResponseBankingPayees.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "payees", description = "Read payees information")
            })
    }, tags={ "Payees", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseBankingPayees.class) })
    @RequestMapping(value = "/banking/payees",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseBankingPayees> listPayees(@ApiParam(value = "Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL", allowableValues = "DOMESTIC, INTERNATIONAL, BILLER", defaultValue = "ALL") @Valid @RequestParam(value = "type", required = false, defaultValue="ALL") String type,@ApiParam(value = "Page of results to request (standard pagination)", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "Page size to request. Default is 25 (standard pagination)", defaultValue = "25") @Valid @RequestParam(value = "page-size", required = false, defaultValue="25") Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"data\" : {    \"payees\" : [ {      \"nickname\" : \"nickname\",      \"description\" : \"description\",      \"payeeId\" : \"payeeId\",      \"type\" : \"DOMESTIC\",      \"creationDate\" : \"creationDate\"    }, {      \"nickname\" : \"nickname\",      \"description\" : \"description\",      \"payeeId\" : \"payeeId\",      \"type\" : \"DOMESTIC\",      \"creationDate\" : \"creationDate\"    } ]  },  \"meta\" : {    \"totalRecords\" : 0,    \"totalPages\" : 6  },  \"links\" : {    \"next\" : \"next\",    \"last\" : \"last\",    \"prev\" : \"prev\",    \"self\" : \"self\",    \"first\" : \"first\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }

    @ApiOperation(value = "Get Products", nickname = "listProducts", notes = "Obtain a list of products that are currently openly offered to the market", response = ResponseBankingProducts.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "products", description = "Read products information")
            })
    }, tags={ "Products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseBankingProducts.class) })
    @RequestMapping(value = "/banking/products",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseBankingProducts> listProducts(@ApiParam(value = "Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields.  If absent defaults to 'CURRENT'", allowableValues = "CURRENT, FUTURE, ALL", defaultValue = "CURRENT") @Valid @RequestParam(value = "effective", required = false, defaultValue="CURRENT") String effective,@ApiParam(value = "Only include products that have been updated after the specified date and time. If absent defaults to include all products") @Valid @RequestParam(value = "updated-since", required = false) String updatedSince,@ApiParam(value = "Filter results based on a specific brand") @Valid @RequestParam(value = "brand", required = false) String brand,@ApiParam(value = "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.", allowableValues = "PERS_AT_CALL_DEPOSITS, BUS_AT_CALL_DEPOSITS, TERM_DEPOSITS, RESIDENTIAL_MORTGAGES, PERS_CRED_AND_CHRG_CARDS, BUS_CRED_AND_CHRG_CARDS, PERS_LOANS, PERS_LEASING, BUS_LEASING, TRADE_FINANCE, PERS_OVERDRAFT, BUS_OVERDRAFT, BUS_LOANS, FOREIGN_CURR_AT_CALL_DEPOSITS, FOREIGN_CURR_TERM_DEPOSITS, FOREIGN_CURR_LOAN, FOREIGN_CURRRENCT_OVERDRAFT, TRAVEL_CARD") @Valid @RequestParam(value = "product-category", required = false) String productCategory,@ApiParam(value = "Page of results to request (standard pagination)", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "Page size to request. Default is 25 (standard pagination)", defaultValue = "25") @Valid @RequestParam(value = "page-size", required = false, defaultValue="25") Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"data\" : {    \"products\" : [ {      \"effectiveTo\" : \"effectiveTo\",      \"lastUpdated\" : \"lastUpdated\",      \"additionalInformation\" : {        \"eligibilityUri\" : \"eligibilityUri\",        \"bundleUri\" : \"bundleUri\",        \"feesAndPricingUri\" : \"feesAndPricingUri\",        \"termsUri\" : \"termsUri\",        \"overviewUri\" : \"overviewUri\"      },      \"brandName\" : \"brandName\",      \"isTailored\" : true,      \"productId\" : \"productId\",      \"name\" : \"name\",      \"description\" : \"description\",      \"applicationUri\" : \"applicationUri\",      \"effectiveFrom\" : \"effectiveFrom\",      \"brand\" : \"brand\"    }, {      \"effectiveTo\" : \"effectiveTo\",      \"lastUpdated\" : \"lastUpdated\",      \"additionalInformation\" : {        \"eligibilityUri\" : \"eligibilityUri\",        \"bundleUri\" : \"bundleUri\",        \"feesAndPricingUri\" : \"feesAndPricingUri\",        \"termsUri\" : \"termsUri\",        \"overviewUri\" : \"overviewUri\"      },      \"brandName\" : \"brandName\",      \"isTailored\" : true,      \"productId\" : \"productId\",      \"name\" : \"name\",      \"description\" : \"description\",      \"applicationUri\" : \"applicationUri\",      \"effectiveFrom\" : \"effectiveFrom\",      \"brand\" : \"brand\"    } ]  },  \"meta\" : {    \"totalRecords\" : 0,    \"totalPages\" : 6  },  \"links\" : {    \"next\" : \"next\",    \"last\" : \"last\",    \"prev\" : \"prev\",    \"self\" : \"self\",    \"first\" : \"first\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }

    @ApiOperation(value = "Get Transactions For Multiple Accounts", nickname = "listTransactionsBulk", notes = "Obtain transactions for multiple, filtered accounts", response = ResponseBankingTransactions.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Read accounts information")
            })
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseBankingTransactions.class) })
    @RequestMapping(value = "/banking/accounts/transactions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseBankingTransactions> listTransactionsBulk(@ApiParam(value = "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed", allowableValues = "OPEN, CLOSED, ALL", defaultValue = "ALL") @Valid @RequestParam(value = "open-status", required = false, defaultValue="ALL") String openStatus,@ApiParam(value = "Filters accounts based on whether they are owned by the authorised customer", allowableValues = "OWNED, NOT_OWNED, ALL", defaultValue = "ALL") @Valid @RequestParam(value = "is-owned", required = false, defaultValue="ALL") String isOwned,@ApiParam(value = "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.", allowableValues = "PERS_AT_CALL_DEPOSITS, BUS_AT_CALL_DEPOSITS, TERM_DEPOSITS, RESIDENTIAL_MORTGAGES, PERS_CRED_AND_CHRG_CARDS, BUS_CRED_AND_CHRG_CARDS, PERS_LOANS, PERS_LEASING, BUS_LEASING, TRADE_FINANCE, PERS_OVERDRAFT, BUS_OVERDRAFT, BUS_LOANS, FOREIGN_CURR_AT_CALL_DEPOSITS, FOREIGN_CURR_TERM_DEPOSITS, FOREIGN_CURR_LOAN, FOREIGN_CURRRENCT_OVERDRAFT, TRAVEL_CARD") @Valid @RequestParam(value = "product-category", required = false) String productCategory,@ApiParam(value = "Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type") @Valid @RequestParam(value = "start-time", required = false) String startTime,@ApiParam(value = "Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type") @Valid @RequestParam(value = "end-time", required = false) String endTime,@ApiParam(value = "Filter transactions to only transactions with amounts higher or equal to than this amount") @Valid @RequestParam(value = "min-amount", required = false) String minAmount,@ApiParam(value = "Filter transactions to only transactions with amounts less than or equal to than this amount") @Valid @RequestParam(value = "max-amount", required = false) String maxAmount,@ApiParam(value = "Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string") @Valid @RequestParam(value = "text", required = false) String text,@ApiParam(value = "Page of results to request (standard pagination)", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "Page size to request. Default is 25 (standard pagination)", defaultValue = "25") @Valid @RequestParam(value = "page-size", required = false, defaultValue="25") Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"data\" : {    \"accountId\" : \"accountId\",    \"displayName\" : \"displayName\",    \"nickname\" : \"nickname\",    \"transactions\" : [ {      \"postingDateTime\" : \"postingDateTime\",      \"amount\" : \"amount\",      \"apcaNumber\" : \"apcaNumber\",      \"isDetailAvailable\" : true,      \"description\" : \"description\",      \"type\" : \"FEE\",      \"billerName\" : \"billerName\",      \"executionDateTime\" : \"executionDateTime\",      \"transactionId\" : \"transactionId\",      \"merchantName\" : \"merchantName\",      \"billerCode\" : \"billerCode\",      \"reference\" : \"reference\",      \"accountId\" : \"accountId\",      \"merchantCategoryCode\" : \"merchantCategoryCode\",      \"valueDateTime\" : \"valueDateTime\",      \"currency\" : \"currency\",      \"crn\" : \"crn\",      \"status\" : \"PENDING\"    }, {      \"postingDateTime\" : \"postingDateTime\",      \"amount\" : \"amount\",      \"apcaNumber\" : \"apcaNumber\",      \"isDetailAvailable\" : true,      \"description\" : \"description\",      \"type\" : \"FEE\",      \"billerName\" : \"billerName\",      \"executionDateTime\" : \"executionDateTime\",      \"transactionId\" : \"transactionId\",      \"merchantName\" : \"merchantName\",      \"billerCode\" : \"billerCode\",      \"reference\" : \"reference\",      \"accountId\" : \"accountId\",      \"merchantCategoryCode\" : \"merchantCategoryCode\",      \"valueDateTime\" : \"valueDateTime\",      \"currency\" : \"currency\",      \"crn\" : \"crn\",      \"status\" : \"PENDING\"    } ]  },  \"meta\" : {    \"totalRecords\" : 0,    \"totalPages\" : 6  },  \"links\" : {    \"next\" : \"next\",    \"last\" : \"last\",    \"prev\" : \"prev\",    \"self\" : \"self\",    \"first\" : \"first\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }

    @ApiOperation(value = "Get Transactions For Specific Accounts", nickname = "listTransactionsSpecificAccounts", notes = "Obtain transactions for a specified list of transactions.", response = ResponseBankingTransactions.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            @AuthorizationScope(scope = "accounts", description = "Read accounts information")
            })
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ResponseBankingTransactions.class),
        @ApiResponse(code = 422, message = "The request was well formed but was unable to be processed due to business logic specific to the request", response = ErrorList.class) })
    @RequestMapping(value = "/banking/accounts/transactions",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResponseBankingTransactions> listTransactionsSpecificAccounts(@ApiParam(value = "The list of account IDs to obtain information for" ,required=true )  @Valid @RequestBody RequestAccountIds requestAccountIds,@ApiParam(value = "Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type") @Valid @RequestParam(value = "start-time", required = false) String startTime,@ApiParam(value = "Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type") @Valid @RequestParam(value = "end-time", required = false) String endTime,@ApiParam(value = "Filter transactions to only transactions with amounts higher or equal to than this amount") @Valid @RequestParam(value = "min-amount", required = false) String minAmount,@ApiParam(value = "Filter transactions to only transactions with amounts less than or equal to than this amount") @Valid @RequestParam(value = "max-amount", required = false) String maxAmount,@ApiParam(value = "Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string") @Valid @RequestParam(value = "text", required = false) String text,@ApiParam(value = "Page of results to request (standard pagination)", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "Page size to request. Default is 25 (standard pagination)", defaultValue = "25") @Valid @RequestParam(value = "page-size", required = false, defaultValue="25") Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"data\" : {    \"accountId\" : \"accountId\",    \"displayName\" : \"displayName\",    \"nickname\" : \"nickname\",    \"transactions\" : [ {      \"postingDateTime\" : \"postingDateTime\",      \"amount\" : \"amount\",      \"apcaNumber\" : \"apcaNumber\",      \"isDetailAvailable\" : true,      \"description\" : \"description\",      \"type\" : \"FEE\",      \"billerName\" : \"billerName\",      \"executionDateTime\" : \"executionDateTime\",      \"transactionId\" : \"transactionId\",      \"merchantName\" : \"merchantName\",      \"billerCode\" : \"billerCode\",      \"reference\" : \"reference\",      \"accountId\" : \"accountId\",      \"merchantCategoryCode\" : \"merchantCategoryCode\",      \"valueDateTime\" : \"valueDateTime\",      \"currency\" : \"currency\",      \"crn\" : \"crn\",      \"status\" : \"PENDING\"    }, {      \"postingDateTime\" : \"postingDateTime\",      \"amount\" : \"amount\",      \"apcaNumber\" : \"apcaNumber\",      \"isDetailAvailable\" : true,      \"description\" : \"description\",      \"type\" : \"FEE\",      \"billerName\" : \"billerName\",      \"executionDateTime\" : \"executionDateTime\",      \"transactionId\" : \"transactionId\",      \"merchantName\" : \"merchantName\",      \"billerCode\" : \"billerCode\",      \"reference\" : \"reference\",      \"accountId\" : \"accountId\",      \"merchantCategoryCode\" : \"merchantCategoryCode\",      \"valueDateTime\" : \"valueDateTime\",      \"currency\" : \"currency\",      \"crn\" : \"crn\",      \"status\" : \"PENDING\"    } ]  },  \"meta\" : {    \"totalRecords\" : 0,    \"totalPages\" : 6  },  \"links\" : {    \"next\" : \"next\",    \"last\" : \"last\",    \"prev\" : \"prev\",    \"self\" : \"self\",    \"first\" : \"first\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }

}
