/**
* Consumer Data Standards
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
*
* OpenAPI spec version: 1-oas3
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.models

import org.openapitools.server.models.AccountDiscounts

/**
 * 
 * @param name Name of the fee
 * @param feeType The type of fee
 * @param amount The amount charged for the fee. Assumed to be in AUD. One of amount, balanceRate and transactionRate is mandatory
 * @param balanceRate A fee rate calculated based on a proportion of the balance. Assumed to be in AUD. One of amount, balanceRate and transactionRate is mandatory
 * @param transactionRate A fee rate calculated based on a proportion of a transaction. Assumed to be in AUD. One of amount, balanceRate and transactionRate is mandatory
 * @param currency The currency the fee will be charged in. Assumes AUD if absent
 * @param additionalValue Generic field containing additional information relevant to the feeType specified. Whether mandatory or not is dependent on the value of feeType
 * @param additionalInfo Display text providing more information on the fee
 * @param additionalInfoUri Link to a web page with more information on this fee
 * @param discounts 
 */
data class AccountFees (
    /* Name of the fee */
    val name: kotlin.String,
    /* The type of fee */
    val feeType: AccountFees.FeeType,
    /* The amount charged for the fee. Assumed to be in AUD. One of amount, balanceRate and transactionRate is mandatory */
    val amount: kotlin.String? = null,
    /* A fee rate calculated based on a proportion of the balance. Assumed to be in AUD. One of amount, balanceRate and transactionRate is mandatory */
    val balanceRate: kotlin.String? = null,
    /* A fee rate calculated based on a proportion of a transaction. Assumed to be in AUD. One of amount, balanceRate and transactionRate is mandatory */
    val transactionRate: kotlin.String? = null,
    /* The currency the fee will be charged in. Assumes AUD if absent */
    val currency: kotlin.String? = null,
    /* Generic field containing additional information relevant to the feeType specified. Whether mandatory or not is dependent on the value of feeType */
    val additionalValue: kotlin.String? = null,
    /* Display text providing more information on the fee */
    val additionalInfo: kotlin.String? = null,
    /* Link to a web page with more information on this fee */
    val additionalInfoUri: kotlin.String? = null,
    val discounts: kotlin.Array<AccountDiscounts>? = null
) {

    /**
    * The type of fee
    * Values: pERIODIC,tRANSACTION,eXIT,oVERDRAW,mINBALANCE,rEDRAW,cHEQUECASH,cHEQUESTOP,cHEQUEBOOK,cARDREPLACE,pAPERSTATEMENT,oTHEREVENT
    */
    enum class FeeType(val value: kotlin.String){
    
        pERIODIC("PERIODIC"),
    
        tRANSACTION("TRANSACTION"),
    
        eXIT("EXIT"),
    
        oVERDRAW("OVERDRAW"),
    
        mINBALANCE("MIN_BALANCE"),
    
        rEDRAW("REDRAW"),
    
        cHEQUECASH("CHEQUE_CASH"),
    
        cHEQUESTOP("CHEQUE_STOP"),
    
        cHEQUEBOOK("CHEQUE_BOOK"),
    
        cARDREPLACE("CARD_REPLACE"),
    
        pAPERSTATEMENT("PAPER_STATEMENT"),
    
        oTHEREVENT("OTHER_EVENT");
    
    }

}

