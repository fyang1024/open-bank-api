/**
* Consumer Data Standards
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
*
* OpenAPI spec version: 1-oas3
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authentication
import io.ktor.auth.basicAuthentication
import io.ktor.auth.oauth
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.OAuthServerSettings
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.*
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.*

import kotlinx.coroutines.experimental.asCoroutineDispatcher

import org.openapitools.server.ApplicationAuthProviders
import org.openapitools.server.Paths
import org.openapitools.server.ApplicationExecutors
import org.openapitools.server.HTTP.client
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.infrastructure.apiKeyAuth

// ktor 0.9.x is missing io.ktor.locations.DELETE, this adds it.
// see https://github.com/ktorio/ktor/issues/288
import org.openapitools.server.delete

import org.openapitools.server.models.ErrorList
import org.openapitools.server.models.RequestAccountIds
import org.openapitools.server.models.ResponseBankingAccount
import org.openapitools.server.models.ResponseBankingAccounts
import org.openapitools.server.models.ResponseBankingAccountsBalances
import org.openapitools.server.models.ResponseBankingTransactionDetail
import org.openapitools.server.models.ResponseBankingTransactions

fun Route.AccountsApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    get<Paths.getAccountDetail> {  it: Paths.getAccountDetail ->
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "meta" : "{}",
          "links" : {
            "self" : "self"
          }
        }"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
    }
    

    get<Paths.getTransactionDetail> {  it: Paths.getTransactionDetail ->
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "data" : {
            "accountId" : "accountId",
            "displayName" : "displayName",
            "nickname" : "nickname",
            "transaction" : [ null, null ]
          },
          "meta" : "{}",
          "links" : {
            "self" : "self"
          }
        }"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
    }
    

    get<Paths.getTransactions> {  it: Paths.getTransactions ->
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "data" : {
            "accountId" : "accountId",
            "displayName" : "displayName",
            "nickname" : "nickname",
            "transactions" : [ {
              "postingDateTime" : "postingDateTime",
              "amount" : "amount",
              "apcaNumber" : "apcaNumber",
              "isDetailAvailable" : true,
              "description" : "description",
              "type" : "FEE",
              "billerName" : "billerName",
              "executionDateTime" : "executionDateTime",
              "transactionId" : "transactionId",
              "merchantName" : "merchantName",
              "billerCode" : "billerCode",
              "reference" : "reference",
              "accountId" : "accountId",
              "merchantCategoryCode" : "merchantCategoryCode",
              "valueDateTime" : "valueDateTime",
              "currency" : "currency",
              "crn" : "crn",
              "status" : "PENDING"
            }, {
              "postingDateTime" : "postingDateTime",
              "amount" : "amount",
              "apcaNumber" : "apcaNumber",
              "isDetailAvailable" : true,
              "description" : "description",
              "type" : "FEE",
              "billerName" : "billerName",
              "executionDateTime" : "executionDateTime",
              "transactionId" : "transactionId",
              "merchantName" : "merchantName",
              "billerCode" : "billerCode",
              "reference" : "reference",
              "accountId" : "accountId",
              "merchantCategoryCode" : "merchantCategoryCode",
              "valueDateTime" : "valueDateTime",
              "currency" : "currency",
              "crn" : "crn",
              "status" : "PENDING"
            } ]
          },
          "meta" : {
            "totalRecords" : 0,
            "totalPages" : 6
          },
          "links" : {
            "next" : "next",
            "last" : "last",
            "prev" : "prev",
            "self" : "self",
            "first" : "first"
          }
        }"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
    }
    

    get<Paths.listAccounts> {  it: Paths.listAccounts ->
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "data" : {
            "accounts" : [ {
              "accountId" : "accountId",
              "maskedNumber" : "maskedNumber",
              "openStatus" : "OPEN",
              "displayName" : "displayName",
              "isOwned" : true,
              "nickname" : "nickname",
              "productName" : "productName"
            }, {
              "accountId" : "accountId",
              "maskedNumber" : "maskedNumber",
              "openStatus" : "OPEN",
              "displayName" : "displayName",
              "isOwned" : true,
              "nickname" : "nickname",
              "productName" : "productName"
            } ]
          },
          "meta" : {
            "totalRecords" : 0,
            "totalPages" : 6
          },
          "links" : {
            "next" : "next",
            "last" : "last",
            "prev" : "prev",
            "self" : "self",
            "first" : "first"
          }
        }"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
    }
    

    get<Paths.listBalancesBulk> {  it: Paths.listBalancesBulk ->
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "data" : {
            "balances" : [ {
              "accountId" : "accountId",
              "purses" : [ {
                "amount" : "amount",
                "currency" : "currency"
              }, {
                "amount" : "amount",
                "currency" : "currency"
              } ],
              "lending" : {
                "amortisedLimit" : {
                  "amount" : "amount",
                  "currency" : "currency"
                },
                "creditLimit" : {
                  "amount" : "amount",
                  "currency" : "currency"
                },
                "accountBalance" : {
                  "amount" : "amount",
                  "currency" : "currency"
                },
                "availableBalance" : {
                  "amount" : "amount",
                  "currency" : "currency"
                }
              },
              "deposit" : {
                "currentBalance" : {
                  "amount" : "amount",
                  "currency" : "currency"
                },
                "availableBalance" : {
                  "amount" : "amount",
                  "currency" : "currency"
                }
              },
              "balanceUType" : "deposit"
            }, {
              "accountId" : "accountId",
              "purses" : [ {
                "amount" : "amount",
                "currency" : "currency"
              }, {
                "amount" : "amount",
                "currency" : "currency"
              } ],
              "lending" : {
                "amortisedLimit" : {
                  "amount" : "amount",
                  "currency" : "currency"
                },
                "creditLimit" : {
                  "amount" : "amount",
                  "currency" : "currency"
                },
                "accountBalance" : {
                  "amount" : "amount",
                  "currency" : "currency"
                },
                "availableBalance" : {
                  "amount" : "amount",
                  "currency" : "currency"
                }
              },
              "deposit" : {
                "currentBalance" : {
                  "amount" : "amount",
                  "currency" : "currency"
                },
                "availableBalance" : {
                  "amount" : "amount",
                  "currency" : "currency"
                }
              },
              "balanceUType" : "deposit"
            } ]
          },
          "meta" : {
            "totalRecords" : 0,
            "totalPages" : 6
          },
          "links" : {
            "next" : "next",
            "last" : "last",
            "prev" : "prev",
            "self" : "self",
            "first" : "first"
          }
        }"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
    }
    

    route("/banking/accounts/balances") {
        post {
            val exampleContentType = "application/json"
            val exampleContentString = """{
              "data" : {
                "balances" : [ {
                  "accountId" : "accountId",
                  "purses" : [ {
                    "amount" : "amount",
                    "currency" : "currency"
                  }, {
                    "amount" : "amount",
                    "currency" : "currency"
                  } ],
                  "lending" : {
                    "amortisedLimit" : {
                      "amount" : "amount",
                      "currency" : "currency"
                    },
                    "creditLimit" : {
                      "amount" : "amount",
                      "currency" : "currency"
                    },
                    "accountBalance" : {
                      "amount" : "amount",
                      "currency" : "currency"
                    },
                    "availableBalance" : {
                      "amount" : "amount",
                      "currency" : "currency"
                    }
                  },
                  "deposit" : {
                    "currentBalance" : {
                      "amount" : "amount",
                      "currency" : "currency"
                    },
                    "availableBalance" : {
                      "amount" : "amount",
                      "currency" : "currency"
                    }
                  },
                  "balanceUType" : "deposit"
                }, {
                  "accountId" : "accountId",
                  "purses" : [ {
                    "amount" : "amount",
                    "currency" : "currency"
                  }, {
                    "amount" : "amount",
                    "currency" : "currency"
                  } ],
                  "lending" : {
                    "amortisedLimit" : {
                      "amount" : "amount",
                      "currency" : "currency"
                    },
                    "creditLimit" : {
                      "amount" : "amount",
                      "currency" : "currency"
                    },
                    "accountBalance" : {
                      "amount" : "amount",
                      "currency" : "currency"
                    },
                    "availableBalance" : {
                      "amount" : "amount",
                      "currency" : "currency"
                    }
                  },
                  "deposit" : {
                    "currentBalance" : {
                      "amount" : "amount",
                      "currency" : "currency"
                    },
                    "availableBalance" : {
                      "amount" : "amount",
                      "currency" : "currency"
                    }
                  },
                  "balanceUType" : "deposit"
                } ]
              },
              "meta" : {
                "totalRecords" : 0,
                "totalPages" : 6
              },
              "links" : {
                "next" : "next",
                "last" : "last",
                "prev" : "prev",
                "self" : "self",
                "first" : "first"
              }
            }"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }
    

    get<Paths.listTransactionsBulk> {  it: Paths.listTransactionsBulk ->
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "data" : {
            "accountId" : "accountId",
            "displayName" : "displayName",
            "nickname" : "nickname",
            "transactions" : [ {
              "postingDateTime" : "postingDateTime",
              "amount" : "amount",
              "apcaNumber" : "apcaNumber",
              "isDetailAvailable" : true,
              "description" : "description",
              "type" : "FEE",
              "billerName" : "billerName",
              "executionDateTime" : "executionDateTime",
              "transactionId" : "transactionId",
              "merchantName" : "merchantName",
              "billerCode" : "billerCode",
              "reference" : "reference",
              "accountId" : "accountId",
              "merchantCategoryCode" : "merchantCategoryCode",
              "valueDateTime" : "valueDateTime",
              "currency" : "currency",
              "crn" : "crn",
              "status" : "PENDING"
            }, {
              "postingDateTime" : "postingDateTime",
              "amount" : "amount",
              "apcaNumber" : "apcaNumber",
              "isDetailAvailable" : true,
              "description" : "description",
              "type" : "FEE",
              "billerName" : "billerName",
              "executionDateTime" : "executionDateTime",
              "transactionId" : "transactionId",
              "merchantName" : "merchantName",
              "billerCode" : "billerCode",
              "reference" : "reference",
              "accountId" : "accountId",
              "merchantCategoryCode" : "merchantCategoryCode",
              "valueDateTime" : "valueDateTime",
              "currency" : "currency",
              "crn" : "crn",
              "status" : "PENDING"
            } ]
          },
          "meta" : {
            "totalRecords" : 0,
            "totalPages" : 6
          },
          "links" : {
            "next" : "next",
            "last" : "last",
            "prev" : "prev",
            "self" : "self",
            "first" : "first"
          }
        }"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
    }
    

    route("/banking/accounts/transactions") {
        post {
            val exampleContentType = "application/json"
            val exampleContentString = """{
              "data" : {
                "accountId" : "accountId",
                "displayName" : "displayName",
                "nickname" : "nickname",
                "transactions" : [ {
                  "postingDateTime" : "postingDateTime",
                  "amount" : "amount",
                  "apcaNumber" : "apcaNumber",
                  "isDetailAvailable" : true,
                  "description" : "description",
                  "type" : "FEE",
                  "billerName" : "billerName",
                  "executionDateTime" : "executionDateTime",
                  "transactionId" : "transactionId",
                  "merchantName" : "merchantName",
                  "billerCode" : "billerCode",
                  "reference" : "reference",
                  "accountId" : "accountId",
                  "merchantCategoryCode" : "merchantCategoryCode",
                  "valueDateTime" : "valueDateTime",
                  "currency" : "currency",
                  "crn" : "crn",
                  "status" : "PENDING"
                }, {
                  "postingDateTime" : "postingDateTime",
                  "amount" : "amount",
                  "apcaNumber" : "apcaNumber",
                  "isDetailAvailable" : true,
                  "description" : "description",
                  "type" : "FEE",
                  "billerName" : "billerName",
                  "executionDateTime" : "executionDateTime",
                  "transactionId" : "transactionId",
                  "merchantName" : "merchantName",
                  "billerCode" : "billerCode",
                  "reference" : "reference",
                  "accountId" : "accountId",
                  "merchantCategoryCode" : "merchantCategoryCode",
                  "valueDateTime" : "valueDateTime",
                  "currency" : "currency",
                  "crn" : "crn",
                  "status" : "PENDING"
                } ]
              },
              "meta" : {
                "totalRecords" : 0,
                "totalPages" : 6
              },
              "links" : {
                "next" : "next",
                "last" : "last",
                "prev" : "prev",
                "self" : "self",
                "first" : "first"
              }
            }"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }
    
}
