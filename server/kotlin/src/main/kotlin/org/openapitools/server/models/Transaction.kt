/**
* Consumer Data Standards
* API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
*
* OpenAPI spec version: 1-oas3
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.models


/**
 * 
 * @param accountId A unique ID of the account adhering to the standards for ID permanence
 * @param transactionId A unique ID of the transaction adhering to the standards for ID permanence. This is mandatory (through hashing if necessary) unless there are specific and justifiable technical reasons why a transaction cannot be uniquely identified for a particular account type
 * @param isDetailAvailable True if extended information is available using the transaction detail end point. False if extended data is not available
 * @param type The type of the transaction
 * @param status Status of the transaction whether pending or posted.  Note that there is currently no provision in the standards to gaurantee the ability to correlate a pending transaction with an associated posted transaction
 * @param description The transaction description as applied by the financial institution
 * @param postingDateTime The time the transaction was posted. This field is mandatory if the transaction has status POSTED. This is the time that appears on a standard statement
 * @param valueDateTime Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry
 * @param executionDateTime The time the transaction was executed by the originating customer, if available
 * @param amount The value of the transaction. Negative values mean money was outgoing from the account
 * @param currency The currency for the transaction amount. AUD assumed if not present
 * @param reference The reference for the transaction provided by the originating institution.  Empty string if no data provided
 * @param merchantName Name of the merchant for an outgoing payment to a merchant
 * @param merchantCategoryCode The merchant category code (or MCC) for an outgoing payment to a merchant
 * @param billerCode BPay Biller Code for the transaction (if available)
 * @param billerName Name of the BPay biller for the transaction (if available)
 * @param crn BPay CRN for the transaction (if available)
 * @param apcaNumber 6 Digit APCA number for the initiating institution
 */
data class Transaction (
    /* A unique ID of the account adhering to the standards for ID permanence */
    val accountId: kotlin.String,
    /* True if extended information is available using the transaction detail end point. False if extended data is not available */
    val isDetailAvailable: kotlin.Boolean,
    /* The type of the transaction */
    val type: Transaction.Type,
    /* Status of the transaction whether pending or posted.  Note that there is currently no provision in the standards to gaurantee the ability to correlate a pending transaction with an associated posted transaction */
    val status: Transaction.Status,
    /* The transaction description as applied by the financial institution */
    val description: kotlin.String,
    /* The reference for the transaction provided by the originating institution.  Empty string if no data provided */
    val reference: kotlin.String,
    /* A unique ID of the transaction adhering to the standards for ID permanence. This is mandatory (through hashing if necessary) unless there are specific and justifiable technical reasons why a transaction cannot be uniquely identified for a particular account type */
    val transactionId: kotlin.String? = null,
    /* The time the transaction was posted. This field is mandatory if the transaction has status POSTED. This is the time that appears on a standard statement */
    val postingDateTime: kotlin.String? = null,
    /* Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry */
    val valueDateTime: kotlin.String? = null,
    /* The time the transaction was executed by the originating customer, if available */
    val executionDateTime: kotlin.String? = null,
    /* The value of the transaction. Negative values mean money was outgoing from the account */
    val amount: kotlin.String? = null,
    /* The currency for the transaction amount. AUD assumed if not present */
    val currency: kotlin.String? = null,
    /* Name of the merchant for an outgoing payment to a merchant */
    val merchantName: kotlin.String? = null,
    /* The merchant category code (or MCC) for an outgoing payment to a merchant */
    val merchantCategoryCode: kotlin.String? = null,
    /* BPay Biller Code for the transaction (if available) */
    val billerCode: kotlin.String? = null,
    /* Name of the BPay biller for the transaction (if available) */
    val billerName: kotlin.String? = null,
    /* BPay CRN for the transaction (if available) */
    val crn: kotlin.String? = null,
    /* 6 Digit APCA number for the initiating institution */
    val apcaNumber: kotlin.String? = null
) {

    /**
    * The type of the transaction
    * Values: fEE,iNTERESTCHARGED,iNTERESTPAID,tRANSFEROUTGOING,tRANSFERINCOMING,pAYMENT,oTHER
    */
    enum class Type(val value: kotlin.String){
    
        fEE("FEE"),
    
        iNTERESTCHARGED("INTEREST_CHARGED"),
    
        iNTERESTPAID("INTEREST_PAID"),
    
        tRANSFEROUTGOING("TRANSFER_OUTGOING"),
    
        tRANSFERINCOMING("TRANSFER_INCOMING"),
    
        pAYMENT("PAYMENT"),
    
        oTHER("OTHER");
    
    }

    /**
    * Status of the transaction whether pending or posted.  Note that there is currently no provision in the standards to gaurantee the ability to correlate a pending transaction with an associated posted transaction
    * Values: pENDING,pOSTED
    */
    enum class Status(val value: kotlin.String){
    
        pENDING("PENDING"),
    
        pOSTED("POSTED");
    
    }

}

